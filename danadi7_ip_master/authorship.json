[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"    enableAssertions \u003d true"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"}"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danadi7":27,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"![Claude Screenshot](./Ui.png)"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"Claude is a chatbot written in `Java 11` that can be used as a personal task manager. "},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"The current version supports tracking of todos, events, and deadlines. "},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"## Quick Start"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"1. Ensure you have Java 11 installed on your computer."},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"2. Downloaded the latest `ip.jar`."},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for Claude."},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"4. Start Claude by running `java -jar ip.jar` in a terminal application of your choice."},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"5. Type the commands in the box at the bottom of the screen, and pres `Enter` or hit the Send button."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"Enjoy!"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"\u003e Note on command format:"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"\u003e * Words in `UPPER_CASE` denote parameters to be supplied by the user."},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"### Adding a Deadline: `deadline`"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"Adds a deadline-type task to the existing task list."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"Format: `dateline DESCRIPTION /by DATE`"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"* `DESCRIPTION` should contain the description of the event to be added."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"* `DATE` should contain the deadline of the task to be added, in a `YYYY-MM-DD` format."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"* Duplicate tasks with the same description and deadline will not be added. Instead, an alert is show to the user."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"Example:"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"* `dateline CS2103 iP Final Submission /by 2020-09-18`"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"### Adding an Event: `event`"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"Adds an event-type task to the existing task list."},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"Format: `event DESCRIPTION /at DATE`"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"* `DESCRIPTION` should contain the description of the event to be added."},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"* `DATE` should contain the date of the event to be added, in a `YYYY-MM-DD` format."},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"* Duplicate events with the same description and date will not be added. Instead, an alert is show to the user."},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"Examples:"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"* `event CS2103 Tutorial /on 2020-09-17`"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"* `event CS2103 Lecture /on 2020-09-18`"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"### Adding a Todo: `todo`"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"Adds a todo-type task to the existing task list."},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"* `DESCRIPTION` should contain the description of the task to be added."},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"* Duplicate tasks with the same description will not be added. Instead, an alert is show to the user."},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"Example:"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"* `todo Catch Pokemon`"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"### Listing tasks: `list`"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"Shows all the tasks on existing task list."},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"Format: `list`"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"### Finding a task: `find`"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"Searches the existing list of tasks for tasks that contain the input search string."},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"Format: `find SEARCH_STRING`"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"* `SEARCH_STRING` should contain the word or series of words to search for."},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"Example:"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"* `find CS2103`"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":"### Marking a task as done: `done`"},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"Marks the task at the specified index as done."},{"lineNumber":77,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":78,"author":{"gitId":"danadi7"},"content":"Format: `done INDEX`"},{"lineNumber":79,"author":{"gitId":"danadi7"},"content":"* `INDEX` refers to the index of task as shown by the `list` command."},{"lineNumber":80,"author":{"gitId":"danadi7"},"content":"* `INDEX` must be a positive integer."},{"lineNumber":81,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":82,"author":{"gitId":"danadi7"},"content":"Example:"},{"lineNumber":83,"author":{"gitId":"danadi7"},"content":"* `done 42`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"danadi7"},"content":"### Deleting a task: `delete`"},{"lineNumber":87,"author":{"gitId":"danadi7"},"content":"Deletes the task at the specified index."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"danadi7"},"content":"Format: `delete INDEX`"},{"lineNumber":90,"author":{"gitId":"danadi7"},"content":"* `INDEX` refers to the index of task as shown by the `list` command."},{"lineNumber":91,"author":{"gitId":"danadi7"},"content":"* `INDEX` must be a positive integer."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"danadi7"},"content":"Example:"},{"lineNumber":94,"author":{"gitId":"danadi7"},"content":"* `delete 666`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"danadi7"},"content":"### Exiting the application: `bye`"},{"lineNumber":98,"author":{"gitId":"danadi7"},"content":"Exits the application."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"danadi7"},"content":"Format: `bye`"}],"authorContributionMap":{"danadi7":89,"-":11}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import duke.logic.CommandParser;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":" * The Duke program is a chatbot for managing tasks and deadlines."},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":" *"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" * @author Daniel Adipranoto"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":" * @version 0.1"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"    private static final String FILE_PATH \u003d \"data/DukeDB.txt\";"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    private TaskManager tm;"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    // Current exit status. Acts as exit signal for MainWindow."},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    private boolean isExit;"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * Constructor for Duke class."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * Initiates the User Interface and tries to load save file from disk."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"    public Duke() {"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"        ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"        storage \u003d new Storage(FILE_PATH);"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"            tm \u003d new TaskManager((storage.load()));"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"            ui.showLoadingError();"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"            tm \u003d new TaskManager();"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        isExit \u003d false;"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     * Generates response to command input."},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     * @param input String input by user."},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"     * @return Response after command is executed."},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"    public String getResponse(String input) {"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"            Command c \u003d CommandParser.parse(input);"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"            return c.execute(tm, ui, storage);"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"            return e.getMessage();"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"     * Returns the current exit status."},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"     * Acts as a exit signal for MainWindow."},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"     * @return Current isExit value."},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"    public boolean getExitStatus() {"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"        return isExit;"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"     * Passes Welcome message from Ui class to MainWindow."},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"     * @return Welcome message."},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"    public String getWelcomeMessage() {"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"        return ui.showWelcome();"},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danadi7":73,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"            stage.setTitle(\"Claude\");"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    private boolean isExit;"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        isExit \u003d false;"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        // Prints Welcome message."},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"                DialogBox.getDukeDialog(duke.getWelcomeMessage(), dukeImage)"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"        isExit \u003d duke.getExitStatus();"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"        if (isExit) {"},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"            Platform.exit();"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":65}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":" * Custom Exception for Duke."},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":11}},{"path":"src/main/java/duke/logic/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.AddCommand;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.ExitCommand;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.ListCommand;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" * Parses commands that are input into Duke."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"public class CommandParser {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     * Parses user input and returns the relevant Command."},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"     * @return Command object the corresponds to the user input"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not on the recognised list of commands."},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"        // Disallow use of escape characters and symbols used internally by Storage class"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"        if (command.contains(\"|\") || command.contains(\"\\\\\")) {"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"The characters \\\\ and | are forbidden!\");"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"        String[] extractedCommand \u003d command.split(\" \", 2);"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"        switch(extractedCommand[0]) {"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"        case(\"bye\"):"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"            return new ExitCommand(command);"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        case(\"list\"):"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"            return new ListCommand(command);"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        case(\"done\"):"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"            return new DoneCommand(command);"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        case(\"delete\"):"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"            return new DeleteCommand(command);"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        case(\"find\"):"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"            return new FindCommand(command);"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"        case(\"deadline\"):"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"        case(\"event\"):"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        case(\"todo\"):"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"            return new AddCommand(command);"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"        default:"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Command not recognised!\");"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":50}},{"path":"src/main/java/duke/logic/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Event;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"import duke.model.task.ToDo;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":" * Handles \u0027deadline\u0027, \u0027event\u0027 and \u0027todo\u0027 command input by user."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"public class AddCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"     * Constructor for AddCommand class."},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"    public AddCommand(String command) {"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     * Interprets the type of Task the user wishes to add."},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"     * @return Response generated after command is executed."},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        if (command.startsWith(\"deadline\")) {"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"            // Handles empty deadline command"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"            if (command.length() \u003c\u003d 9) {"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Description of a deadline cannot be empty!\");"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"            String[] commandDetails \u003d command.substring(9).split(\" /by \", 2);"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"            // Handles improperly formatted deadline command"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"            if (commandDetails.length !\u003d 2) {"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Deadline not properly formatted!\");"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"            LocalDate dlDate;"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"            String description \u003d commandDetails[0];"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"                dlDate \u003d LocalDate.parse(commandDetails[1]);"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Invalid DateTime format. Please use YYYY-MM-DD.\");"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"            boolean isDuplicate \u003d isDuplicateDeadline(tm, description, dlDate);"},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"            if (isDuplicate) {"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"The task you have added already exists.\");"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"            Deadline deadline \u003d new Deadline(description, dlDate);"},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"            tm.addTask(deadline);"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"            postCommandSave(tm, storage);"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"            return (\"Task added: \" + deadline);"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"        } else if (command.startsWith(\"event\")) {"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"            // Handles empty event command"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"            if (command.length() \u003c\u003d 6) {"},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Description of a deadline cannot be empty!\");"},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"            String[] commandDetails \u003d command.substring(6).split(\" /at \", 2);"},{"lineNumber":77,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":78,"author":{"gitId":"danadi7"},"content":"            // Handles improperly formatted event command"},{"lineNumber":79,"author":{"gitId":"danadi7"},"content":"            if (commandDetails.length !\u003d 2) {"},{"lineNumber":80,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Event not properly formatted!\");"},{"lineNumber":81,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":83,"author":{"gitId":"danadi7"},"content":"            LocalDate eventDate;"},{"lineNumber":84,"author":{"gitId":"danadi7"},"content":"            String description \u003d commandDetails[0];"},{"lineNumber":85,"author":{"gitId":"danadi7"},"content":"            try {"},{"lineNumber":86,"author":{"gitId":"danadi7"},"content":"                eventDate \u003d LocalDate.parse(commandDetails[1]);"},{"lineNumber":87,"author":{"gitId":"danadi7"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":88,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Invalid DateTime format. Please use YYYY-MM-DD.\");"},{"lineNumber":89,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":91,"author":{"gitId":"danadi7"},"content":"            boolean isDuplicate \u003d isDuplicateEvent(tm, description, eventDate);"},{"lineNumber":92,"author":{"gitId":"danadi7"},"content":"            if (isDuplicate) {"},{"lineNumber":93,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"The task you have added already exists.\");"},{"lineNumber":94,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":96,"author":{"gitId":"danadi7"},"content":"            Event event \u003d new Event(commandDetails[0], eventDate);"},{"lineNumber":97,"author":{"gitId":"danadi7"},"content":"            tm.addTask(event);"},{"lineNumber":98,"author":{"gitId":"danadi7"},"content":"            postCommandSave(tm, storage);"},{"lineNumber":99,"author":{"gitId":"danadi7"},"content":"            return (\"Task added: \" + event);"},{"lineNumber":100,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":101,"author":{"gitId":"danadi7"},"content":"        } else if (command.startsWith(\"todo\")) {"},{"lineNumber":102,"author":{"gitId":"danadi7"},"content":"            // Handles empty todo command"},{"lineNumber":103,"author":{"gitId":"danadi7"},"content":"            if (command.length() \u003c\u003d 5) {"},{"lineNumber":104,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Description of a deadline cannot be empty!\");"},{"lineNumber":105,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"danadi7"},"content":"            String commandDetails \u003d command.substring(5);"},{"lineNumber":107,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":108,"author":{"gitId":"danadi7"},"content":"            boolean isDuplicate \u003d isDuplicateToDo(tm, commandDetails);"},{"lineNumber":109,"author":{"gitId":"danadi7"},"content":"            if (isDuplicate) {"},{"lineNumber":110,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"The task you have added already exists.\");"},{"lineNumber":111,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":113,"author":{"gitId":"danadi7"},"content":"            ToDo todo \u003d new ToDo(commandDetails);"},{"lineNumber":114,"author":{"gitId":"danadi7"},"content":"            tm.addTask(todo);"},{"lineNumber":115,"author":{"gitId":"danadi7"},"content":"            postCommandSave(tm, storage);"},{"lineNumber":116,"author":{"gitId":"danadi7"},"content":"            return (\"Task added: \" + todo);"},{"lineNumber":117,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":118,"author":{"gitId":"danadi7"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Command not recognised!\");"},{"lineNumber":120,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":123,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"danadi7"},"content":"     * Detects if new Deadline is a duplicate of a previous Deadline."},{"lineNumber":125,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":127,"author":{"gitId":"danadi7"},"content":"     * @param description Description associated with new Deadline."},{"lineNumber":128,"author":{"gitId":"danadi7"},"content":"     * @param dlDate Date associated with the new Deadline."},{"lineNumber":129,"author":{"gitId":"danadi7"},"content":"     * @return True if a duplicate Deadline is present, false otherwise."},{"lineNumber":130,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"danadi7"},"content":"    private boolean isDuplicateDeadline(TaskManager tm, String description, LocalDate dlDate) {"},{"lineNumber":132,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e duplicatesList \u003d tm.findTasks(description);"},{"lineNumber":133,"author":{"gitId":"danadi7"},"content":"        if (duplicatesList.isEmpty()) {"},{"lineNumber":134,"author":{"gitId":"danadi7"},"content":"            return false;"},{"lineNumber":135,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"danadi7"},"content":"        for (Task task:duplicatesList) {"},{"lineNumber":137,"author":{"gitId":"danadi7"},"content":"            boolean descriptionMatches \u003d task.getDescription().equals(description);"},{"lineNumber":138,"author":{"gitId":"danadi7"},"content":"            boolean dateMatches \u003d false;"},{"lineNumber":139,"author":{"gitId":"danadi7"},"content":"            boolean isDeadline \u003d task instanceof Deadline;"},{"lineNumber":140,"author":{"gitId":"danadi7"},"content":"            if (isDeadline) {"},{"lineNumber":141,"author":{"gitId":"danadi7"},"content":"                dateMatches \u003d ((Deadline) task).getBy().compareTo(dlDate) \u003d\u003d 0;"},{"lineNumber":142,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"danadi7"},"content":"            if (isDeadline \u0026\u0026 descriptionMatches \u0026\u0026 dateMatches) {"},{"lineNumber":144,"author":{"gitId":"danadi7"},"content":"                return true;"},{"lineNumber":145,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"danadi7"},"content":"        return false;"},{"lineNumber":148,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":150,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"danadi7"},"content":"     * Detects if a new Event is a duplicate of a previous Event."},{"lineNumber":152,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":154,"author":{"gitId":"danadi7"},"content":"     * @param description Description associated with new Event."},{"lineNumber":155,"author":{"gitId":"danadi7"},"content":"     * @param eventDate Date associated with the new Event."},{"lineNumber":156,"author":{"gitId":"danadi7"},"content":"     * @return True if a duplicate Event is present, false otherwise."},{"lineNumber":157,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"danadi7"},"content":"    private boolean isDuplicateEvent(TaskManager tm, String description, LocalDate eventDate) {"},{"lineNumber":159,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e duplicatesList \u003d tm.findTasks(description);"},{"lineNumber":160,"author":{"gitId":"danadi7"},"content":"        if (duplicatesList.isEmpty()) {"},{"lineNumber":161,"author":{"gitId":"danadi7"},"content":"            return false;"},{"lineNumber":162,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"danadi7"},"content":"        for (Task task:duplicatesList) {"},{"lineNumber":164,"author":{"gitId":"danadi7"},"content":"            boolean descriptionMatches \u003d task.getDescription().equals(description);"},{"lineNumber":165,"author":{"gitId":"danadi7"},"content":"            boolean dateMatches \u003d false;"},{"lineNumber":166,"author":{"gitId":"danadi7"},"content":"            boolean isEvent \u003d task instanceof Event;"},{"lineNumber":167,"author":{"gitId":"danadi7"},"content":"            if (isEvent) {"},{"lineNumber":168,"author":{"gitId":"danadi7"},"content":"                dateMatches \u003d ((Event) task).getAt().compareTo(eventDate) \u003d\u003d 0;"},{"lineNumber":169,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"danadi7"},"content":"            if (isEvent \u0026\u0026 descriptionMatches \u0026\u0026 dateMatches) {"},{"lineNumber":171,"author":{"gitId":"danadi7"},"content":"                return true;"},{"lineNumber":172,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"danadi7"},"content":"        return false;"},{"lineNumber":175,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":177,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"danadi7"},"content":"     * Detects if a new ToDo is a duplicate of a previous ToDo."},{"lineNumber":179,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":181,"author":{"gitId":"danadi7"},"content":"     * @param description Description associated with the new ToDo."},{"lineNumber":182,"author":{"gitId":"danadi7"},"content":"     * @return True if a duplicate ToDo is present, false otherwise."},{"lineNumber":183,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"danadi7"},"content":"    private boolean isDuplicateToDo(TaskManager tm, String description) {"},{"lineNumber":185,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e duplicatesList \u003d tm.findTasks(description);"},{"lineNumber":186,"author":{"gitId":"danadi7"},"content":"        if (duplicatesList.isEmpty()) {"},{"lineNumber":187,"author":{"gitId":"danadi7"},"content":"            return false;"},{"lineNumber":188,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"danadi7"},"content":"        for (Task task:duplicatesList) {"},{"lineNumber":190,"author":{"gitId":"danadi7"},"content":"            if (task.getDescription().equals(description) \u0026\u0026 task instanceof ToDo) {"},{"lineNumber":191,"author":{"gitId":"danadi7"},"content":"                System.out.println(\"here\");"},{"lineNumber":192,"author":{"gitId":"danadi7"},"content":"                return true;"},{"lineNumber":193,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"danadi7"},"content":"        return false;"},{"lineNumber":196,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":197}},{"path":"src/main/java/duke/logic/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" * Abstract class for the different Duke commands."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"public abstract class Command {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    protected String command;"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"     * Constructor for Commands."},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    public Command(String command) {"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"        this.command \u003d command;"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * Abstract method for executing user commands."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     * @return Response generated after command is executed."},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    public abstract String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"     * Returns the exit signal for Duke to terminate."},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"     * @return False for all Commands except ExitCommand."},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"    public boolean isExit() {"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        return false;"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"     * Updates the DB at the end of command execution."},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager used to manage tasks."},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving to disk."},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"    public void postCommandSave(TaskManager tm, Storage storage) {"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tm.getTaskList();"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"            storage.save(taskList);"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"            e.printStackTrace();"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":61}},{"path":"src/main/java/duke/logic/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":" * Handles \u0027delete\u0027 commands input by user."},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     * Constructor for DeleteCommand class"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    public DeleteCommand(String command) {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Extracts the index of the task to be deleted and deletes the appropriate Task from TaskManager."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     * @return Confirmation of task deleted."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        String[] commandDetails \u003d command.split(\" \", 2);"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"        // Handles empty delete command"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        if (commandDetails.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Delete Index not provided!\");"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        assert commandDetails.length \u003d\u003d 2;"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"            int delIndex \u003d Integer.parseInt(commandDetails[1]) - 1;"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"            Task delTask \u003d tm.getTask(delIndex);"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"            tm.deleteTask(delIndex);"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"            postCommandSave(tm, storage);"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"            return (\"Task deleted: \" + delTask);"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Index is not a number!\");"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":51}},{"path":"src/main/java/duke/logic/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":" * Handles \u0027done\u0027 command input by user."},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     * Constructor for DoneCommand class."},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    public DoneCommand(String command) {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Extracts the index of the task to be marked as done and marks the appropriate Task on TaskManager."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     * @return Confirmation of task marked as done."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        String[] commandDetails \u003d command.split(\" \", 2);"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"        // Handles empty done command"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        if (commandDetails.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Done Index not provided!\");"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        assert commandDetails.length \u003d\u003d 2;"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"            int doneIndex \u003d Integer.parseInt(commandDetails[1]) - 1;"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"            Task doneTask \u003d tm.getTask(doneIndex);"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"            tm.markTaskDone(doneIndex);"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"            postCommandSave(tm, storage);"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"            return (\"Task marked as done: \" + doneTask);"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Index is not a number!\");"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":51}},{"path":"src/main/java/duke/logic/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":" * Handles \u0027bye\u0027 command input by user."},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"     * Constructor for ExitCommand class."},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    public ExitCommand(String command) {"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"     * Saves the current Tasks to disk and shows exit message."},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @return Goodbye message."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"        String[] commandDetails \u003d command.split(\" \", 2);"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"        // Handles exit command with extra parameters"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        if (commandDetails.length !\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Exit command should not include extra parameters!\");"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        // Save current tasks to disk before exiting"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        postCommandSave(tm, storage);"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"        return ui.showGoodbye();"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"     * Overrides the abstract class to send exit signal to Duke."},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"     * @return Exit signal so Duke terminates after command is processed."},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"    public boolean isExit() {"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"        return true;"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":54}},{"path":"src/main/java/duke/logic/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":" * Handles \u0027find\u0027 command input by user."},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"public class FindCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     * Constructor for FindCommand class."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    public FindCommand(String command) {"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * Gets Tasks containing keyword from TaskManager."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     * @return Matching tasks if any, \u0027not found\u0027 message if none."},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If search term is not provided."},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        String[] commandDetails \u003d command.split(\" \", 2);"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        // Handles empty find command"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        if (commandDetails.length \u003d\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Search term not provided!\");"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"        assert commandDetails.length \u003d\u003d 2;"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        String searchTerm \u003d commandDetails[1];"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e mathingTasks \u003d tm.findTasks(searchTerm);"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"        if (mathingTasks.isEmpty()) {"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"            String s \u003d \"No matching tasks found!\";"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"            return s;"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"            String s \u003d \"I found the following matching tasks:\\n\";"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"            s \u003d s + ui.buildTaskList(mathingTasks);"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"            return s;"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":55}},{"path":"src/main/java/duke/logic/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic.commands;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.model.TaskManager;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":" * Handles \u0027list\u0027 command input by user."},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"public class ListCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     * Constructor for ListCommand class."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"     * @param command String input by user."},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    public ListCommand(String command) {"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"        super(command);"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * Loads Tasks in TaskManager and prints the entire list."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param tm TaskManager that handles tasks in memory."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     * @param ui User interface that interacts with the user."},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"     * @param storage Storage class that handles saving and loading from file."},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     * @return List of tasks if any, \u0027empty list\u0027 message if none."},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If command is not properly formatted."},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"    public String execute(TaskManager tm, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        String[] commandDetails \u003d command.split(\" \", 2);"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        // Handles list command with extra parameters"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        if (commandDetails.length !\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"List command should not include extra parameters!\");"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tm.getTaskList();"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"            String s \u003d \"List is empty!\";"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"            return s;"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"            return ui.buildTaskList(taskList);"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":51}},{"path":"src/main/java/duke/model/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":" * Manages the ArrayList of Tasks in memory."},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"public class TaskManager {"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     * Constructor for TaskManager class."},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     * Instantiates a new ArrayList on first run or if unable to load save file from disk."},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    public TaskManager() {"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"     * Constructor for TaskManager class."},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Handles loading of ArrayList of Tasks from save file."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param taskList ArrayList of Tasks generated by Storage object when loading from disk."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    public TaskManager(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     * Adds new Task to taskList."},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     * @param task Task to be added."},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"    public void addTask(Task task) {"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        taskList.add(task);"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     * Marks Task in taskList as done."},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     * @param index Index of Task to be marked as done."},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If Index is invalid or out of bounds."},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"    public void markTaskDone(int index) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"            Task completedTask \u003d taskList.get(index);"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"            completedTask.markAsDone();"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"            assert completedTask.isDone();"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Invalid index!\");"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"     * Deletes a Task from taskList."},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"     * @param index Index of Task to be deleted."},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If Index is invalid or out of bounds."},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"    public void deleteTask(int index) throws DukeException {"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"            Task toDeleteTask \u003d taskList.get(index);"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"            taskList.remove(toDeleteTask);"},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"            assert (taskList.contains(toDeleteTask) \u003d\u003d false);"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Invalid index!\");"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"     * Returns a Task from taskList."},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"     * @param index Index of Task to be retrieved."},{"lineNumber":77,"author":{"gitId":"danadi7"},"content":"     * @return Task at the given index."},{"lineNumber":78,"author":{"gitId":"danadi7"},"content":"     * @throws DukeException If Index is invalid or out of bounds."},{"lineNumber":79,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"danadi7"},"content":"    public Task getTask(int index) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"danadi7"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"danadi7"},"content":"            return taskList.get(index);"},{"lineNumber":83,"author":{"gitId":"danadi7"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"danadi7"},"content":"            throw new DukeException(\"Invalid index!\");"},{"lineNumber":85,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":88,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"danadi7"},"content":"     * Returns the entire ArrayList of Tasks in memory."},{"lineNumber":90,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"danadi7"},"content":"     * @return ArrayList of Tasks."},{"lineNumber":92,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"danadi7"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":94,"author":{"gitId":"danadi7"},"content":"        return taskList;"},{"lineNumber":95,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":97,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":98,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"danadi7"},"content":"     * Searches taskList for Task description containing keyword."},{"lineNumber":100,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"danadi7"},"content":"     * @param searchTerm Keyword to be searched."},{"lineNumber":102,"author":{"gitId":"danadi7"},"content":"     * @return ArrayList of Tasks containing keyword."},{"lineNumber":103,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"danadi7"},"content":"    public ArrayList\u003cTask\u003e findTasks(String searchTerm) {"},{"lineNumber":105,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":106,"author":{"gitId":"danadi7"},"content":"        for (Task task : taskList) {"},{"lineNumber":107,"author":{"gitId":"danadi7"},"content":"            if (task.getDescription().contains(searchTerm)) {"},{"lineNumber":108,"author":{"gitId":"danadi7"},"content":"                matchingTasks.add(task);"},{"lineNumber":109,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"danadi7"},"content":"        return matchingTasks;"},{"lineNumber":112,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":114,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"danadi7"},"content":"     * Returns number of Tasks currently in taskList."},{"lineNumber":116,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"danadi7"},"content":"     * @return Number of Tasks current in taskList."},{"lineNumber":118,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"danadi7"},"content":"    public int size() {"},{"lineNumber":120,"author":{"gitId":"danadi7"},"content":"        return taskList.size();"},{"lineNumber":121,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":122}},{"path":"src/main/java/duke/model/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":" * Class for Deadline type of Task."},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"     * Constructor for Deadline-type Tasks."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task input by user."},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     * @param by Date by which task must be completed."},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Constructor for Deadline-type tasks loaded from memory."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * @param isDone Current state of task."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param by Date by which task must be completed."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    public Deadline(String description, boolean isDone, LocalDate by) {"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"        super (description, isDone);"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"        this.by \u003d by;"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"        String formattedDate \u003d by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     * Generates String with relevant dat to save to disk."},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     * @return String that contains data to save."},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"    public String toDataString() {"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        return String.format(\"D|%s|%s|%s\", super.isDone, super.description, this.by);"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    public LocalDate getBy() {"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"        return by;"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":53}},{"path":"src/main/java/duke/model/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":" * Class for Event type of Task."},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"    protected LocalDate at;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"     * Constructor for Event-type Tasks."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"     * @param description Description of event input by user."},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"     * @param at Date on which event occurs."},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Constructor for Event-type tasks loaded from memory."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param description Description of event input by user."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     * @param isDone Current state of event."},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"     * @param at Date on which event occurs."},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    public Event(String description, boolean isDone, LocalDate at) {"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"        this.at \u003d at;"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"        String formattedDate \u003d at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     * Generates String with relevant dat to save to disk."},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     * @return String that contains data to save."},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"    public String toDataString() {"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        return String.format(\"E|%s|%s|%s\", super.isDone, super.description, this.at);"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"    public LocalDate getAt() {"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"        return at;"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":53}},{"path":"src/main/java/duke/model/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":" * Abstract class for the different types of Tasks."},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"     * Constructor for Tasks input by user."},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task input by user."},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"     * Constructor for Tasks loaded from memory."},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task."},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * @param isDone Current state of Ttsk."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     * Gets the relevant status icon depending on whether Task is done."},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     * @return Tick if Task is completed, and cross otherwise."},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"     * Marks a Task as compeleted."},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"    public void markAsDone() {"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        this.isDone \u003d true;"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"     * Returns whether Task is completed."},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"     * @return True if Task is completed, false otherwise."},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    public boolean isDone() {"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"        return this.isDone;"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"     * Returns description of Task."},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"     * @return Task description."},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"    public String getDescription() {"},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"        return this.description;"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"     * Abstract method to generate String with relevant dat to save to disk."},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"     * @return String that contains data to save."},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":"    public abstract String toDataString();"},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":76}},{"path":"src/main/java/duke/model/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model.task;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":" * Class for ToDo type of Task."},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"     * Constructor for ToDo-type Tasks."},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task input by user."},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     * Constructor for ToDo-type Tasks loaded from memory."},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"     * @param description Description of task."},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"     * @param isDone Current state of task."},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"        super(description, isDone);"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     * Generates String with relevant dat to save to disk."},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     * @return String that contains data to save."},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"    public String toDataString() {"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        return String.format(\"T|%s|%s\", super.isDone, super.description);"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":40}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Event;"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"import duke.model.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":" * Handles the saving and loading of tasks."},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    private String saveFilePath;"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Constructor for Storage class."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"     * @param saveFilePath Location of save file."},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    public Storage(String saveFilePath) {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"        this.saveFilePath \u003d saveFilePath;"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     * Saves the current ArrayList of tasks to disk."},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"     * @param taskList ArrayList of Tasks to save."},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"     * @throws IOException If unable to write save file."},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"    public void save(ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        File saveFile \u003d new File(saveFilePath);"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        if (!saveFile.exists()) {"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"            saveFile.getParentFile().mkdirs();"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"            saveFile.createNewFile();"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        FileWriter fw \u003d new FileWriter(saveFilePath);"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"        for (Task task : taskList) {"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"            fw.write(task.toDataString() + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        fw.close();"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"     * Loads saved tasks from disk."},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"     * @return ArrayList of Tasks."},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"     * @throws IOException If unable to access or find the save file."},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(saveFilePath));"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"        String line;"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"        while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"            String[] taskLine \u003d line.split(\"\\\\|\");"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"            switch (taskLine[0]) {"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"            case(\"T\"):"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":"                ToDo todo \u003d new ToDo(taskLine[2], Boolean.parseBoolean(taskLine[1]));"},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"                taskList.add(todo);"},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"            case(\"D\"):"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"                LocalDate deadlineDate \u003d LocalDate.parse(taskLine[3]);"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"                Deadline deadline \u003d new Deadline("},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"                        taskLine[2], Boolean.parseBoolean(taskLine[1]), deadlineDate);"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"                taskList.add(deadline);"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"            case(\"E\"):"},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":"                LocalDate eventDate \u003d LocalDate.parse(taskLine[3]);"},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"                Event event \u003d new Event(taskLine[2], Boolean.parseBoolean(taskLine[1]), eventDate);"},{"lineNumber":77,"author":{"gitId":"danadi7"},"content":"                taskList.add(event);"},{"lineNumber":78,"author":{"gitId":"danadi7"},"content":"                break;"},{"lineNumber":79,"author":{"gitId":"danadi7"},"content":"            default:"},{"lineNumber":80,"author":{"gitId":"danadi7"},"content":"                throw new DukeException(\"Error parsing save file.\");"},{"lineNumber":81,"author":{"gitId":"danadi7"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"danadi7"},"content":"        return taskList;"},{"lineNumber":84,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":85}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Task;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":" * Deals with user interactions."},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":" */"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"    static final String WELCOME \u003d \"Hello. I am Claude! What may I do for you today?\";"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"    static final String GOODBYE \u003d \"Goodbye! Hope to see you again soon!\";"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"    public Ui() {}"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"     * Prints welcome message."},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    public String showWelcome() {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        return WELCOME;"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"     * Prints goodbye message."},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"    public String showGoodbye() {"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"        return (GOODBYE);"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"     * Prints a given ArrayList of Tasks."},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"     * @param taskList ArrayList of Tasks to be printed."},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"    public String buildTaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"        String s \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"            s \u003d s + (i + 1) + \". \" + taskList.get(i) + \"\\n\";"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        return s;"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"     * Prints error message from failing to load save file."},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    public void showLoadingError() {"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"        System.out.println(\"Unable to load or find save file. \""},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"                + \"Save file is either not found or corrupted. \""},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"                + \"Initiating new instance.\");"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":50}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"            \u003cInsets /\u003e"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"danadi7":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\""},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"            maxWidth\u003d\"-Infinity\""},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"            minHeight\u003d\"-Infinity\""},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"            minWidth\u003d\"-Infinity\""},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"            prefHeight\u003d\"600.0\""},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":"            prefWidth\u003d\"400.0\""},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"            xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"            fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    \u003cchildren\u003e"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        \u003cTextField fx:id\u003d\"userInput\""},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"                   layoutY\u003d\"558.0\""},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"                   onAction\u003d\"#handleUserInput\""},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"                   prefHeight\u003d\"41.0\""},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"                   prefWidth\u003d\"324.0\""},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"        \u003cButton fx:id\u003d\"sendButton\""},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"                layoutX\u003d\"324.0\""},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"                layoutY\u003d\"558.0\""},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"                mnemonicParsing\u003d\"false\""},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"                onAction\u003d\"#handleUserInput\""},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"                prefHeight\u003d\"41.0\""},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"                prefWidth\u003d\"76.0\""},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"                text\u003d\"Send\" /\u003e"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\""},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"                    hbarPolicy\u003d\"NEVER\""},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"                    hvalue\u003d\"1.0\""},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"                    prefHeight\u003d\"557.0\""},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"                    prefWidth\u003d\"400.0\""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"                    vvalue\u003d\"1.0\"\u003e"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"            \u003ccontent\u003e"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\""},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"                      prefHeight\u003d\"552.0\""},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"                      prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"            \u003c/content\u003e"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    \u003c/children\u003e"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"danadi7":46}},{"path":"src/test/java/duke/logic/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.logic;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"import duke.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"public class CommandParserTest {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    public void parse_exitCommand() throws DukeException {"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"        String commandString \u003d \"bye\";"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        Command c \u003d CommandParser.parse(commandString);"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"        assertTrue(c instanceof ExitCommand);"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    public void parse_listCommand() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":"        String commandString \u003d \"list\";"},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"        Command c \u003d CommandParser.parse(commandString);"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"        assertTrue(c instanceof ListCommand);"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"    public void parse_doneCommand() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"        String commandString \u003d \"done 1\";"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"        Command c \u003d CommandParser.parse(commandString);"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":"        assertTrue(c instanceof DoneCommand);"},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"    public void parse_deleteCommand() throws DukeException {"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        String commandString \u003d \"delete 1\";"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        Command c \u003d CommandParser.parse(commandString);"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"        assertTrue(c instanceof DeleteCommand);"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"    public void parse_addCommand() throws DukeException {"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        String commandString1 \u003d \"deadline foo\";"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        Command c1 \u003d CommandParser.parse(commandString1);"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        assertTrue(c1 instanceof AddCommand);"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"        String commandString2 \u003d \"event foo\";"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"        Command c2 \u003d CommandParser.parse(commandString1);"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":"        assertTrue(c2 instanceof AddCommand);"},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"        String commandString3 \u003d \"todo foo\";"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"        Command c3 \u003d CommandParser.parse(commandString1);"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"        assertTrue(c3 instanceof AddCommand);"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":59}},{"path":"src/test/java/duke/model/TaskManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":11,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"danadi7"},"content":"import duke.model.task.Event;"},{"lineNumber":13,"author":{"gitId":"danadi7"},"content":"import duke.model.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":15,"author":{"gitId":"danadi7"},"content":"public class TaskManagerTest {"},{"lineNumber":16,"author":{"gitId":"danadi7"},"content":"    private TaskManager tm \u003d new TaskManager();"},{"lineNumber":17,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":18,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"danadi7"},"content":"    public void addTask_newDeadline() {"},{"lineNumber":20,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":21,"author":{"gitId":"danadi7"},"content":"        LocalDate dlDate \u003d LocalDate.parse(\"2020-09-01\");"},{"lineNumber":22,"author":{"gitId":"danadi7"},"content":"        Deadline deadline \u003d new Deadline(\"Test\", dlDate);"},{"lineNumber":23,"author":{"gitId":"danadi7"},"content":"        tm.addTask(deadline);"},{"lineNumber":24,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":25,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":27,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"danadi7"},"content":"    public void addTask_newEvent() {"},{"lineNumber":29,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":30,"author":{"gitId":"danadi7"},"content":"        LocalDate eventDate \u003d LocalDate.parse(\"2020-09-01\");"},{"lineNumber":31,"author":{"gitId":"danadi7"},"content":"        Event event \u003d new Event(\"Test\", eventDate);"},{"lineNumber":32,"author":{"gitId":"danadi7"},"content":"        tm.addTask(event);"},{"lineNumber":33,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":34,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":36,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"danadi7"},"content":"    public void addTask_newTodo() {"},{"lineNumber":38,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":39,"author":{"gitId":"danadi7"},"content":"        ToDo todo \u003d new ToDo(\"Test\");"},{"lineNumber":40,"author":{"gitId":"danadi7"},"content":"        tm.addTask(todo);"},{"lineNumber":41,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":42,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":44,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"danadi7"},"content":"    public void markTaskDone_validIndex() throws DukeException {"},{"lineNumber":46,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":47,"author":{"gitId":"danadi7"},"content":"        ToDo todo \u003d new ToDo(\"Test\");"},{"lineNumber":48,"author":{"gitId":"danadi7"},"content":"        tm.addTask(todo);"},{"lineNumber":49,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":50,"author":{"gitId":"danadi7"},"content":"        tm.markTaskDone(0);"},{"lineNumber":51,"author":{"gitId":"danadi7"},"content":"        assertEquals(true, tm.getTask(0).isDone());"},{"lineNumber":52,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":54,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"danadi7"},"content":"    public void markTaskDone_invalidIndex_exceptionThrown() {"},{"lineNumber":56,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":57,"author":{"gitId":"danadi7"},"content":"        ToDo todo \u003d new ToDo(\"Test\");"},{"lineNumber":58,"author":{"gitId":"danadi7"},"content":"        tm.addTask(todo);"},{"lineNumber":59,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":60,"author":{"gitId":"danadi7"},"content":"        Exception exception1 \u003d assertThrows(DukeException.class, () -\u003e tm.markTaskDone(1));"},{"lineNumber":61,"author":{"gitId":"danadi7"},"content":"        Exception exception2 \u003d assertThrows(DukeException.class, () -\u003e tm.markTaskDone(-1));"},{"lineNumber":62,"author":{"gitId":"danadi7"},"content":"        assertEquals(exception1.getMessage(), \"Invalid index!\");"},{"lineNumber":63,"author":{"gitId":"danadi7"},"content":"        assertEquals(exception2.getMessage(), \"Invalid index!\");"},{"lineNumber":64,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":66,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"danadi7"},"content":"    public void deleteTask_validIndex() throws DukeException {"},{"lineNumber":68,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":69,"author":{"gitId":"danadi7"},"content":"        ToDo todo \u003d new ToDo(\"Test\");"},{"lineNumber":70,"author":{"gitId":"danadi7"},"content":"        tm.addTask(todo);"},{"lineNumber":71,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":72,"author":{"gitId":"danadi7"},"content":"        tm.deleteTask(0);"},{"lineNumber":73,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":74,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":76,"author":{"gitId":"danadi7"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"danadi7"},"content":"    public void deleteTask_invalidIndex_exceptionThrown() {"},{"lineNumber":78,"author":{"gitId":"danadi7"},"content":"        assertEquals(0, tm.getTaskList().size());"},{"lineNumber":79,"author":{"gitId":"danadi7"},"content":"        ToDo todo \u003d new ToDo(\"Test\");"},{"lineNumber":80,"author":{"gitId":"danadi7"},"content":"        tm.addTask(todo);"},{"lineNumber":81,"author":{"gitId":"danadi7"},"content":"        assertEquals(1, tm.getTaskList().size());"},{"lineNumber":82,"author":{"gitId":"danadi7"},"content":"        Exception exception1 \u003d assertThrows(DukeException.class, () -\u003e tm.deleteTask(1));"},{"lineNumber":83,"author":{"gitId":"danadi7"},"content":"        Exception exception2 \u003d assertThrows(DukeException.class, () -\u003e tm.deleteTask(-1));"},{"lineNumber":84,"author":{"gitId":"danadi7"},"content":"        assertEquals(exception1.getMessage(), \"Invalid index!\");"},{"lineNumber":85,"author":{"gitId":"danadi7"},"content":"        assertEquals(exception2.getMessage(), \"Invalid index!\");"},{"lineNumber":86,"author":{"gitId":"danadi7"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":88,"author":{"gitId":"danadi7"},"content":""},{"lineNumber":89,"author":{"gitId":"danadi7"},"content":"}"}],"authorContributionMap":{"danadi7":89}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danadi7"},"content":"todo eat"},{"lineNumber":2,"author":{"gitId":"danadi7"},"content":"event drink /at 5pm"},{"lineNumber":3,"author":{"gitId":"danadi7"},"content":"deadline sleep /by 9pm"},{"lineNumber":4,"author":{"gitId":"danadi7"},"content":"list"},{"lineNumber":5,"author":{"gitId":"danadi7"},"content":"done 3"},{"lineNumber":6,"author":{"gitId":"danadi7"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"danadi7"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"danadi7"},"content":"list"},{"lineNumber":9,"author":{"gitId":"danadi7"},"content":"bye"}],"authorContributionMap":{"danadi7":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"danadi7"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"danadi7":1,"-":20}}]
