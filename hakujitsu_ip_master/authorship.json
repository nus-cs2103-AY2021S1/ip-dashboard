[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Circle circle \u003d new Circle(displayPicture.getFitWidth() / 2, displayPicture.getFitHeight() / 2,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                displayPicture.getFitWidth() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        displayPicture.setClip(circle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 65
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DateParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Duke is the class encapsulating all application processes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Initialises Duke class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws DateParseException if Task created from file information cannot be stored in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if Task date (if any) cannot be parsed into LocalDate object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Duke() throws DateParseException, StorageException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskList \u003d TaskList.initialiseTaskList(this.storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Launches and runs the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param args Standard arguments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            TaskList taskList \u003d TaskList.initialiseTaskList(storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            boolean isExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    String userCommand \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    Command parsedCommand \u003d CommandParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    parsedCommand.execute(taskList, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    isExit \u003d parsedCommand.isExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    Ui.printErrorMessage(e.getUiMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Ui.printErrorMessage(e.getUiMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String sendWelcomeMessage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            String userCommand \u003d input;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Command parsedCommand \u003d CommandParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return parsedCommand.execute(taskList, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Ui.printErrorMessage(e.getUiMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 72,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DateParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // TODO: handle exceptions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.duke \u003d new Duke();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DateParseException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.setTitle(\"Nekobot\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            scene.getStylesheets().add(\"stylesheets/stylesheet.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 50
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/nekobot.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                DialogBox.getDukeDialog(duke.sendWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (!input.equals(\"\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 57
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Storage is a class that handles the interactions between the application and local storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private final String filePath \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private File storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.storage \u003d new File(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Reads the lines of text in local storage and compiles them into an ArrayList of strings."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return An ArrayList containing String representations of all the Tasks in local storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if the storage cannot be accessed or read."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ArrayList\u003cString\u003e readTaskStorage() throws StorageException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ArrayList\u003cString\u003e existingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (this.storage.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                // Load into taskList if file is not empty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                Scanner s \u003d new Scanner(this.storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (this.storage.length() !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    while (s.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                        existingTasks.add(s.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                this.storage.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                this.storage.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (!this.storage.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new StorageException(\"Oh noes! I can\u0027t seem to find the tasks you saved previously ;A;\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return existingTasks;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Appends a string representation of a Task to local storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskString The String representation of a Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if the storage cannot be accessed or read."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void appendTaskStorage(String taskString) throws StorageException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            FileWriter appender \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            appender.write(taskString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            appender.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new StorageException(\"Oh noes! I can\u0027t seem to save this task ;A;\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Writes the string representations of all Tasks to local storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskString The String representation of all tasks in the TaskList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if the storage cannot be accessed or read."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void writeTaskStorage(String taskString) throws StorageException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            FileWriter rewriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            rewriter.write(taskString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            rewriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new StorageException(\"Oh noes! I can\u0027t seem to modify the tasks you saved previously ;A;\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 84
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Ui is a class that prints messages to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a welcome message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string containing a welcome message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printWelcomeMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String introduction \u003d \"Hello! I\u0027m NEKOBOT!!\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String question \u003d \"What can I do for you :\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return introduction + question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a goodbye message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string containing a goodbye message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printGoodbyeMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"Bye~ Hope to see you again soon ;w;\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints all tasks in the TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskList An ArrayList containing all existing Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string containing all tasks in the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printListMessage(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String preface \u003d \"Here are the tasks in your list!!\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            tasks.append(index).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return preface + tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints all tasks whose date is set as the current date (today)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskList An ArrayList containing all existing Tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string containing all tasks whose date is set as the current date (today)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printTodayMessage(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        // TODO: refactor to filter in duke.task.TaskList class"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String preface \u003d \"Here are today\u0027s tasks!!\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (task.isToday()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                tasks.append(index).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return preface + tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints all tasks that match the search term provided."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskList An ArrayList containing all Tasks that match the search term provided."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string containing all tasks that match the search term provided."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printFindMessage(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return \"Oh dear, I couldn\u0027t find any matching tasks :o\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            String preface \u003d \"Here are your search results!!\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            StringBuilder tasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            for (Task task: taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                tasks.append(index).append(\". \").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return preface + tasks;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a message indicating the specified task has been added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param task The Task that has been added."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param size An integer value representing the new size of the TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string confirming the addition of a specified task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printAddTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String preface \u003d \"Okies! I\u0027ve added this task~\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String taskString \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String currentSize \u003d \"Now you have \" + size + \" tasks in the list uwu\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return preface + taskString + currentSize;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a message indicating the specified task has been marked completed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param task The Task that has been marked completed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string confirming that the specified task has been marked completed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printDoneTaskMessage(Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String preface \u003d \"Yay! I\u0027ve marked this task as done :3\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String taskString \u003d task.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return preface + taskString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a message indicating the specified task has been deleted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param task The Task that has been deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param size An integer value representing the new size of the TaskList."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string confirming that the specified task has been deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printDeleteTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String preface \u003d \"Got it! I\u0027ll remove this task :\u003e\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String taskString \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String currentSize \u003d \"Only \" + size + \" tasks left!!\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return preface + taskString + currentSize;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints out the error message of the exception that occurred."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param uiMessage The error message of the exception that occurred."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string that explains the exception that occurred."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static String printErrorMessage(String uiMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return uiMessage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 129
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to add a Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private LocalDate taskDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a AddTaskCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param type A TaskType object representing the type of Task to be created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A String representing the Task name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public AddTaskCommand(TaskType type, String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskName \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a AddTaskCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param type A TaskType object representing the type of Task to be created."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A String representing the Task name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the Task date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public AddTaskCommand(TaskType type, String name, LocalDate date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskName \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskDate \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Executes the AddTaskCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The Task is first created and added the TaskList, before being stored in local storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Then, a message is printed to indicate the Task was successfully created."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if Task cannot be stored in local storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if details provided of Task to be created are invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) throws StorageException, InvalidTaskException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Task newTodo \u003d list.addTask(this.taskName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            storage.appendTaskStorage(newTodo.toSaveString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Ui.printAddTaskMessage(newTodo, list.taskListSize());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Task newTask \u003d list.addTask(this.type, this.taskName, this.taskDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            storage.appendTaskStorage(newTask.toSaveString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return Ui.printAddTaskMessage(newTask, list.taskListSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh dear! I\u0027m not sure what kind of task to add ;A;\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 68
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Executes the actions stipulated by the command given by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws DukeException if any specific exceptions occur when executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public abstract String execute(TaskList list, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets whether the command represents an ExitCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This will be overridden in the ExitCommand subclass."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This is the default implementation for all other subclasses."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return false (default implementation)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 28
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DateParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.IncompleteTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidSearchException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * CommandParser is a class that parses input from the user, and returns a relevant command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Processes String value commands given by the user and returns the relevant command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param command A String value which is the user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A Command corresponding to user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws UnknownCommandException if the Command type cannot be determined from user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws DateParseException if the user input contains a date object that cannot be parsed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws IncompleteTaskException if user input contains incorrect or insufficient information for task creation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if task index provided by user is invalid or missing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Command parseCommand(String command) throws UnknownCommandException, DateParseException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            IncompleteTaskException, InvalidTaskException, InvalidSearchException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (command.equals(\"today\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new TodayCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (command.length() \u003e\u003d 4 \u0026\u0026 command.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return parseFindCommand(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (command.length() \u003e\u003d 4 \u0026\u0026 command.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return parseDoneCommand(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (command.length() \u003e\u003d 6 \u0026\u0026 command.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return parseDeleteCommand(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else if (validAddTaskCommand(command)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return parseAddTaskCommand(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new UnknownCommandException(\"Oh noes! I\u0027m not sure what that means ;A;\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Checks if the user input string constitutes a valid command to add a task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param command A String value which is the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A boolean value that indicates whether the user input string constitutes a valid command to add a task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static boolean validAddTaskCommand(String command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return command.split(\" \")[0].equals(\"todo\") || command.split(\" \")[0].equals(\"deadline\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                || command.split(\" \")[0].equals(\"event\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static FindCommand parseFindCommand(String command) throws InvalidSearchException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (command.length() \u003c 5) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidSearchException(\"Oh noes! I don\u0027t think you specified a search string :\u003c\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        String matchString \u003d command.substring(5);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new FindCommand(matchString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses user input to create a DoneCommand."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param command A String value which is the user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A DoneCommand that when executed, marks a specified task as completed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if task index provided by user is invalid or missing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static DoneCommand parseDoneCommand(String command) throws InvalidTaskException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (command.length() \u003c 5) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            int index \u003d Integer.parseInt(command.substring(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses user input to create a DeleteCommand."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param command A String value which is the user input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A DeleteCommand that when executed, deletes a specified task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if task index provided by user is invalid or missing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static DeleteCommand parseDeleteCommand(String command) throws InvalidTaskException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (command.length() \u003c 7) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            int index \u003d Integer.parseInt(command.substring(7));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Parses user input to create a AddTaskCommand."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param command A String value which is the user input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A AddTaskCommand that when executed, adds a Task with the specified details."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws IncompleteTaskException if user input contains incorrect or insufficient information for task creation."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws UnknownCommandException if the Task type cannot be determined from user input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws DateParseException if the user input contains a date object that cannot be parsed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private static AddTaskCommand parseAddTaskCommand(String command) throws IncompleteTaskException,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            UnknownCommandException, DateParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            String typeOfTask \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            switch (typeOfTask) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (command.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    throw new IncompleteTaskException(\"Oh dear! Your task description seems to be incomplete :\u003c\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                return new AddTaskCommand(TaskType.TODO, command.substring(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (!command.contains(\"/at\") || (command.indexOf(\"event \") + 6 \u003e command.indexOf(\" /at\"))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    throw new IncompleteTaskException(\"Oh dear! Your task description seems to be incomplete :\u003c\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String eventName \u003d command.substring(command.indexOf(\"event \") + 6, command.indexOf(\" /at\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String eventDate \u003d command.substring(command.indexOf(\"/at \") + 4);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                return new AddTaskCommand(TaskType.EVENT, eventName, LocalDate.parse(eventDate));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                if (!command.contains(\"/by\") || (command.indexOf(\"deadline \") + 9 \u003e command.indexOf(\" /by\"))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    throw new IncompleteTaskException(\"Oh dear! Your task description seems to be incomplete :\u003c\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String deadlineName \u003d command.substring(command.indexOf(\"deadline \") + 9, command.indexOf(\" /by\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String deadlineDate \u003d command.substring(command.indexOf(\"/by \") + 4);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                return new AddTaskCommand(TaskType.DEADLINE, deadlineName, LocalDate.parse(deadlineDate));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                throw new UnknownCommandException(\"Oh noes! I\u0027m not sure what that means ;A;\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new DateParseException(\"Oops! Please make sure your date is of YYYY-MM-DD format ;A;\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 142
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to remove a Task from the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param index An integer value representing the index of the Task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Executes the DeleteCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * First, the Task specified is removed, and the updated TaskList is written to local storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Lastly, a message is printed to indicate that the task has been removed successfully."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if details provided of Task to be removed are invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if the Tasks cannot be written to local storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) throws InvalidTaskException, StorageException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task deletedTask \u003d list.deleteTask(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        storage.writeTaskStorage(list.getSaveString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printDeleteTaskMessage(deletedTask, list.taskListSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 39
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to mark a Task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a DoneCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskIndex An integer value representing the index of the Task to be marked completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Executes the DoneCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * First, the Task specified is marked as done, and the updated TaskList is written to local storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Lastly, a message is printed to indicate that the task has been marked as completed successfully."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if details provided of Task to be marked done are invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if the Tasks cannot be written to local storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) throws InvalidTaskException, StorageException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task doneTask \u003d list.completeTask(this.taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        storage.writeTaskStorage(list.getSaveString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printDoneTaskMessage(doneTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to exit and close the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints a goodbye message and exits the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets whether the Command is to exit the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 29
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private String matchString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public FindCommand(String matchString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.matchString \u003d matchString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printFindMessage(list.findTasks(this.matchString));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 17
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to list all Tasks in the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints all lists in the TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printListMessage(list.getTaskList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 20
    }
  },
  {
    "path": "src/main/java/duke/command/TodayCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Command given by the user to list all Tasks whose date is the current date (today)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class TodayCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Prints all lists in the TaskList, whose date is the current date (today)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param list A TaskList containing the user\u0027s Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String execute(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return Ui.printTodayMessage(list.getTaskList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/DateParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DateParseException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DateParseException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents Exceptions that can occur from the {@link duke} package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private String uiMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Initialises a new DukeException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param errorMessage A string that describes the error, to be displayed to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.uiMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the error message to be displayed to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string that describes the error, to be displayed to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getUiMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.uiMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/IncompleteTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class IncompleteTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public IncompleteTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidSearchException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class InvalidSearchException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public InvalidSearchException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public InvalidTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class StorageException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public StorageException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public UnknownCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the deadline has been completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected Deadline(String name, boolean isCompleted, LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(name, isCompleted);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a new Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The completion status is false by default."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the new deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the new deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The new deadline created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Deadline newDeadline(String name, LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Deadline(name, false, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Deadline using information in storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The deadline created is an already previously existing deadline with its details recorded in storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Usually called when starting up the application, to populate the TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the existing deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the deadline has been completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the existing deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The existing deadline created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Deadline existingDeadline(String name, boolean isCompleted, LocalDate date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Deadline(name, isCompleted, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets whether the deadline date is set as today."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The boolean value representing whether the deadline is today."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the deadline object for printing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the deadline name, date, as well as the type (Deadline)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the deadline for printing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + \", \" + date.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()) + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the deadline object to be saved in storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the deadline name, date, as well as the type (Deadline)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The different fields are separated by a \"|\" character."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Completion status is represented by a 1 or 0."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the deadline object to be saved in storage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"D\" + \" | \" + super.toSaveString() + \" | \" + this.date + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents an Event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates an Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the event has been completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected Event(String name, boolean isCompleted, LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(name, isCompleted);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a new Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The completion status is false by default."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the new event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the new event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The new event created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Event newEvent(String name, LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Event(name, false, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates an event using information in storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The event created is an already previously existing event with its details recorded in storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Usually called when starting up the application, to populate the TaskList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the existing event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the event has been completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param date A LocalDate representing the date of the existing event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The existing event created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Event existingEvent(String name, boolean isCompleted, LocalDate date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Event(name, isCompleted, date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets whether the event date is set as today."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The boolean value representing whether the event is today."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.date.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the event object for printing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the event name, date, as well as the type (Event)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the event for printing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \", \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                + date.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()) + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the event object to be saved in storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the event name, date, as well as the type (Event)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The different fields are separated by a \"|\" character."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Completion status is represented by a 1 or 0."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the event object to be saved in storage."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"E\" + \" | \" + super.toSaveString() + \" | \" + this.date + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the task has been completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected Task(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskName \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a new Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The completion status is false by default."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the new task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The new task created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Task newTask(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Task(name, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Task using information in storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The Task created is an already previously existing task with its details recorded in storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Usually called when starting up the application, to populate the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the existing task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the task has been completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The existing task created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Task existingTask(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Task(name, isCompleted);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the name of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representing the name of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the completion status of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A boolean value representing whether the task has been completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean getIsCompleted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Sets the completion status of the task as true."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The task that was marked as completed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the symbol that represents the completion status of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The symbol that represents the completion status of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return (isCompleted ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets whether the task date is set as today."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This will be overridden in subclasses that contain a Date field."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This is the default implementation for subclasses that do not contain such a field."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return false (default implementation)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the task object for printing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the task name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the task for printing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.taskName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the task object to be saved in storage."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the task name."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Completion status is represented by a 1 or 0."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The different fields are separated by a \"|\" character."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the task object to be saved in storage."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return (this.isCompleted ? \"1\" : \"0\") + \" | \" + this.taskName;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 104
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DateParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.StorageException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a list of Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    private TaskList(Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates and initialises a TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The TaskList is initialised by adding tasks stored in the local storage from previous sessions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param storage A Storage object that handles the storage of tasks in local storage, allowing them to persist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The new TaskList created, filled with existing Tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws StorageException if Task cannot be stored in local storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws DateParseException if Task date (if any) cannot be parsed into LocalDate object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static TaskList initialiseTaskList(Storage storage) throws StorageException, DateParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        TaskList newTaskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            storage.readTaskStorage().forEach(taskString -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                String[] t \u003d taskString.split(\" [|] \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                // Tasks are stored in the format: type | isCompleted | taskName | date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                switch (t[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    newTaskList.taskList.add(Todo.existingTodo(t[2], t[1].equals(\"1\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    newTaskList.taskList.add(Deadline.existingDeadline(t[2], t[1].equals(\"1\"), LocalDate.parse(t[3])));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    newTaskList.taskList.add(Event.existingEvent(t[2], t[1].equals(\"1\"), LocalDate.parse(t[3])));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new DateParseException(\"Oops! Please make sure your date is of YYYY-MM-DD format ;A;\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return newTaskList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds a task of type Todo to the TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskName A string representing the name of the todo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The todo added to the TaskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Task addTask(String taskName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Todo newTodo \u003d Todo.newTodo(taskName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskList.add(newTodo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return newTodo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Adds a task of type Deadline or Event to the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param type A TaskType representing the type of Task to be added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskName A string representing the name of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param taskDate A string representing the date of the task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The task added to the TaskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if task type is neither Deadline nor Event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Task addTask(TaskType type, String taskName, LocalDate taskDate) throws InvalidTaskException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Event newEvent \u003d Event.newEvent(taskName, taskDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.taskList.add(newEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return newEvent;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            Deadline newDeadline \u003d Deadline.newDeadline(taskName, taskDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            this.taskList.add(newDeadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            return newDeadline;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh dear! I\u0027m not sure what kind of task to add ;A;\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Marks Task as completed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param index An integer representing the index of the task in the TaskList."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The task marked as completed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if index specified is invalid (does not refer to a task in the TaskList)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Task completeTask(int index) throws InvalidTaskException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (index \u003e this.taskList.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Removes a Task from the TaskList."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param index An integer representing the index of the task in the TaskList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The removed task."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @throws InvalidTaskException if index specified is invalid (does not refer to a task in the TaskList)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public Task deleteTask(int index) throws InvalidTaskException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        if (index \u003e this.taskList.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            throw new InvalidTaskException(\"Oh noes! I don\u0027t think you specified a valid task index :\u003c\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task task \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Finds tasks that match the search term"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param matchString A string representing the search term"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return An ArrayList containing all Tasks that match the search term provided"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String matchString) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        ArrayList\u003cTask\u003e filteredList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            if (task.getTaskName().contains(matchString)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                filteredList.add(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the list of Tasks."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return An ArrayList containing all Task in the TaskList."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return An integer value representing the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets a String containing values of all Tasks in the TaskList."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This String is to be stored in local storage, allowing tasks to persist between sessions."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A String containing values of all Tasks in the TaskList."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        StringBuilder saveString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            saveString.append(task.toSaveString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return (saveString.toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 169
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents the different types of Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    TODO, EVENT, DEADLINE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 8
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " * Represents a Todo object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the todo has been completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    protected Todo(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        super(name, isCompleted);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a new Todo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The completion status is false by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the new todo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The new todo created."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Todo newTodo(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Todo(name, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Creates a Todo using information in storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The todo created is an already previously existing todo with its details recorded in storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Usually called when starting up the application, to populate the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param name A string representing the name of the existing todo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @param isCompleted A boolean value representing whether the todo has been completed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return The existing todo created."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public static Todo existingTodo(String name, boolean isCompleted) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return new Todo(name, isCompleted);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the todo object for printing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the todo name, as well as the type (Todo)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the todo for printing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Gets the string representation of the todo object to be saved in storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * This contains the completion status and the todo name, as well as the type (Todo)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * The different fields are separated by a \"|\" character."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * Completion status is represented by a 1 or 0."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     * @return A string representation of the todo object to be saved in storage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        return \"T\" + \" | \" + super.toSaveString() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 57
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Hello, I\u0027m NEKOBOT!!\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u003cVBox fx:id\u003d\"backgroundContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                    \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 21
    }
  },
  {
    "path": "src/test/java/duke/command/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DateParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.IncompleteTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_addTaskCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"todo exercise\") instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_incompleteTodoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"todo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof IncompleteTaskException);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_validEventCreated() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"event meeting /at 2020-08-30\") instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_incompleteEventDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"event meeting\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof IncompleteTaskException);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_invalidEventDate_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"event meeting /at 2020-8-9\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof DateParseException);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_validDeadlineCreated() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"deadline homework /by 2020-09-23\") instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_incompleteDeadlineDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"deadline homework\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof IncompleteTaskException);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_invalidDeadlineDate_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"deadline meeting /by 2020-8-9\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof DateParseException);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_deleteCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"delete 3\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_missingtaskIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"delete\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof InvalidTaskException);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_doneCommand() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"done 3\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_invalidtaskIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"done a\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof InvalidTaskException);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_todayCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"today\") instanceof TodayCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_listCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_exitCommand() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(parser.parseCommand(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            fail(\"Exception should not be thrown\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void parseCommand_invalidComand_exceptionThrown() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            parser.parseCommand(\"lorem ipsum\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "            assertTrue(e instanceof UnknownCommandException);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 174
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void newTask_newTaskCreated() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task newTask \u003d Task.newTask(\"Exercise\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(newTask.getTaskName(), \"Exercise\", \"Task name is incorrect\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(newTask.getIsCompleted(), false, \"Task completion status is incorrect\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void existingTask_existingTaskCreated() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task existingTask \u003d Task.existingTask(\"Sleep\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(existingTask.getTaskName(), \"Sleep\", \"Task name is incorrect\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(existingTask.getIsCompleted(), true, \"Task completion status is incorrect\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    public void markAsDone_taskIsCompleted() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        Task newTask \u003d Task.newTask(\"Homework\").markAsDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "        assertEquals(newTask.getIsCompleted(), true,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "                \"Task completion status is incorrect after marking as done\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 28
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "T | 1 | homework"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "hewwo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "todo exercise"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "deadline /by 2019-08-10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "deadline finish nekobot /by today"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "deadline finish nekobot /by 2019-08-20"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "event /at 2020-09-10"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "event sleep /at tonight"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "event sleep /at 2020-08-17"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "delete 9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/*/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "# Reset data/tasks.txt file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": "printf \"T | 1 | homework\\n\" \u003e data/tasks.txt"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakujitsu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "hakujitsu": 7,
      "-": 36
    }
  }
]
