[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.DukeController;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Main class to run Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Runs the duke program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param args null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        DukeController controller \u003d new DukeController();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        controller.run();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/DukeController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Manages the duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DukeController {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the duke controller."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public DukeController() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.tasks \u003d new TaskList(storage.getTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Runs the duke program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui.greetings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                ui.printMsg(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 45
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the addition of tasks into the Task List."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String taskDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the add command with the task details."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskDetails Task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected AddCommand(String taskDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskDetails \u003d taskDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the task details of this complex task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected String getTaskDetails() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds the new task into the Task List."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected void addTask(Task newTask, TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui.addTask(newTask, tasks.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 46
    }
  },
  {
    "path": "src/main/java/duke/command/AddComplexTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds a complex task into the task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddComplexTaskCommand extends AddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the AddComplexTaskCommand object with the task details and task type."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskDetails Task details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddComplexTaskCommand(String taskDetails, TaskType taskType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(taskDetails);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String identifier() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \" /by\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \" /at\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a complex task into the TaskList Object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If input format is wrong."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d getTaskDetails().split(identifier(), 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (taskType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidEventException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        checkIfEmpty(inputArr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String date \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask ct;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (isDateAndTimeFormat(date.replace(\" \", \"T\"))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ct \u003d new ComplexTask(inputArr[0], dateAndTimeToString(date), taskType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isDateFormat(date)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ct \u003d new ComplexTask(inputArr[0], dateToString(date), taskType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (isTimeFormat(date)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ct \u003d new ComplexTask(inputArr[0], timeToString(date), taskType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ct \u003d new ComplexTask(inputArr[0], date, taskType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        addTask(ct, tasks, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void checkIfEmpty(String[] inputArr) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description \u003d inputArr[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String time \u003d inputArr[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTaskException(taskType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (time.isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTimeException(taskType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String dateToString(String date) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDate.parse(date).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String dateAndTimeToString(String dateAndTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalDateTime"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .parse(dateAndTime.replace(\" \", \"T\"))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"MMM d yyyy / h.mm a\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String timeToString(String time) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return LocalTime.parse(time).format(DateTimeFormatter.ofPattern(\"h.mm a\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDateFormat(String input) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDate.parse(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDateAndTimeFormat(String input) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalDateTime.parse(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isTimeFormat(String input) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            LocalTime.parse(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 128
    }
  },
  {
    "path": "src/main/java/duke/command/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Adds a todo task into the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class AddToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public AddToDoCommand(String taskDetails) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(taskDetails);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a todo task into the TaskList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyTaskException If the task detail is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (getTaskDetails().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyTaskException(TaskType.TODO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            addTask(new ToDo(getTaskDetails()), tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles all possible actions of the program, as given by the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Executes a specific command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If an error is found in the execution of command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a boolean to which whether the program can stop."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return False as the default value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Exits the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Terminates the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui.goodBye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true to terminate the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.EmptyFindException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Executes the finding of matching word in the task descriptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the FindCommand class to look for the matching word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all matching tasks based on the given user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws EmptyFindException If no task matches the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyFindException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new EmptyFindException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            TaskList taskList \u003d tasks.matchAll(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                ui.emptyFind(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                ui.showTaskList(taskList, \"matching\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Shows all tasks in the TaskList object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Shows all tasks in the TaskList object iff task list is not empty."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.emptyTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.showTaskList(tasks, \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDeleteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidDoneException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidTaskNumberException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.TaskAlreadyDoneException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Abstracts the logic of deleting and completing a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class SimpleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final SimpleCommandType type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the SimpleCommand class with the input string and SimpleCommandType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param type SimpleCommandType."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public SimpleCommand(String input, SimpleCommandType type) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes or complete a task, depending on the task type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task List object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User Interface object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If an error is found in the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (checkIfNumber(input)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            int digit \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (tasks.checkIfValid(digit)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                Task current \u003d tasks.get(digit - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                if (type \u003d\u003d SimpleCommandType.DONE) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    if (current.isDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                        throw new TaskAlreadyDoneException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                        current.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                        ui.markTaskAsDone(current);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    tasks.delete(digit - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    ui.deleteTask(current, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidTaskNumberException(tasks.size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (type \u003d\u003d SimpleCommandType.DONE) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDoneException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidDeleteException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean checkIfNumber(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 77
    }
  },
  {
    "path": "src/main/java/duke/command/SimpleCommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Represents the 2 simple commands, delete and done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum SimpleCommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DONE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parent exception class for this program, which is thrown when there is an error in the user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the DukeException object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param msg Message to be displayed when exception is thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected DukeException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"☹OOPS!!! %s\", msg));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyFindException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"The description of a find cannot be empty!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task detail of a Task object is empty."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyTaskException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param complexTask Complex Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyTaskException(TaskType complexTask) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"The description of a %s cannot be empty.\", complexTask.toString().toLowerCase()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the Complex Task does not have its time specified."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the EmptyTimeException object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param complexTask Complex Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public EmptyTimeException(TaskType complexTask) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Deadline / time of %s is not specified\", complexTask.toString().toLowerCase()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create a Deadline task is not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDeadlineException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDeadlineException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Deadline task is poorly formatted.\\n    Here is a proper format: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"deadline \u0027task name\u0027 /by \u0027end time\u0027\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"\\n      e.g. deadline Exercise /by 2020-12-01 12:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a wrong delete format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDeleteException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDeleteException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDeleteException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Delete format is invalid.\\n    Please try again with a proper format like \u0027delete 3\u0027\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a wrong done format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidDoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidDone object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidDoneException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Done format is invalid.\\n    Please try again with a proper format like \u0027done 3\u0027\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the input to create an Event task is not formatted correctly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidEventException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidEventException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Event task is poorly formatted.\\n    Here is a proper format: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"\u0027event name\u0027 /at \u0027start time to end time\u0027\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"\\n      e.g. meeting /at Sunday 2 - 4pm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the file format of the CSV is not properly formatted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidFileFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidFileFormatException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidFileFormatException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"CSV file is poorly formatted!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task number provided by the user is not valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the InvalidTaskNumberException object with the error message suggesting the proper format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size provided by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public InvalidTaskNumberException(int size) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(String.format(\"Task number does not exist in the list.\\n    \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"Your current list only has %d tasks!\", size));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskAlreadyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the task is already done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskAlreadyDoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the TaskAlreadyDoneException object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskAlreadyDoneException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(\"Task has already been mark as done!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Thrown when the user inputs a command which is not part of the known commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Proceeds to show the list of valid commands to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final int NUM_OF_COMMANDS \u003d 7;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MSG_1 \u003d \"I\u0027m sorry, but I don\u0027t know what that means.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String MSG_2 \u003d \"    Here are the available commands that I know:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static final String[] listOfCommands \u003d new String[]{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"todo _ (e.g. todo 3)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"deadline \u0027task name\u0027 /by \u0027end time\u0027 (e.g. deadline Exercise /by Sunday)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"\u0027event name\u0027 /at \u0027start time - end time\u0027 (e.g. meeting /at Sunday 2pm - 4pm)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"list\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"done _ (e.g. done 4)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"delete _ (e.g. delete 4)\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"find \u0027   \u0027 (e.g. find book)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        \"bye\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the UnknownCommandException object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(UnknownCommandException.getListOfCommands());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getListOfCommands() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder str1 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(MSG_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(MSG_2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 1; i \u003c NUM_OF_COMMANDS; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s \u003d String.format(\"     %d. %s\\n\", i, listOfCommands[i - 1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            str1.append(s);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(String.format(\"     %d. %s\", NUM_OF_COMMANDS, listOfCommands[NUM_OF_COMMANDS - 1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return str1.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 43
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddComplexTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Parses the user input and creating a command from it."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Parses the user input and returns the corresponding command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param text User text input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Corresponding command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @throws DukeException If user input does not belong to the list of known commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public static Command parse(String text) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String[] inputArr \u003d deconstruct(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String keyWord \u003d getKeyWord(inputArr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String details \u003d getRestOfWord(inputArr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (keyWord.equals(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"done\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new SimpleCommand(details, SimpleCommandType.DONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"delete\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new SimpleCommand(details, SimpleCommandType.DELETE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddToDoCommand(details);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddComplexTaskCommand(details, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new AddComplexTaskCommand(details, TaskType.EVENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"find\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new FindCommand(details);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (keyWord.equals(\"bye\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String[] deconstruct(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String formattedString \u003d input.trim().replaceAll(\"\\\\s{2,}\", \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return formattedString.split(\" \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getKeyWord(String[] arr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr[0].toLowerCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static String getRestOfWord(String[] arr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return arr.length \u003d\u003d 1 ? \"\" : arr[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 65
    }
  },
  {
    "path": "src/main/java/duke/storage/CsvConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ComplexTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Converts the task in CSV format to a Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class CsvConverter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Creates a task from the CSV format of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input CSV format of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param ui User interface."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected static Task parseToTask(String input, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String[] inputArr \u003d input.split(\"\\\\s{2},\", 4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (inputArr.length \u003c 4) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String taskType \u003d inputArr[0].toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String description \u003d inputArr[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String time \u003d inputArr[2];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String status \u003d inputArr[3];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            boolean isDone \u003d checkStatus(status);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (taskType.equals(\"TODO\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                return new ToDo(description, isDone);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else if (taskType.equals(\"EVENT\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                return new ComplexTask(description, time, TaskType.EVENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else if (taskType.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                return new ComplexTask(description, time, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.printBasic(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private static boolean checkStatus(String input) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String status \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (status.equals(\"done\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else if (status.equals(\"not done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 58
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the interactions with the user\u0027s CSV file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Includes creating, updating file and retrieving list of tasks from CSV file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String dataDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the storage object and create a new file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        dataDir \u003d System.getProperty(\"user.dir\") + \"/data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        filePath \u003d dataDir + \"/tasklist.csv\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            File newDirectory \u003d new File(dataDir);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            newDirectory.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            File newFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            newFile.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.fileCreationError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Gets the list of tasks from the tasklist CSV file, if any."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String header \u003d br.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (header !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                String line \u003d br.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    Task newTask \u003d CsvConverter.parseToTask(line, ui);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                    line \u003d br.readLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.fileReadingError();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Updates the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void update(TaskList tasks) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String header \u003d \"Task type  ,Description  ,Time  ,Status\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder(header);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                stringBuilder.append(convertToCsvFormat(task));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fileWriter.write(stringBuilder.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            ui.fileUpdateError();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String convertToCsvFormat(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return String.format(\"%s  ,%s  ,%s  ,%s\\n\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                task.getTaskName(), task.getDescription(), task.getTime(), task.getStatus());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 97
    }
  },
  {
    "path": "src/main/java/duke/task/ComplexTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Stores properties of the more complex tasks - EVENT and DEADLINE."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ComplexTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the complex task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time time of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType type of task, either EVENT or DEADLINE."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ComplexTask(String description, String time, TaskType taskType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, false, taskType, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides the string representation of the complex task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the complex task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        if (taskType \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } else { // DEADLINE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Stores all methods and properties of a Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Variables include description, task type, time and done status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the Task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param description Task details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param isDone Status of task - true if done, false otherwise."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param taskType Type of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param time Time of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    protected Task(String description, boolean isDone, TaskType taskType, String time) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the status of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True iff task is done, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the String representation of the status of Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of Task status."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return isDone ? \"Done\" : \"Not done\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the Task name in capitalized form."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task name in CAPS."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return taskType.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the Task description."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the time of the Task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Time of Task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns true iff the task description contains the query word, false otherwise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param query Query word."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return true iff task description contains the query."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean match(String query) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return description.contains(query);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the String representation of the Task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the Task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 104
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Contains the three types of task, namely DEADLINE, EVENT and TODO."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 10
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * ToDo task, which is one of the three Task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, isDone, TaskType.TODO, \"-\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        super(description, false, TaskType.TODO, \"-\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Provides a string representation of the ToDo task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return String representation of the ToDo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 24
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Keeps and handles all operations regarding the user tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initializes the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the task at the index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Deletes the tasks at the index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param index Position of task in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Adds a new task to the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param task Task being added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Retrieves the list object of the tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return List object containing all tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return Size of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if digit lies within (0, number of tasks)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param digit Input digit."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True if digit lies within the range, false otherwise."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean checkIfValid(int digit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return digit \u003c\u003d tasks.size() \u0026\u0026 digit \u003e 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Checks if the task list is empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return True iff task list is empty, false otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Finds all tasks with descriptions that are matching the String input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input word for querying."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return new TaskList with tasks matching the input word"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public TaskList matchAll(String input) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e newTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            if (task.match(input)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                newTaskList.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return new TaskList(newTaskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 101
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " * Handles the program interactions with user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Initialises the Ui object and scanner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Takes in one line of user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the formatted input message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param msg Input message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void printMsg(String msg) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String separator \u003d \"   ---------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.print(separator);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.printf(\"    %s\\n\", msg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(separator);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Greets the user upon starting the program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void greetings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(\"Hello, I\u0027m Duke!\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Closes scanner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void goodBye() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(\"Bye! Hope to see you again soon! ☺\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the file creation message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void fileCreationError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(\"Error in creating file.\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the file update error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void fileUpdateError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(\"Error in updating file\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the file read error when reading from the CSV file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void fileReadingError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.println(\"Error in reading from csv file\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints out a message with basic formatting."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param input Input message."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void printBasic(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        System.out.printf(\"%s\\n\\n\", input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints task done message."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Input task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void markTaskAsDone(Task current) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(String.format(\"Nice! I\u0027ve marked this task as done:\\n      %s\", current));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the deletion success message."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param current Current task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void deleteTask(Task current, int size) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(String.format(\"Noted. I\u0027ve removed this task:\\n      %s\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"    Now you have %d tasks in the list.\", current, size));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the add task message."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param newTask New task added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param size Size of task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void addTask(Task newTask, int size) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(String.format(\"Got it. I\u0027ve added this task:\\n      %s\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "                + \"    Now you have %d tasks in the list.\", newTask, size));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the empty task list message."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void emptyTaskList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(\"You currently have no tasks in the list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the task list to the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param tasks Task list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param extra Extra word to add in, if any."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void showTaskList(TaskList tasks, String extra) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        StringBuilder str1 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(String.format(\"Here are the %s tasks in your list:\\n\", extra));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        for (int i \u003d 0; i \u003c size - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            str1.append(String.format(\"     %d.%s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        str1.append(String.format(\"     %d.%s\", size, tasks.get(size - 1)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(str1.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * Prints the no matching tasks found message."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     * @param queryWord Word use to query task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void emptyFind(String queryWord) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        printMsg(String.format(\"There are no matching tasks with the keyword %s.\", queryWord));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 152
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddComplexTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.AddToDoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.command.SimpleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s1 \u003d \"todo work\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s2 \u003d \"deadline test /by 2pm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s3 \u003d \"event test /at 2-4pm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s4 \u003d \"list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s5 \u003d \"bye\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s6 \u003d \"done 5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            String s7 \u003d \"delete 2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s1) instanceof AddToDoCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s2) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s3) instanceof AddComplexTaskCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s4) instanceof ShowCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s5) instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s6) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            assertTrue(Parser.parse(s7) instanceof SimpleCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 39
    }
  },
  {
    "path": "src/test/java/duke/task/ComplexTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ComplexTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description \u003d \"workout\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String time \u003d \"2pm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ComplexTask newDeadline \u003d new ComplexTask(description, time, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check default"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newDeadline.isDone());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Not done\", newDeadline.getStatus());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"DEADLINE\", newDeadline.getTaskName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(time, newDeadline.getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[D][\\u2718] %s (by: %s)\", description, time), newDeadline.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newDeadline.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newDeadline.isDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Done\", newDeadline.getStatus());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[D][\\u2713] %s (by: %s)\", description, time), newDeadline.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 29
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        String description \u003d \"workout\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ToDo newToDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        // Check default"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(newToDo.isDone());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Not done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"TODO\", newToDo.getTaskName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"-\", newToDo.getTime());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2718] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        newToDo.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(newToDo.isDone());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(\"Done\", newToDo.getStatus());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(String.format(\"[T][\\u2713] %s\", description), newToDo.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 27
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        TaskList taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        Task newTask \u003d new ToDo(\"test1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(new ToDo(\"test2\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(new ToDo(\"test3\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(new ToDo(\"test4\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        taskList.add(new ToDo(\"test5\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertEquals(newTask, taskList.get(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertTrue(taskList.checkIfValid(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "        assertFalse(taskList.checkIfValid(10));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo test case"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "null"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 2020-08-23"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 2020-08-23 10:15"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline Return Book /by 2020-08-23 19:00:35"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline return book /by 00:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event /at 2 - 4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /at"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "deadline meeting /by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "event project meeting /at 2019-12-01"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done sdvgfdsg"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete asbf"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "FiND book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "find legend"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "bye 5"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 25
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keanecjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keanecjy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "keanecjy": 4,
      "-": 20
    }
  }
]
