[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    archiveBaseName \u003d \"Milk\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      }
    ],
    "authorContributionMap": {
      "successs404": 20,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "Milk is a **desktop app for managing tasks, optimised for use via a command line interface** (CLI)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "If you can type fast, Milk can manage your tasks faster than traditional GUI apps."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. [Quick start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. [Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Adding a todo: `todo`](#adding-a-todo-todo)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Adding a deadline: `deadline`](#adding-a-deadline-deadline)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Adding an event: `event`](#adding-an-event-event)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Listing all tasks: `list`](#listing-all-tasks-list)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Marking a task as done: `done`](#marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Deleting a task: `delete`](#deleting-a-task-delete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Finding tasks: `find`](#finding-tasks-find)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Finding deadlines/events occuring on a specific date: `date`](#finding-deadlinesevents-occuring-on-a-specific-date-date)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Obtaining statistics about managed tasks: `stats`](#obtaining-statistics-about-managed-tasks-stats)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    1. [Exiting the program: `bye`](#exiting-the-program-bye)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. [FAQ](#faq)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. [Command summary](#command-summary)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. [Troubleshooting](#troubleshooting)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "---"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Download the latest `Milk.jar` from [here](https://github.com/successs404/ip/releases/tag/A-Release)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Copy the file to the folder you want to use as the *home folder* for your Milk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "Note how Milk greets you with a welcome message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "   \u003cimg src\u003d\"https://user-images.githubusercontent.com/65069982/93287632-90bfb400-f80c-11ea-85f1-7bf18d20bc34.png\" height\u003d\"300\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "   "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    * `todo read book`: Adds a todo with `read book` description to the list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    * `list`: Lists all tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    * `done 1`: Marks the 1st task shown in the list of tasks as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    * `delete 3`: Deletes the 3rd task shown in the list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    * `bye`: Exits the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e ℹ️ **Notes about the command format:**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* Commands are case-sensitive."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* Words in `UPPER_CASE` are the parameters to be supplied by the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003ee.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo read book`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* Items in square brackets are optional. \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003ee.g. `find KEYWORD [MORE_KEYWORDS]` can be used as `find read` or as `find read book`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e* The order of parameters is fixed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Adding a todo: `todo`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adds a todo to the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `todo read book`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `todo swim`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adds a deadline to the list of tasks."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e ⚠ `DATE` should be in **YYYY-MM-DD** format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `deadline return book /by 2020-06-06`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `deadline assignment /by 2020-09-18`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Adding an event: `event`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "Adds an event to the list of tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `event DESCRIPTION /at DATE`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `event project meeting /at 2020-08-06`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `event concert /at 2020-10-10`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Listing all tasks: `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "Shows the list of tasks that are being managed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "Marks a task from the list of tasks as done."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Marks the task at the specified `INDEX`. The index refers to the index number shown in the list of tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `done 1` marks the 1st task in a list that contains at least 1 task as done."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `done 3` marks the last task in a list that contains 3 tasks as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "Deletes an existing task from the list of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Deletes the task at the specified `INDEX`. The index refers to the index number shown in the list of tasks."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "The index **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `delete 1` deletes the 1st task from a list that contains at least 1 task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `delete 3` deletes the last task from a list that contains 3 tasks."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Finding tasks: `find`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "Find tasks which name contains any of the given keywords."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "* The search is case-sensitive. e.g. `Book` will not match `book`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "* The order of the keywords matter. e.g. `book read` will not match `read book`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Partial words can be matched. e.g. `b` will match `book`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "* Tasks matching at least one keyword will be returned. e.g. `book` will return `book`, `read book`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `find s` returns `swim`, `swimming`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `find book` returns `read book`, `return book`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "   \u003cimg src\u003d\"https://user-images.githubusercontent.com/65069982/93290752-024f3080-f814-11ea-8562-0a2a2f83f209.png\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Finding deadlines/events occuring on a specific date: `date`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "Find deadlines/events that occur on the given date."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `date DATE`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `date 2020-06-06`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cimg src\u003d\"https://user-images.githubusercontent.com/65069982/93291787-a043fa80-f816-11ea-82e8-6d21e1f92d21.png\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Obtaining statistics about managed tasks: `stats`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "Shows the statistics of the tasks managed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "* The number of tasks that you have completed in this session will be shown. A session starts when the application is launched and ends when the application is closed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "* The number of uncompleted tasks in your list of tasks will be shown **only if** you still have uncompleted tasks."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": "* `stats`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cimg src\u003d\"https://user-images.githubusercontent.com/65069982/93291952-fa44c000-f816-11ea-9b4d-ac55a11c0590.png\" height\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": "### Exiting the program: `bye`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003e ℹ️ The application closes **3 seconds** after the command is called."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": "---"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Q:** How do I transfer by data to another Computer?"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "**A:** Install the app in the other computer and overwrite the empty data file it creates"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "with the file that contains the data of your previous Milk home folder."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "successs404"
        },
        "content": "---"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "successs404"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Action** | **Format, Examples**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "successs404"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Add** | `todo DESCRIPTION` e.g. `todo read book` \u003cbr\u003e `deadline DESCRIPTION /by DATE` e.g. `deadline return book /by 2020-06-06` \u003cbr\u003e `event DESCRIPTION /at DATE` e.g. `event project meeting /at 2020-08-06`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "successs404"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Done**  | `done INDEX` e.g. `done 1`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Delete** | `delete INDEX` e.g. `delete 3`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Find** | `find KEYWORD` e.g. `find book`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Date** | `date DATE` e.g. `date 2020-06-06`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Statistics** | `stats`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "successs404"
        },
        "content": "**Exit** | `bye`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "successs404"
        },
        "content": "---"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "successs404"
        },
        "content": "## Troubleshooting"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "successs404"
        },
        "content": "When interacting with Milk, some errors may occur and Milk would change her expression as shown:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003cimg src\u003d\"https://user-images.githubusercontent.com/65069982/93308849-63d3c700-f835-11ea-8efe-1e786f744603.png\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "successs404"
        },
        "content": "The following table displays the error messages that you may face and how you can solve the errors:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "successs404"
        },
        "content": "Message | What to do"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "successs404"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? The description of a task cannot be empty. | Include the `DESCRIPTION` parameter when adding a task."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? The task does not have a date/time attached. | Include the `DATE` parameter when adding a deadline/event."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? The format of the date given is invalid. | Modify your `DATE` parameter into YYYY-MM-DD format."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? There isn\u0027t a task index inputted. | Include the `INDEX` parameter when marking tasks as done or when deleting tasks."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? This task index does not exist in your list. | Modify your `INDEX` parameter to an index that is found in your list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "successs404"
        },
        "content": "Harh? I don\u0027t know what that means. | Use a valid Milk command."
      }
    ],
    "authorContributionMap": {
      "successs404": 191,
      "-": 16
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.ExceptionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the main class. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Duke object. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d storage.readFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d parser.parseSavedTaskList(lines);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Runs the Duke program. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String userInput \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "                Command c \u003d getResponse(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "                System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets the response in Command form from the user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param userInput The user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The response in Command form."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Command getResponse(String userInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Command c \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "            c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Command c \u003d new ExceptionCommand(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Runs the Duke program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param args The array of command-line arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 68,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "            stage.setTitle(\"Milk\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that adds a task to the taskList when executed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The task to be added. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new AddCommand object with the specified task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Adds the task to the taskList,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * prints out the AddCommand message in Duke format and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * saves the list in the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assert task !\u003d null : \"Oh no! The task added should not be empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.formatAddTask(taskList.getTasks(), task));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        storage.saveTaskList(taskList.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that terminates the program when executed. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the ByeCommand message in Duke format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(Ui.DIALOG_BYE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Indicates that the program is terminating. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the user command. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Duke\u0027s reply to the user input. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    protected String dialog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Executes the command. The child classes will implement this method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets Duke\u0027s reply to the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return Duke\u0027s reply to the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getDialog() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Sets Duke\u0027s reply to the user input to the given string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param dialog The string to update Duke\u0027s reply with."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setDialog(String dialog) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.dialog \u003d dialog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Indicates whether the program is terminating. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/DateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that shows the deadlines/events occurring on a specific date inputted. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The inputted date. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private LocalDate queryDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new DateCommand object with the specified queryDate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param queryDate The inputted date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DateCommand(LocalDate queryDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.queryDate \u003d queryDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the list of tasks that are occurring on the inputted date in Duke format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (deadline.getDate().equals(queryDate)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    tasksOnDate.add(deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (event.getDate().equals(queryDate)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    tasksOnDate.add(event);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.formatShowTasksOnDate(tasksOnDate, queryDate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that deletes a task from the taskList when executed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The index of the task to be deleted. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new DeleteCommand object with the specified index of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Deletes the task from TaskList\u0027s list,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * prints out the DeleteCommand message in Duke format and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * saves the list in the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assert index \u003e taskList.getTasks().size() : \"Oh no! There is an error with the DeleteCommand numbering logic.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "            setDialog(ui.formatDeleteTask(taskList.getTasks(), index));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            taskList.deleteTask(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "            storage.saveTaskList(taskList.getTasks());;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that marks a task in the taskList as done. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The index of the task to be marked as done. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new DoneCommand object with the specified index of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Marks the task as done,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * prints out the DoneCommand message in Duke format and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * saves the list in the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assert index \u003e taskList.getTasks().size() : \"Oh no! There is an error with the DoneCommand numbering logic.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            taskList.markTaskAsDone(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "            setDialog(ui.formatMarkAsDone(taskList.getTasks(), index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "            storage.saveTaskList(taskList.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 41
    }
  },
  {
    "path": "src/main/java/duke/commands/ExceptionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that is generated when an erroneous user input is given. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ExceptionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The exception that is resulted from the erroneous user input.*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Exception exception;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new ExceptionCommand object with the specified exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param exception The exception that is resulted from the erroneous user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ExceptionCommand(Exception exception) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the ExceptionCommand message in Duke format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.showError(exception));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that finds the tasks that contain the keyword. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The keyword to query. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new FindCommand object with the specified keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param keyword The keyword to query."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the list of tasks that contain the keyword in Duke format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (task.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.formatFindTasks(matchingTasks));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 40
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that shows the taskList. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the ListCommand message in Duke format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.formatLst(taskList.getTasks()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 20
    }
  },
  {
    "path": "src/main/java/duke/commands/StatsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the command that shows the statistics of the taskList. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Prints out the StatsCommand message in Duke format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param ui The UI that prints out messages in Duke format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param storage The storage system that saves the taskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setDialog(ui.formatStats(taskList.getTasks()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 20
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents a Duke-related exception. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new DukeException object with the specified error message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user does not input a valid dateTime. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new InvalidDateTimeException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Harh? The format of the date given is invalid.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user does not input a valid Duke command. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class InvalidDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new InvalidDukeCommandException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public InvalidDukeCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Harh? I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user inputs a task index that is out of the list\u0027s range. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class InvalidTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new InvalidTaskIndexException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public InvalidTaskIndexException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Harh? This task index does not exist in your list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user does not attach a date/time to a deadline/event. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class MissingDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new MissingDateTimeException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public MissingDateTimeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super (\"Harh? The task does not have a date/time attached.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user does not input a description to a task. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class MissingTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new MissingTaskDescriptionException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public MissingTaskDescriptionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Harh? The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/MissingTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the Duke exception which is thrown when the user does not input a task index in a Done/Delete Command. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class MissingTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new MissingTaskIndexException object with the specified error message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public MissingTaskIndexException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(\"Harh? There isn\u0027t a task index inputted.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 10
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static boolean isUserDialog \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setPadding(new Insets(10));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        dialog.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        displayPicture.setFitHeight(75);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setBackground(new Background(new BackgroundFill(isUserDialog ? Color.LIGHTBLUE : Color.LIGHTGREY,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "                new CornerRadii(5), new Insets(5))));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets the user dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param text The dialog message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param img The associated image."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The user dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "        isUserDialog \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets Duke\u0027s dialog."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param text The dialog message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param img The associated image."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return Duke\u0027s dialog."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        isUserDialog \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 83
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static duke.ui.Ui.DIALOG_WELCOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.ExceptionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Mocha.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Image userImageBye \u003d new Image(this.getClass().getResourceAsStream(\"/images/Mocha Bye.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Milk.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Image dukeImageException \u003d new Image(this.getClass().getResourceAsStream(\"/images/Milk Harh.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Image dukeImageBye \u003d new Image(this.getClass().getResourceAsStream(\"/images/Milk Bye.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Initializes Main Window with a welcome message. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "            DialogBox.getDukeDialog(DIALOG_WELCOME, dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Sets the Duke class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param d The Duke class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Command response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "                DialogBox.getUserDialog(input, userImageBye),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "                DialogBox.getDukeDialog(response.getDialog(), dukeImageBye)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "            );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "            ScheduledExecutorService scheduler \u003d Executors.newSingleThreadScheduledExecutor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Runnable task \u003d Platform::exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "            scheduler.schedule(task, 3, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "            DialogBox.getDukeDialog(response.getDialog(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    response instanceof ExceptionCommand ? dukeImageException : dukeImage)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 80
    }
  },
  {
    "path": "src/main/java/duke/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.DateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.commands.StatsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.InvalidDateTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.InvalidDukeCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.MissingDateTimeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.MissingTaskDescriptionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.exceptions.MissingTaskIndexException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents a parser that parses the user inputs and the list saved in the hard disk into a suitable format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": " * for Duke to process. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The formatter for user inputs. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final DateTimeFormatter FORMATTER_INPUT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The formatter for user inputs that are displayed in the list saved in the hard disk. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final DateTimeFormatter FORMATTER_DISPLAY \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Parses the user inputs into a suitable format for Duke to process."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param userInput The user input fed into Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return An appropriate command to be executed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @throws DukeException If the userInput is invalid or missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String[] inputCommandAndArgument \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String command \u003d inputCommandAndArgument[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String argument \u003d inputCommandAndArgument.length \u003d\u003d 2 ? inputCommandAndArgument[1] : \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseBye();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"done\") || command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "                throw new MissingTaskIndexException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseDoneDelete(command, Integer.parseInt(argument));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (argument.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "                throw new MissingTaskDescriptionException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseAdd(command, argument);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"date\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseDate(argument);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseFind(argument);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"stats\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return parseStats();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseBye() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseDoneDelete(String command, int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new DoneCommand(index - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new DeleteCommand(index - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "            assert false : \"Oh no! This invalid Duke Command scenario should be handled earlier.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseAdd(String command, String argument) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "                return new AddCommand(new ToDo(argument));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (!argument.contains(\" /by \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    throw new MissingDateTimeException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String[] descriptionAndDate \u003d argument.split(\" /by \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "                return new AddCommand(new Deadline(descriptionAndDate[0],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        LocalDate.parse(descriptionAndDate[1], FORMATTER_INPUT)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "                if (!argument.contains(\" /at \")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    throw new MissingDateTimeException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String[] descriptionAndDate \u003d argument.split(\" /at \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "                return new AddCommand(new Event(descriptionAndDate[0],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        LocalDate.parse(descriptionAndDate[1], FORMATTER_INPUT)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "                assert false : \"Oh no! This invalid Duke Command scenario should be handled earlier.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "                throw new InvalidDukeCommandException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseDate(String queryDate) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return new DateCommand(LocalDate.parse(queryDate, FORMATTER_INPUT));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "            throw new InvalidDateTimeException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseFind(String keyword) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Command parseStats() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return new StatsCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Parses the user inputs in the list saved in the hard disk into a suitable format for Duke to process."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": "      * @param savedTaskList The list of user inputs in the list saved in the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return A list of tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ArrayList\u003cTask\u003e parseSavedTaskList(ArrayList\u003cString\u003e savedTaskList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (String task : savedTaskList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String[] taskParts \u003d task.split(\" \", 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String type \u003d \"\" + taskParts[0].charAt(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String status \u003d \"\" + taskParts[0].charAt(4);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "            String argument \u003d taskParts[1];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "                tasks.add(new ToDo(isDone(status), argument));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String[] descriptionAndDate \u003d splitArgument(argument, \" \\\\(by: \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "                tasks.add(new Deadline(isDone(status), descriptionAndDate[0],"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        LocalDate.parse(descriptionAndDate[1], FORMATTER_DISPLAY)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "successs404"
        },
        "content": "                String[] descriptionAndDate \u003d splitArgument(argument, \" \\\\(at: \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "successs404"
        },
        "content": "                tasks.add(new Event(isDone(status), descriptionAndDate[0],"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "successs404"
        },
        "content": "                        LocalDate.parse(descriptionAndDate[1], FORMATTER_DISPLAY)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "successs404"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "successs404"
        },
        "content": "                assert false : \"Oh no! An invalid task type has been passed.\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String[] splitArgument(String argument, String regex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String[] descriptionAndDate \u003d argument.split(regex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "successs404"
        },
        "content": "        descriptionAndDate[1] \u003d descriptionAndDate[1].replace(\")\", \"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return descriptionAndDate;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private boolean isDone(String symbol) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return symbol.equals(\"O\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 174
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the storage system that saves the list of tasks. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The path to the dataFile.*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static final String DATAFILE_PATH \u003d \"./data/data.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The file that stores in the list of tasks in the hard disk. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private File dataFile \u003d new File(DATAFILE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Storage object. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "            dataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Generates a list of user inputs from the list saved in the hard disk for the Parser to process."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return A list of user inputs in the list saved in the hard disk."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ArrayList\u003cString\u003e readFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "            Scanner sc \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "                lines.add(sc.nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Saves the list of tasks into the hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks to be saved into the hard disk."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void saveTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "            sb.append(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "            writeToFile(sb.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(dataFile.getPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "        fileWriter.write(textToAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 72
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the dynamic list of tasks. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The number of tasks completed in the session. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static int numCompletedTasks \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The list of tasks. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new TaskList object with the specified ArrayList of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets the number of tasks completed in the session."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The number of tasks completed in the session."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static int getNumCompletedTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return numCompletedTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Increments the number of completed tasks. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private static void incrementNumCompletedTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        TaskList.numCompletedTasks++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gets the list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "      * @return The list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Marks a task that is stored in the list as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task to be marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!tasks.get(index).isDone()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "            tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "            incrementNumCompletedTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Adds a task into the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Deletes a task from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 71
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents a deadline task. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The date which the deadline should be done by. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Deadline object with the specified description and date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param date The date which the deadline should be done by."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Deadline(String name, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Deadline object with the specified indicator, description and date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param isDone The indicator of whether the task is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param date The date which the deadline should be done by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Deadline(boolean isDone, String name, LocalDate date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(isDone, name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The date which the deadline should be done by."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Returns the string representation of the task. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"%s%s (by: %s)\", \"[D]\", super.toString(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "                date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents an event task. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The date which the event is happening at. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Event object with the specified description and date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param date The date which the event is happening at."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Event(String name, LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Event object with the specified indicator, description and date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param isDone The indicator of whether the task is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param date The date which the event is happening at."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Event(boolean isDone, String name, LocalDate date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(isDone, name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The date which the event is happening at."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Returns the string representation of the task. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"%s%s (at: %s)\", \"[E]\", super.toString(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "                date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the task that is stored in the list. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The indicator of whether the task is done. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The description of the task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Task object with the specified description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Task object with the specified indicator and description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param isDone The indicator of whether the task is done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Task(boolean isDone, String name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The indicator of whether the task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The description of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Marks the task as done. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Returns the string representation of the task. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"O\" : \"X\", name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 53
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents a toDo task. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new ToDo object with the specified description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new ToDo object with the specified indicator and description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param isDone The indicator of whether the task is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param name The description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public ToDo(boolean isDone, String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        super(isDone, name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Returns the string representation of the task. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"%s%s\", \"[T]\", super.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static duke.tasklist.TaskList.getNumCompletedTasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "/** Represents the UI that prints out messages in Duke format. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The welcome message in Duke format. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String DIALOG_WELCOME \u003d \"Hello! I\u0027m Milk.\\nWhat can I help you with?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The goodbye message in Duke format. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public static final String DIALOG_BYE \u003d \"You\u0027re going? Bye :( Hope to see you again soon.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** The scanner that scans the user input. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Constructs a new Ui object. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Reads the user input from the scanner. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the list of tasks in Duke format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The list of tasks in Duke format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatLst(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        StringBuilder s;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "            s \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "                s.append(i).append(\".\").append(tasks.get(i - 1)).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "successs404"
        },
        "content": "            s \u003d new StringBuilder(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the message where a task is marked as done in Duke format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task that is marked as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The message where a task is marked as done in Duke format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatMarkAsDone(ArrayList\u003cTask\u003e tasks, int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the list of tasks after a task is added in Duke format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param task The task that is added."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The list of tasks after a task is added in Duke format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatAddTask(ArrayList\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "successs404"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"Okay. I\u0027ve added this task:\\n\" + task + \"\\nNow you have %d %s in the list.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "successs404"
        },
        "content": "            size, size \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the list of tasks after a task is deleted in Duke format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param index The index of the task that is deleted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The list of tasks after a task is deleted in Duke format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatDeleteTask(ArrayList\u003cTask\u003e tasks, int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "successs404"
        },
        "content": "        int sizeAfterDeletion \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return String.format(\"Alright. I\u0027ve removed this task:\\n\" + tasks.get(index)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "successs404"
        },
        "content": "            + \"\\nNow you have %d %s in the list.\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "successs404"
        },
        "content": "            sizeAfterDeletion, sizeAfterDeletion \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the list of tasks that occur on the specified date in Duke format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasksOnDate The list of tasks that occur on the specified date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param queryDate The specified date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The list of tasks that occur on the specified date in Duke format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatShowTasksOnDate(ArrayList\u003cTask\u003e tasksOnDate, LocalDate queryDate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!tasksOnDate.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "successs404"
        },
        "content": "            StringBuilder s \u003d new StringBuilder(String.format(\"The following deadlines/events are scheduled on %s.\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    queryDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasksOnDate.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "successs404"
        },
        "content": "                s.append(\"\\n\").append(i).append(\".\").append(tasksOnDate.get(i - 1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return s.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return String.format(\"There are no deadlines/events scheduled on %s.\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "successs404"
        },
        "content": "                    queryDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the list of tasks that contain the keyword in Duke format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param matchingTasks The list of tasks that contain the keyword."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The list of tasks that contain the keyword in Duke format."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatFindTasks(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (!matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "successs404"
        },
        "content": "            StringBuilder s \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "successs404"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "successs404"
        },
        "content": "                s.append(\"\\n\").append(i).append(\".\").append(matchingTasks.get(i - 1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return s.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "successs404"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "successs404"
        },
        "content": "            return \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the error message in Duke format."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param e The exception that is thrown."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The error message in Duke format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String showError(Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "successs404"
        },
        "content": "    /** Gives the statistics of the taskList in Duke format."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "successs404"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "successs404"
        },
        "content": "     * @return The statistics of the taskList in Duke format."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "successs404"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public String formatStats(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // Gets the number of tasks completed in this session."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String s \u003d String.format(\"You have completed %d %s in this session.\", getNumCompletedTasks(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "successs404"
        },
        "content": "            getNumCompletedTasks() \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "successs404"
        },
        "content": "        // Gets the number of tasks uncompleted in the current list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "successs404"
        },
        "content": "        int numUncompletedTasks \u003d 0;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "successs404"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "successs404"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "successs404"
        },
        "content": "                numUncompletedTasks++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "successs404"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "successs404"
        },
        "content": "        if (numUncompletedTasks \u003e 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "successs404"
        },
        "content": "            s +\u003d String.format(\"\\nYou have %d uncompleted %s in your current list.\", numUncompletedTasks,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "successs404"
        },
        "content": "                numUncompletedTasks \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "successs404"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "successs404"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 154
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"#303030\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003cFont name\u003d\"Tahoma\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "successs404": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003cFont name\u003d\"Tahoma\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "successs404": 23
    }
  },
  {
    "path": "src/test/java/duke/tasklist/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testMarkTaskAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        TaskList taskList \u003d new TaskList(lst);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.addTask(toDo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.markTaskAsDone(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(true, toDo.isDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testAddTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "successs404"
        },
        "content": "        TaskList taskList \u003d new TaskList(lst);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.addTask(toDo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "successs404"
        },
        "content": "        expected.add(toDo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(expected, lst);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testDeleteTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "successs404"
        },
        "content": "        TaskList taskList \u003d new TaskList(lst);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.addTask(toDo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "successs404"
        },
        "content": "        taskList.deleteTask(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ArrayList\u003cTask\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(expected, lst);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 45
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", LocalDate.parse(\"2020-06-06\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expected \u003d \"[D][X] return book (by: Jun 06 2020)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(expected, deadline.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 19
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", LocalDate.parse(\"2020-08-06\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expected \u003d \"[E][X] project meeting (at: Aug 06 2020)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(expected, event.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 19
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "        String expected \u003d \"[T][X] read book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "        assertEquals(expected, toDo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "successs404": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "successs404"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "successs404"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "successs404"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "successs404"
        },
        "content": "deadline return book /by 2020-06-06"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "successs404"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "successs404"
        },
        "content": "event project meeting /at 2020-08-06"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "successs404"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "successs404"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "successs404"
        },
        "content": "date 2020-06-06"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "successs404"
        },
        "content": "date 2020-01-01"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "successs404"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "successs404"
        },
        "content": "find book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "successs404"
        },
        "content": "find phone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "successs404"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "successs404": 17
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "successs404"
        },
        "content": "del ..\\text-ui-test\\src\\main\\data\\data.txt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "successs404"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "successs404"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "successs404": 3,
      "-": 21
    }
  }
]
