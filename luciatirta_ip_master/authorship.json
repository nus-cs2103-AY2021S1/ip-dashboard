[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 25,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TODO#read book#false"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "EVENT#write essay#false#tonight"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "EVENT#meeting#true#2pm"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import controllers.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            scene.getStylesheets().add(\"/view/main.css\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 32
    }
  },
  {
    "path": "src/main/java/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 61
    }
  },
  {
    "path": "src/main/java/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            DialogBox.getDukeDialog(d.getWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 55
    }
  },
  {
    "path": "src/main/java/duke/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents the commands available in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    BYE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 15
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** The deadline of the task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** Deadline of the task as java.time.LocalDate. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param by the deadline of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param isDone boolean to indicates whether the task has been done or not."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param by the deadline of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Marks the Deadline as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Deadline with updated status (done)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Deadline completeTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Deadline(description, true, by);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the format of the Deadline to be saved in hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Deadline object in specified format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"DEADLINE#\" + description + \"#\" + String.valueOf(isDone) + \"#\" + by;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the string representation of the Deadline object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the string representation of Deadline."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + (date !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? (date.getDayOfWeek() + \", \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : by) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 75
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents Duke, a chat bot that allows tasks management (add, delete, mark as done)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * @author Lucia Tirta Gunawan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * @author A0200718N"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** Storage to load and save tasks. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** List of tasks saved in Duke. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** User interface to display output from Duke. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param filePath the file path of the saved tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            taskList \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return welcome message from Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return ui.gettWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets response from Duke after giving command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the String response from Duke"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "//        ui.printWelcome();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] inputs \u003d input.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Commands command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (command.equals(Commands.BYE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    storage.writeData(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (IOException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return ui.getGoodbyeMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.LIST)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return ui.getTaskList(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.FIND)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                ArrayList\u003cTask\u003e results \u003d inputs.length \u003e 1 ? taskList.find(inputs[1]) : taskList.getTasks();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                return ui.getSearchResult(results);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.DONE)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkIndex(inputs, taskList.getSize());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    taskList.markDone(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ui.getCompletedTask(taskList.getTask(index));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (InvalidIndexException ex) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.DELETE)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    if (inputs.length \u003e 1 \u0026\u0026 inputs[1].trim().equals(\"all\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.removeAllTasks();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        return ui.sayDeleteAllTasks();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        Parser.checkIndex(inputs, taskList.getSize());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        Task temp \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        taskList.removeTask(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                        return ui.getDeletedTask(temp, taskList.getSize());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (InvalidIndexException ex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.TODO)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkDescription(inputs, command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    taskList.addTask(new Todo(inputs[1]));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ui.getAddedTask(taskList.getTask(taskList.getSize() - 1), taskList.getSize());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.DEADLINE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkDescription(inputs, command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String[] taskInfos \u003d temp.split(\"/by\", 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    inputs[1] \u003d taskInfos[0];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkDescription(inputs, command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkTime(taskInfos, command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    taskList.addTask(new Deadline(taskInfos[0].trim(), taskInfos[1].trim()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ui.getAddedTask(taskList.getTask(taskList.getSize() - 1), taskList.getSize());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (EmptyTimeException ex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkDescription(inputs, command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    String[] taskInfos \u003d temp.split(\"/at\", 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    inputs[1] \u003d taskInfos[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkDescription(inputs, command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    Parser.checkTime(taskInfos, command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    taskList.addTask(new Event(taskInfos[0].trim(), taskInfos[1].trim()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ui.getAddedTask(taskList.getTask(taskList.getSize() - 1), taskList.getSize());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                } catch (EmptyTimeException ex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 135,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents Event with specified time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** the time of the Event. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** the time of the Event as java.time.LocalDate. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param at the time of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param isDone boolean to indicates whether the event has been done or not."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param at the time of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Marks the Event as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Event with updated status (done)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Event completeTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Event(description, true, at);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the format of the Event to be saved in hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Event object in specified format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"EVENT#\" + description + \"#\" + String.valueOf(isDone) + \"#\" + at;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the string representation of the Event object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the string representation of Event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + (date !\u003d null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? (date.getDayOfWeek() + \", \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : at) + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 75
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * A parser for user\u0027s input command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private static void checkCommands(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Commands.valueOf(input.trim().toUpperCase());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new InvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Parses the user input to the available command in Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param fullCommand the command from the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the Commands enum correspond to the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws InvalidCommandException if the command user input not available in Duke\u0027s command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static Commands parse(String fullCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] inputs \u003d fullCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        checkCommands(inputs[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return Commands.valueOf(inputs[0].trim().toUpperCase());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Checks whether the index from user input is within the range of current tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param inputs the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param numberOfTask number of current tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws InvalidIndexException if the user inputs an invalid index (out of bound) or wrong data type."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkIndex(String[] inputs, int numberOfTask) throws InvalidIndexException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d (numberOfTask \u003e 1 ? \"\\nInput a number between 1 - \" + numberOfTask : \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (inputs.length \u003c 2 || inputs[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new InvalidIndexException(\"Please input a valid index of task\" + usage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (index \u003c 1 || index \u003e numberOfTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                throw new InvalidIndexException(\"Please input a valid index of task\" + usage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new InvalidIndexException(\"Please input a valid index of task\" + usage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Checks whether the user input contains task description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param task the user task input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param type the type of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws EmptyDescriptionException if the user input does not contain task description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkDescription(String[] task, Commands type) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d \"Please input using the format: \" + (type.equals(Commands.TODO)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? \"todo \u003ctodo_desc\u003e\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : type.equals(Commands.DEADLINE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? \"deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : \"event \u003cevent_desc\u003e /at \u003ctime\u003e\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (task.length \u003c 2 || task[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new EmptyDescriptionException(\"Please specify the task description\\n\" + usage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Checks whether the user input contains the time for the task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param desc the user input description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param type the type of the task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws EmptyTimeException if the user input does not contain the time for the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public static void checkTime(String[] desc, Commands type) throws EmptyTimeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String usage \u003d \"Please input using the format: \" + (type.equals(Commands.TODO)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? \"todo \u003ctodo_desc\u003e\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : type.equals(Commands.DEADLINE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            ? \"deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            : \"event \u003cevent_desc\u003e /at \u003ctime\u003e\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (desc.length \u003c 2 || desc[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            throw new EmptyTimeException(\"Please specify the time for the task\\n\" + usage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 86
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents the storage of the chat bot that can load and write data into the hard disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** the path to the file for saved tasks. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param filePath the file path of the saved tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Loads tasks data from the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the current task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws FileNotFoundException if there is no file data in the hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            String[] inputs \u003d input.split(\"#\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Commands command \u003d Commands.valueOf(inputs[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (command.equals(Commands.TODO)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                taskList.add(new Todo(inputs[1], Boolean.parseBoolean(inputs[2])));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else if (command.equals(Commands.EVENT)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                taskList.add(new Event(inputs[1], Boolean.parseBoolean(inputs[2]), inputs[3]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                taskList.add(new Event(inputs[1], Boolean.parseBoolean(inputs[2]), inputs[3]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Writes tasks into the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param taskList the current task list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @throws IOException if there is an error in writing the tasks into file in hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void writeData(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        StringBuilder textToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            textToAdd.append(task.getData()).append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        fw.write(textToAdd.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 68
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** the description of the task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** boolean indicating whether the task is done or not. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param isDone boolean to indicates whether the task has been done or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return task description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Marks the Task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Task with updated status (done)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task completeTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Task(description, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the status icon of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return a check icon if the task is done, a cross icon otherwise."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return (isDone ? \"[V]\" : \"[X]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the format of the Task to be saved in hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Task object in specified format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"TASK#\" + description + \"#\" + String.valueOf(isDone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the string representation of the Task object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the string representation of the Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return getStatusIcon() + \u0027 \u0027 + description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 70
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /** the lists of tasks. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tasks tasks to be inserted in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets all the task in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the tasks in TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets a particular Task from the TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param index the index of the task in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the Task object in the specified index in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the number of Task in TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the number of tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Marks a particular Task from the TaskList as done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param index the index of the task in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tasks.set(index, tasks.get(index).completeTask());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Removes a particular Task from the TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param index the index of the task in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Removes all the Task from the TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void removeAllTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Adds a Task into the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Searches tasks containing the search term."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param searchTerm the term used to search task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return list of tasks containing the search term."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String searchTerm) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 97
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents a Todo task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param isDone boolean to indicates whether the task has been done or not."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Marks the Todo as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Todo with updated status (done)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public Todo completeTask() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the format of the Todo to be saved in hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return Todo object in specified format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"TODO#\" + description + \"#\" + String.valueOf(isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets the string representation of the Todo object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the string representation of the Todo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 50
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " * Represents the interface for Duke to display the chat box output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets chat divider."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return divider line."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String chatDivider() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return welcome message from Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String gettWelcomeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Hello from\\n\" + logo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"Hi! I\u0027m Duke \\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Gets goodbye message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return goodbye message from Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getGoodbyeMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Bye. See you again next time!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints confirmation when a new task is added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param task the task added."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param numberOfTask the current number of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return message for added task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getAddedTask(Task task, int numberOfTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + task.toString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\nNow you have \" + numberOfTask + \" tasks in the list.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints the current list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param taskList the lists of task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return the String representation of taskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        StringBuilder results \u003d new StringBuilder(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        for (int index \u003d 0; index \u003c tasks.size(); index++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "           results.append(\"\\n\" + (index + 1) + \": \" + tasks.get(index).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return results.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints confirmation when a task is marked as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param task the task being completed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return message for completed task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getCompletedTask(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + task.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints confirmation when a task is deleted from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param task the task deleted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param numberOfTask the current number of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return message for deleted task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getDeletedTask(Task task, int numberOfTask) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + task.toString()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"\\nNow you have \" + numberOfTask + \" tasks in the list.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints confirmation when all tasks is deleted from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return message for delete all tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String sayDeleteAllTasks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Noted. I\u0027ve removed all tasks in the list.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        + \"Now you have no task in the list.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * Prints the tasks in the search results."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @param tasks the tasks in the search results."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     * @return search results."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getSearchResult(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return \"No tasks found\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            StringBuilder results \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            for (int index \u003d 0; index \u003c tasks.size(); index++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                results.append(\"\\n\" + (index + 1) + \": \" + tasks.get(index));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            return results.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 113
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public DukeException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return \"Invalid use of Duke: \" + super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public EmptyDescriptionException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public EmptyTimeException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public InvalidCommandException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return super.getMessage() + \"\\nAvailable commands are: \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n1. todo \u003ctodo_desc\u003e\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n2. deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n3. event \u003cevent_desc\u003e /at \u003ctime\u003e\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n4. done \u003ctask_no\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n5. delete \u003ctask_no\u003e\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n6. list\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            + \"\\n7. bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 19
    }
  },
  {
    "path": "src/main/java/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public InvalidIndexException (String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 12
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"175.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u003cFont name\u003d\"Franklin Gothic Book\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"45.0\" fitWidth\u003d\"45.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"5.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"314.0\" AnchorPane.bottomAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"563.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"71.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 19
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"submit essay\", \"2020-08-29\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[D][X] submit essay (by: SATURDAY, Aug 29 2020)\", deadline.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCompleteTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"pay bills\", \"tomorrow\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        deadline \u003d deadline.completeTask();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[D][V] pay bills (by: tomorrow)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testGetData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"finish tutorial 1\", \"2020-08-27\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"DEADLINE#finish tutorial 1#false#2020-08-27\", deadline.getData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 26
    }
  },
  {
    "path": "src/test/java/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Event event \u003d new Event(\"attend meeting\", \"2020-08-27\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[E][X] attend meeting (at: THURSDAY, Aug 27 2020)\", event.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCompleteTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Event event \u003d new Event(\"buy books\", \"6pm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        event \u003d event.completeTask();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[E][V] buy books (at: 6pm)\", event.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testGetData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Event event \u003d new Event(\"workout\", \"2020-08-27\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"EVENT#workout#false#2020-08-27\", event.getData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 26
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.EmptyTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import exception.InvalidIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testParse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String input \u003d \"todo read book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Commands command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(Commands.TODO, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testParse_invalidCommand_exceptionThrown() throws InvalidCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String input \u003d \"todooo read book\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Commands command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (InvalidCommandException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            assertEquals(\"Invalid use of Duke: ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"Available commands are: \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"1. todo \u003ctodo_desc\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"2. deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"3. event \u003cevent_desc\u003e /at \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"4. done \u003ctask_no\u003e\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"5. delete \u003ctask_no\u003e\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"6. list\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"7. bye\", ex.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCheckIndex_invalidIndex_exceptionThrown() throws InvalidIndexException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] inputs \u003d {\"done\", \"4\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        int numberOfTask \u003d 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Parser.checkIndex(inputs, numberOfTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (InvalidIndexException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            assertEquals(\"Invalid use of Duke: Please input a valid index of task\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"Input a number between 1 - 2\", ex.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCheckDescription_invalidFormat_exceptionThrown() throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String command \u003d \"deadline /by tomorrow\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] inputs \u003d command.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] desc \u003d temp.split(\"/by\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        inputs[1] \u003d desc[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Parser.checkDescription(inputs, Commands.DEADLINE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (EmptyDescriptionException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            assertEquals(\"Invalid use of Duke: Please specify the task description\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"Please input using the format: deadline \u003cdeadline_desc\u003e /by \u003ctime\u003e\", ex.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCheckTime_invalidFormat_exceptionThrown() throws EmptyTimeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String command \u003d \"event meeting /at \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] inputs \u003d command.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String temp \u003d \" \" + inputs[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        String[] desc \u003d temp.split(\"/at\", 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        inputs[1] \u003d desc[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            Parser.checkTime(desc, Commands.EVENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        } catch (EmptyTimeException ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "            assertEquals(\"Invalid use of Duke: Please specify the time for the task\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "                + \"Please input using the format: event \u003cevent_desc\u003e /at \u003ctime\u003e\", ex.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 85
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Todo todo \u003d new Todo(\"arrange meeting\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[T][X] arrange meeting\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testCompleteTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        todo \u003d todo.completeTask();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"[T][V] read book\", todo.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    public void testGetData() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        Todo todo \u003d new Todo(\"home workout\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "        assertEquals(\"TODO#home workout#false\", todo.getData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 26
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TODO#borrow book#true"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "EVENT#project meeting#true#Mon 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "DEADLINE#do homework#false#no idea :-p"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "TODO#swimming#false"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "delete all"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "event /at 3pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "find meeting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "find swimming"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "todo swimming"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luciatirta"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "luciatirta": 2,
      "-": 19
    }
  }
]
