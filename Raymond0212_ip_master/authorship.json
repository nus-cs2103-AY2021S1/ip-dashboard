[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"# duke.duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Raymond0212":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"repositories {"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"    mavenCentral()"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"}"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"dependencies {"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":24,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"Welcome to the duke.duke created by Yongyan to help you mange your tasks."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"## Content"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"* [Introduction](#introduction)"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"* [About](#about)"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"* [Getting Started](#getting-started)"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"* [Features List](#features-list)"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"* [Usage](#usage)"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"* [Credits](#credits)"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"## About"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"Author: Chen Yongyan"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"GitHub: https://github.com/Raymond0212/ip"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"Version: v0.2"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"Release Date: 16/09/2020"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"## Getting Started"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"1. Download and install Java JDK 11."},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"2. Double click the `duke.duke.jar` or run `java -jar duke.duke.jar`"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"## Features List"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"All the commands are case-sensitive."},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"* Add tasks: `todo`, `deadline`, `event`"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"* List all tasks: `list`"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"* Mark a task as done: `done`"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"* Delete a task: `delete`"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"* Archive a task: `archive`"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"* Find tasks by a keyword e.g. `find`"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"* Exit and save the changed data e.g. `bye`"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"![duke.Ui](Duke.Ui.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"### `todo`"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"You can add a TODO task."},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"### `event`"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"You can add a EVENT task. The EVENT is a task with a time."},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"Format: `event TASK_CONTENT /at TIME /to TIME`"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"You are allowed to use time format below: `dd/MM/yyyy HH:mm, dd.MM.yyyy HH:MM, ddLLL,yyyy HH:mm, ddLLLyyyy HH:mm, yyyy-MM-dd HH:mm`"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"### `deadline`"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"You can add a DEADLINE task. The DEADLINE is a task with a deadline."},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"Format: `deadline TASK_CONTENT /by TIME`"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"You are allowed to use time format below: `dd/MM/yyyy HH:mm, dd.MM.yyyy HH:MM, ddLLL,yyyy HH:mm, ddLLLyyyy HH:mm, yyyy-MM-dd HH:mm`"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"### `list`"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"You can list all the tasks."},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"Format: `list`"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"### `done`"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"You can mark a task as DONE."},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"Format: `done INDEX`"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":"Note: You should give a valid task index."},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"### `delete`"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"You can delete a task."},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"Format: `delete INDEX`"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":"Note: You should give a valid task index."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"### `find`"},{"lineNumber":80,"author":{"gitId":"Raymond0212"},"content":"You can find a task by the keyword. It executes rough search for tasks based on description and tag."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Raymond0212"},"content":"Format: `find KEYWORD`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Raymond0212"},"content":"### `bye`"},{"lineNumber":85,"author":{"gitId":"Raymond0212"},"content":"The duke.duke will be closed and any change of tasks will be stored."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"Raymond0212"},"content":"Format: `bye`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Raymond0212"},"content":"## Credits"},{"lineNumber":90,"author":{"gitId":"Raymond0212"},"content":"Packages used:"},{"lineNumber":91,"author":{"gitId":"Raymond0212"},"content":"* JavaFX"},{"lineNumber":92,"author":{"gitId":"Raymond0212"},"content":"* JUnit"}],"authorContributionMap":{"Raymond0212":81,"-":11}},{"path":"src/main/java/Duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"public enum Command{"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    INIT,"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"    LIST,"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    BYE,"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    TODO,"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"    DEADLINE,"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    EVENT,"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"    DELETE,"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    FIND,"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"    ARCHIVE,"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"    INVALID;"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"    static private String originalCommand \u003d \"\"; //originalCommand stores the original command (case sensitive)"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"    static private String action \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"    static private String taskContent \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"    Command(){}"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"//    Duke.Command(String command){"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"//        this.command \u003d command.toUpperCase();"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"//        this.originalCommand \u003d command;"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"//    }"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    static String echo(){"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        return originalCommand;"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"    static String getTaskContent(){"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"        return taskContent;"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"    static String getAction() { return action; }"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"     * Returns a Duke.Command object that enumerate original command"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"     * @param command a string that contains the command"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"     * @return enumerated command"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"    static Command getCommand(String command){"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        taskContent \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"        action \u003d \"\";"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"        originalCommand \u003d \"\";"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"        originalCommand \u003d command;"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"        String[] splitedCommand \u003d command.split(\" \");"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"        action \u003d splitedCommand[0];"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"        if (splitedCommand.length \u003e 1) {"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"            taskContent \u003d String.join(\" \","},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"                    Arrays.copyOfRange(splitedCommand,"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"                                1,"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"                                splitedCommand.length)"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"            );"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"            return Command.valueOf(action.toUpperCase());"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e){"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"            return Command.INVALID;"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":64}},{"path":"src/main/java/Duke/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class CommandException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"    public CommandException(String message){"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":7}},{"path":"src/main/java/Duke/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"public class DeadlineTask extends Task{"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    private String taskType \u003d \"D\";"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    private final String[] formatStyle \u003d {"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyy\","},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyy\","},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyy\","},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyy\","},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-dd\","},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyyHHmm\","},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyyHHmm\","},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyyHHmm\","},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyyHHmm\","},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-ddHHmm\","},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyyHH:mm\","},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyyHH:MM\","},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyyHH:mm\","},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyyHH:mm\","},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-ddHH:mm\","},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    };"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    DeadlineTask(String taskContent, String time) throws ParseErrorException{"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        super(taskContent);"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"        time \u003d time.replaceAll(\"\\\\s\",\"\");"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"        boolean success \u003d false;"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"        for (String pattern: formatStyle){"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"            try{"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"                this.dateTime \u003d LocalDateTime.parse(time, formatter);"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"                success\u003dtrue;"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"            } catch (DateTimeParseException e){"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"                continue;"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"        if (!success)"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"            throw new ParseErrorException(\"Please check your format again.\\n You are suggested to use \\\"yyyy-MM-dd HH:mm\\\"\");"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getDateTime(){"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"        return this.dateTime;"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"    public String getTaskType(){"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"        return this.taskType;"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"        return super.toString()+\" (by: \" + this.dateTime + \")\";"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":58}},{"path":"src/main/java/Duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":61}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"    Ui ui;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    Storage storage, archiveStorage;"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"    TaskList tasks, archives;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    Parser parser;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    public Duke() {"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        ui \u003d new Ui();"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"        storage \u003d new Storage(\"data/duke.txt\");"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"        archiveStorage \u003d new Storage(\"data/duke.txt.archive\");"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"        tasks \u003d new TaskList(storage.load());"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"        archives \u003d new TaskList(archiveStorage.load());"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"        parser \u003d new Parser(tasks, archives);"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"    public Duke(String filePath) {"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"        ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"        archiveStorage \u003d new Storage(filePath+\".archive\");"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"        tasks \u003d new TaskList(storage.load());"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"        archives \u003d new TaskList(archiveStorage.load());"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"        parser \u003d new Parser(tasks, archives);"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    public String getResponse(String input){"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d ui.read(input, parser);"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"        storage.save(tasks.getTodoList());"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"        archiveStorage.save(archives.getTodoList());"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"        System.out.println(\"todo: \" + tasks.getTodoList().size());"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"        System.out.println(\"archive: \" + archives.getTodoList().size());"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"        return tmp;"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"    public void save(){"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"        storage.save(tasks.getTodoList());"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"        archiveStorage.save(archives.getTodoList());"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"    public static void main(String[] args) {"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"        String filePath \u003d \"data/duke.txt\";"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"        Duke duke \u003d new Duke(filePath);"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        duke.getResponse(\"\");"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"        duke.save();"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Raymond0212":46,"-":2}},{"path":"src/main/java/Duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class DukeException extends Exception{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"    public DukeException(String message){"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":7}},{"path":"src/main/java/Duke/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class EmptyDescriptionException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"    public EmptyDescriptionException(String message){"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"        super(\"The description of \u0027\" + message + \"\u0027 should not be empty.\\n\""},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"                +\"Please re-enter your command.\");"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":8}},{"path":"src/main/java/Duke/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"public class EventTask extends Task{"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    private String taskType \u003d \"E\";"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    private LocalDateTime fromDateTime, toDateTime;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    private final String[] formatStyle \u003d {"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyy\","},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyy\","},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyy\","},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyy\","},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-dd\","},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyyHHmm\","},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyyHHmm\","},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyyHHmm\","},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyyHHmm\","},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-ddHHmm\","},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"            \"dd/MM/yyyyHH:mm\","},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"            \"dd.MM.yyyyHH:MM\","},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLL,yyyyHH:mm\","},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"            \"ddLLLyyyyHH:mm\","},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"            \"yyyy-MM-ddHH:mm\","},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    };"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"    EventTask(String taskContent, String time) throws ParseErrorException{"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"        super(taskContent);"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"        boolean success \u003d false;"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"        if (!time.contains(\"/to\"))"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"            throw new ParseErrorException(\"The format of time should be \\\"TIME /to TIME\\\"\");"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"        String fromTime \u003d time.split(\"/to\")[0].replaceAll(\"\\\\s\",\"\");"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"        String toTime \u003d time.split(\"/to\")[1].replaceAll(\"\\\\s\",\"\");"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"        for (String pattern: formatStyle){"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"            try{"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"                this.fromDateTime \u003d LocalDateTime.parse(fromTime, formatter);"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"                success\u003dtrue;"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"            } catch (DateTimeParseException e){"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"                continue;"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"        if (!success)"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"            throw new ParseErrorException(\"Please check your format again.\\n You are suggested to use \\\"yyyy-MM-dd HH:mm\\\"\");"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"        for (String pattern: formatStyle){"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"            try{"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"                this.toDateTime \u003d LocalDateTime.parse(toTime, formatter);"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"                success\u003dtrue;"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"                break;"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"            } catch (DateTimeParseException e){"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"                continue;"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"        if (!success)"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"            throw new ParseErrorException(\"Please check your format again.\\n You are suggested to use \\\"yyyy-MM-dd HH:mm\\\"\");"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getFromDateTime(){"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"        return this.fromDateTime;"},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getToDateTime(){"},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"        return this.toDateTime;"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":"    public String getTaskType(){"},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"        return this.taskType;"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":"        return super.toString()+\" (at: \" + this.fromDateTime.toString()+ \" - \" + this.toDateTime.toString() + \")\";"},{"lineNumber":78,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":79}},{"path":"src/main/java/Duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":12}},{"path":"src/main/java/Duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":" * A GUI for Duke.Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":31}},{"path":"src/main/java/Duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":" * Controller for Duke.MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke.Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":51}},{"path":"src/main/java/Duke/ParseErrorException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class ParseErrorException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"        public ParseErrorException(String message){"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"            super(message);"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":7}},{"path":"src/main/java/Duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"    private TaskList taskList, archiveList;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    public Parser(TaskList taskList, TaskList archiveList){"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        this.archiveList \u003d archiveList;"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"     * Run commands and seperate them according to types"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"     * @param command the command"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"     * @throws DukeException an Duke.DukeException that stores the information to be printed"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"     * @throws Exception"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"    public String runCommand(Command command) throws DukeException, Exception{"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"        Task task;"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"        ArrayList\u003cTask\u003e allTasks;"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"        switch (command) {"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"            case BYE:"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.print(\"Bye. Hope to see you again soon!\"));"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"            case LIST:"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printList(taskList.getTodoList()));"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"            case TODO:"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseTodoTask(command.getTaskContent());"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printTodoTask(task.toString(), taskList.getSize(), taskList.getUndoneCount()));"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"            case DEADLINE:"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseDeadlineTask(command.getTaskContent());"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printDeadlineTask(task.toString(), taskList.getSize(), taskList.getUndoneCount()));"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"            case EVENT:"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseEventTask(command.getTaskContent());"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printEventTask(task.toString(), taskList.getSize(), taskList.getUndoneCount()));"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"            case DONE:"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseDone(command.getTaskContent());"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printDelete(task, taskList.getUndoneCount()));"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"            case DELETE:"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseDelete(command.getTaskContent());"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printDelete(task, taskList.getUndoneCount()));"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"            case FIND:"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"                allTasks \u003d parseFind(command.getTaskContent());"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printFind(allTasks));"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"            case ARCHIVE:"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"                task \u003d parseArchive(command.getTaskContent());"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"                return (Ui.printArchive(task, taskList.getUndoneCount()));"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"            case INVALID:"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"                throw new CommandException(command.echo() + \" is an invalid command.\\n\"+"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"                        \"please try another one.\");"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"            default:"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"                throw new DukeException(\"This default situation should not happen.\""},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"                        + \"Please contact the idiot programmer.\");"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of Duke.TodoTask and pass parsed content to taskList"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed event"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"    public Task parseTodoTask(String content) throws EmptyDescriptionException{"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"        if (content.length() \u003d\u003d 0)"},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":"            throw new EmptyDescriptionException(\"TODO\");"},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"        return taskList.addTodoTask(content);"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of Duke.DeadlineTask and pass parsed content to taskList"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed event"},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object"},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":"     * @throws ParseErrorException"},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":"     * @throws WrongDescriptionException"},{"lineNumber":78,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"    public Task parseDeadlineTask(String content) throws"},{"lineNumber":80,"author":{"gitId":"Raymond0212"},"content":"            EmptyDescriptionException, ParseErrorException, WrongDescriptionException{"},{"lineNumber":81,"author":{"gitId":"Raymond0212"},"content":"        if (content.length() \u003c\u003d 0)"},{"lineNumber":82,"author":{"gitId":"Raymond0212"},"content":"            throw new EmptyDescriptionException(\"DEADLINE\");"},{"lineNumber":83,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"Raymond0212"},"content":"            String[] splitedContent \u003d content.split(\"/by\");"},{"lineNumber":85,"author":{"gitId":"Raymond0212"},"content":"            return taskList.addDeadlineTask(splitedContent[0], splitedContent[1]);"},{"lineNumber":86,"author":{"gitId":"Raymond0212"},"content":"        } catch (ParseErrorException e){"},{"lineNumber":87,"author":{"gitId":"Raymond0212"},"content":"            throw e;"},{"lineNumber":88,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e){"},{"lineNumber":89,"author":{"gitId":"Raymond0212"},"content":"            throw new WrongDescriptionException(\"The format of \u0027DEADLINE\u0027 is:\\n\""},{"lineNumber":90,"author":{"gitId":"Raymond0212"},"content":"                    + \"\u003e deadline TASK /by TIME\\n\""},{"lineNumber":91,"author":{"gitId":"Raymond0212"},"content":"                    + \"Please re-enter your command.\");"},{"lineNumber":92,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":95,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of Duke.EventTask and pass parsed content to taskList"},{"lineNumber":97,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed task"},{"lineNumber":98,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object"},{"lineNumber":99,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":100,"author":{"gitId":"Raymond0212"},"content":"     * @throws ParseErrorException"},{"lineNumber":101,"author":{"gitId":"Raymond0212"},"content":"     * @throws WrongDescriptionException"},{"lineNumber":102,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Raymond0212"},"content":"    public Task parseEventTask(String content) throws"},{"lineNumber":104,"author":{"gitId":"Raymond0212"},"content":"            EmptyDescriptionException, ParseErrorException, WrongDescriptionException{"},{"lineNumber":105,"author":{"gitId":"Raymond0212"},"content":"        if (content.length() \u003c\u003d 0)"},{"lineNumber":106,"author":{"gitId":"Raymond0212"},"content":"            throw new EmptyDescriptionException(\"EVENT\");"},{"lineNumber":107,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"Raymond0212"},"content":"            String[] splitedContent \u003d content.split(\"/at\");"},{"lineNumber":109,"author":{"gitId":"Raymond0212"},"content":"            return taskList.addEventTask(splitedContent[0], splitedContent[1]);"},{"lineNumber":110,"author":{"gitId":"Raymond0212"},"content":"        } catch (ParseErrorException e){"},{"lineNumber":111,"author":{"gitId":"Raymond0212"},"content":"            throw e;"},{"lineNumber":112,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e){"},{"lineNumber":113,"author":{"gitId":"Raymond0212"},"content":"            throw new WrongDescriptionException(\"The format of \u0027EVENT\u0027 is:\\n\""},{"lineNumber":114,"author":{"gitId":"Raymond0212"},"content":"                    + \"\u003e event TASK /at TIME /to TIME\\n\""},{"lineNumber":115,"author":{"gitId":"Raymond0212"},"content":"                    + \"Please re-enter your command.\");"},{"lineNumber":116,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":119,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of a Delete command and ask taskList to delete it."},{"lineNumber":121,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed command"},{"lineNumber":122,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object indicates the requested task"},{"lineNumber":123,"author":{"gitId":"Raymond0212"},"content":"     * @throws DukeException"},{"lineNumber":124,"author":{"gitId":"Raymond0212"},"content":"     * @throws WrongDescriptionException"},{"lineNumber":125,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":126,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"Raymond0212"},"content":"    public Task parseDone(String content) throws"},{"lineNumber":128,"author":{"gitId":"Raymond0212"},"content":"            DukeException, WrongDescriptionException, EmptyDescriptionException{"},{"lineNumber":129,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"Raymond0212"},"content":"            if (content.length() \u003c 1)"},{"lineNumber":131,"author":{"gitId":"Raymond0212"},"content":"                throw new EmptyDescriptionException(\"DONE\");"},{"lineNumber":132,"author":{"gitId":"Raymond0212"},"content":"            int index \u003d Integer.parseInt(content) - 1;"},{"lineNumber":133,"author":{"gitId":"Raymond0212"},"content":"            return taskList.doneTask(index);"},{"lineNumber":134,"author":{"gitId":"Raymond0212"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":135,"author":{"gitId":"Raymond0212"},"content":"            throw new DukeException(\"Sorry, I can\u0027t do that for you.\\n\"+"},{"lineNumber":136,"author":{"gitId":"Raymond0212"},"content":"                    \"You only have \" + String.format(\"%d\",taskList.getSize()) + \" tasks on your list.\");"},{"lineNumber":137,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e) {"},{"lineNumber":138,"author":{"gitId":"Raymond0212"},"content":"            throw new WrongDescriptionException(\"The description of \u0027DONE\u0027 should be an integer.\\n\""},{"lineNumber":139,"author":{"gitId":"Raymond0212"},"content":"                    + \"Please re-enter your command.\");"},{"lineNumber":140,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":143,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of a  command and ask taskList to finish it."},{"lineNumber":145,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed command"},{"lineNumber":146,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object indicates the requested task"},{"lineNumber":147,"author":{"gitId":"Raymond0212"},"content":"     * @throws DukeException"},{"lineNumber":148,"author":{"gitId":"Raymond0212"},"content":"     * @throws WrongDescriptionException"},{"lineNumber":149,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":150,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"Raymond0212"},"content":"    public Task parseDelete(String content) throws"},{"lineNumber":152,"author":{"gitId":"Raymond0212"},"content":"            DukeException, WrongDescriptionException, EmptyDescriptionException{"},{"lineNumber":153,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":154,"author":{"gitId":"Raymond0212"},"content":"            if (content.length() \u003c 1)"},{"lineNumber":155,"author":{"gitId":"Raymond0212"},"content":"                throw new EmptyDescriptionException(\"DELETE\");"},{"lineNumber":156,"author":{"gitId":"Raymond0212"},"content":"            int index \u003d Integer.parseInt(content) - 1;"},{"lineNumber":157,"author":{"gitId":"Raymond0212"},"content":"            return taskList.deleteTask(index);"},{"lineNumber":158,"author":{"gitId":"Raymond0212"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":159,"author":{"gitId":"Raymond0212"},"content":"            throw new DukeException(\"Sorry, I can\u0027t do that for you.\\n\"+"},{"lineNumber":160,"author":{"gitId":"Raymond0212"},"content":"                    \"You only have \" + String.format(\"%d\",taskList.getSize()) + \" tasks on your list.\");"},{"lineNumber":161,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e) {"},{"lineNumber":162,"author":{"gitId":"Raymond0212"},"content":"            throw new WrongDescriptionException(\"The description of \u0027DELETE\u0027 should be an integer.\\n\""},{"lineNumber":163,"author":{"gitId":"Raymond0212"},"content":"                    + \"Please re-enter your command.\");"},{"lineNumber":164,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":167,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Raymond0212"},"content":"     * Parse the content of a Done command and ask taskList to finish it."},{"lineNumber":169,"author":{"gitId":"Raymond0212"},"content":"     * @param content content of parsed command"},{"lineNumber":170,"author":{"gitId":"Raymond0212"},"content":"     * @return a Duke.Task object indicates the requested task"},{"lineNumber":171,"author":{"gitId":"Raymond0212"},"content":"     * @throws DukeException"},{"lineNumber":172,"author":{"gitId":"Raymond0212"},"content":"     * @throws WrongDescriptionException"},{"lineNumber":173,"author":{"gitId":"Raymond0212"},"content":"     * @throws EmptyDescriptionException"},{"lineNumber":174,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"Raymond0212"},"content":"    public Task parseArchive(String content) throws"},{"lineNumber":176,"author":{"gitId":"Raymond0212"},"content":"            DukeException, WrongDescriptionException, EmptyDescriptionException{"},{"lineNumber":177,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"Raymond0212"},"content":"            if (content.length() \u003c 1)"},{"lineNumber":179,"author":{"gitId":"Raymond0212"},"content":"                throw new EmptyDescriptionException(\"ARCHIVE\");"},{"lineNumber":180,"author":{"gitId":"Raymond0212"},"content":"            int index \u003d Integer.parseInt(content) - 1;"},{"lineNumber":181,"author":{"gitId":"Raymond0212"},"content":"            Task tmp \u003d taskList.deleteTask(index);"},{"lineNumber":182,"author":{"gitId":"Raymond0212"},"content":"            archiveList.addTask(tmp);"},{"lineNumber":183,"author":{"gitId":"Raymond0212"},"content":"            return tmp;"},{"lineNumber":184,"author":{"gitId":"Raymond0212"},"content":"        } catch (IndexOutOfBoundsException e){"},{"lineNumber":185,"author":{"gitId":"Raymond0212"},"content":"            throw new DukeException(\"Sorry, I can\u0027t do that for you.\\n\"+"},{"lineNumber":186,"author":{"gitId":"Raymond0212"},"content":"                    \"You only have \" + String.format(\"%d\",taskList.getSize()) + \" tasks on your list.\");"},{"lineNumber":187,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e) {"},{"lineNumber":188,"author":{"gitId":"Raymond0212"},"content":"            throw new WrongDescriptionException(\"The description of \u0027ARCHIVE\u0027 should be an integer.\\n\""},{"lineNumber":189,"author":{"gitId":"Raymond0212"},"content":"                    + \"Please re-enter your command.\");"},{"lineNumber":190,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":193,"author":{"gitId":"Raymond0212"},"content":"    public ArrayList\u003cTask\u003e parseFind(String content){"},{"lineNumber":194,"author":{"gitId":"Raymond0212"},"content":"        return taskList.findTask(content);"},{"lineNumber":195,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":196}},{"path":"src/main/java/Duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"    private String filePath \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    private File taskFile;"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    public Storage(String filePath) {"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"        taskFile \u003d new File(filePath);"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"        if (!taskFile.exists())"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"            taskFile.getParentFile().mkdirs();"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"            try {"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"                boolean isCreated \u003d taskFile.createNewFile();"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"                assert isCreated \u003d\u003d true : \"should create a file here\";"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"            catch (IOException e2){"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"                System.out.println(\"Sorry, an error occurs while loading.\"+"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"                        \" Please contact developers\");"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"    public ArrayList\u003cTask\u003e load(){"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"            Scanner sc \u003d new Scanner(taskFile);"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"            while (sc.hasNext()) {"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"                String[] line \u003d sc.nextLine().split(\"|\");"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"                String taskType \u003d line[0];"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"                Boolean taskState;"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"                Task t \u003d new Task();"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"                if (line[1].compareTo(\"1\")\u003d\u003d0)"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"                    taskState \u003d false;"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"                else"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"                    taskState \u003d true;"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"                switch (taskType) {"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"                    case \"T\":"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"                        t \u003d new TodoTask(line[2]);"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"                    case \"E\":"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"                        t \u003d new EventTask(line[2], line[3]);"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"                    case \"D\":"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"                        t \u003d new DeadlineTask(line[2], line[3]);"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"                taskList.add(t);"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"            return taskList;"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"        } catch (FileNotFoundException e){"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"            System.out.println(\"Sorry, DUKE can\u0027t find saved todo list.\"+"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"                    \" Please contact developers.\");"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"        } catch (ParseErrorException e) {"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"            System.out.println(\"This Duke.ParseErrorException should not happen\"+"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"                    \" Please contact developers\");"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"        return taskList;"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"    public void save(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"            FileWriter fw \u003d new FileWriter(taskFile);"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":"            for (Task t : taskList) {"},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":"                switch (t.getTaskType()) {"},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"                    case \"T\":"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"                        if (t.checkDone())"},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"T|1|\"+t.getContent());"},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"                        else"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"T|0|\"+t.getContent());"},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":78,"author":{"gitId":"Raymond0212"},"content":"                    case \"D\":"},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"                        if (t.checkDone())"},{"lineNumber":80,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"D|1|\"+t.getContent()+\"|\"+t.getDateTime().toString());"},{"lineNumber":81,"author":{"gitId":"Raymond0212"},"content":"                        else"},{"lineNumber":82,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"D|0|\"+t.getContent()+\"|\"+t.getDateTime().toString());"},{"lineNumber":83,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":84,"author":{"gitId":"Raymond0212"},"content":"                    case \"E\":"},{"lineNumber":85,"author":{"gitId":"Raymond0212"},"content":"                        if (t.checkDone())"},{"lineNumber":86,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"E|1|\"+t.getContent()+\"|\"+t.getDateTime().toString());"},{"lineNumber":87,"author":{"gitId":"Raymond0212"},"content":"                        else"},{"lineNumber":88,"author":{"gitId":"Raymond0212"},"content":"                            fw.write(\"E|0|\"+t.getContent()+\"|\"+t.getDateTime().toString());"},{"lineNumber":89,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":90,"author":{"gitId":"Raymond0212"},"content":"                    default:"},{"lineNumber":91,"author":{"gitId":"Raymond0212"},"content":"                        System.out.println(\"Whoops, this should not happen\");"},{"lineNumber":92,"author":{"gitId":"Raymond0212"},"content":"                        break;"},{"lineNumber":93,"author":{"gitId":"Raymond0212"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"Raymond0212"},"content":"                fw.write(\"\\n\");"},{"lineNumber":95,"author":{"gitId":"Raymond0212"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":97,"author":{"gitId":"Raymond0212"},"content":"            fw.close();"},{"lineNumber":98,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Raymond0212"},"content":"        catch (IOException e){"},{"lineNumber":100,"author":{"gitId":"Raymond0212"},"content":"                System.out.println(\"Whoops, an error occurs while saving.\"+"},{"lineNumber":101,"author":{"gitId":"Raymond0212"},"content":"                        \" Please contact developers\");"},{"lineNumber":102,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":104}},{"path":"src/main/java/Duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"public class Task{"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    private String content;        // stores the name of this task"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"    private Boolean closed \u003d false;     //indicates the status of this task"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    private String taskType \u003d \"\";"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    private LocalDateTime fromDateTime, toDateTime;"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    Task(){}"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    Task(String taskName){"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"        this.content \u003d taskName;"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"    Task(String taskName, boolean taskStatus){"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"        this.content \u003d taskName;"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"        this.closed \u003d taskStatus;"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"     * Returns the current status of this task and close current task"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"     * @return status of current task"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"    public Boolean closeTask(){"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"        this.closed \u003d true;"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        return this.closed;"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"     * @return status of current task"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"    public Boolean checkDone(){"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"        return this.closed;"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"    public String getTaskType(){"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"        return this.taskType;"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getDateTime(){"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        return this.dateTime;"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getFromDateTime() { return this.fromDateTime; }"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"    public LocalDateTime getToDateTime() { return this.toDateTime; }"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"    public String getContent(){"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"        return this.content;"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"        return this.content;"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":59}},{"path":"src/main/java/Duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"public class TaskList {"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    private ArrayList\u003cTask\u003e todoList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    public TaskList (ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"        todoList \u003d taskList;"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    public int getSize(){"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"        return todoList.size();"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"     * Returns the number of unfinished tasks in the todoList"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"     * @return number of unfinished tasks"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"    public int getUndoneCount() {"},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"        int undoneCount \u003d 0;"},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"        for (Task t:todoList){"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"            if (!t.checkDone())"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"                undoneCount++;"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"        return undoneCount;"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"     * Take in a task, add it to the totoList and returns it."},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"     * @param task a task object"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"     * @return the task itself"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"    public Task addTask(Task task) {"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"        this.todoList.add(task);"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"     * Create a new Duke.TodoTask, add it to the totoList and returns it."},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of Duke.TodoTask"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"     * @return a newly created Duke.Task"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"    public Task addTodoTask(String taskContent) {"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"        Task task \u003d new TodoTask(taskContent);"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"        this.todoList.add(task);"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"     * Create a new Duke.DeadlineTask, add it to the totoList and returns it."},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of Duke.DeadlineTask"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":"     * @param time deadline of Duke.DeadlineTask"},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"     * @return a newly created Duke.Task"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"     * @throws ParseErrorException"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"    public Task addDeadlineTask(String taskContent, String time) throws ParseErrorException{"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"        Task task \u003d new DeadlineTask(taskContent, time);"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"        this.todoList.add(task);"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"     * Create a new Duke.EventTask, add it to the totoList and returns it."},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of Duke.EventTask"},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"     * @param time deadline of Duke.EventTask"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":"     * @return a newly created Duke.Task"},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":"     * @throws ParseErrorException"},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"    public Task addEventTask(String taskContent, String time) throws ParseErrorException{"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"        Task task \u003d new EventTask(taskContent, time);"},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":"        this.todoList.add(task);"},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":78,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"     * Change a task from undone to done"},{"lineNumber":80,"author":{"gitId":"Raymond0212"},"content":"     * @param index index of the requested task"},{"lineNumber":81,"author":{"gitId":"Raymond0212"},"content":"     * @return the task that was changed"},{"lineNumber":82,"author":{"gitId":"Raymond0212"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":83,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Raymond0212"},"content":"    public Task doneTask(int index) throws IndexOutOfBoundsException{"},{"lineNumber":85,"author":{"gitId":"Raymond0212"},"content":"        Task task \u003d todoList.get(index);"},{"lineNumber":86,"author":{"gitId":"Raymond0212"},"content":"        task.closeTask();"},{"lineNumber":87,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":88,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":90,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Raymond0212"},"content":"     * Delete a task of index from todoList"},{"lineNumber":92,"author":{"gitId":"Raymond0212"},"content":"     * @param index ndex of the requested task"},{"lineNumber":93,"author":{"gitId":"Raymond0212"},"content":"     * @return the task that need to be deleted"},{"lineNumber":94,"author":{"gitId":"Raymond0212"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":95,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Raymond0212"},"content":"    public Task deleteTask(int index) throws IndexOutOfBoundsException{"},{"lineNumber":97,"author":{"gitId":"Raymond0212"},"content":"        Task task \u003d todoList.get(index);"},{"lineNumber":98,"author":{"gitId":"Raymond0212"},"content":"        todoList.remove(index);"},{"lineNumber":99,"author":{"gitId":"Raymond0212"},"content":"        return task;"},{"lineNumber":100,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":102,"author":{"gitId":"Raymond0212"},"content":"    public ArrayList\u003cTask\u003e findTask(String content) {"},{"lineNumber":103,"author":{"gitId":"Raymond0212"},"content":"        ArrayList\u003cTask\u003e allMatches \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitId":"Raymond0212"},"content":"        for (Task task:todoList) {"},{"lineNumber":105,"author":{"gitId":"Raymond0212"},"content":"            if (task.getContent().contains(content))"},{"lineNumber":106,"author":{"gitId":"Raymond0212"},"content":"                allMatches.add(task);"},{"lineNumber":107,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":109,"author":{"gitId":"Raymond0212"},"content":"        return allMatches;"},{"lineNumber":110,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":112,"author":{"gitId":"Raymond0212"},"content":"    public ArrayList\u003cTask\u003e getTodoList() {"},{"lineNumber":113,"author":{"gitId":"Raymond0212"},"content":"        return todoList;"},{"lineNumber":114,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":116,"author":{"gitId":"Raymond0212"},"content":"    public Task get(int index){"},{"lineNumber":117,"author":{"gitId":"Raymond0212"},"content":"        return todoList.get(index);"},{"lineNumber":118,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":119}},{"path":"src/main/java/Duke/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class TodoTask extends Task{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"    private String taskType \u003d \"T\";"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    TodoTask(String taskContent){"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"        super(taskContent);"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    public String getTaskType(){"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        return this.taskType;"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":13}},{"path":"src/main/java/Duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":" * Represents a user interface and is in charge of printing contents to screen"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    public void welcome(){"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        String logo \u003d   \"_|_|_|_|_|    _|_|                _|_|_|      _|_|     _|  \\n\" +"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"                        \"    _|      _|    _|              _|    _|  _|    _|   _|  \\n\" +"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"                        \"    _|      _|    _|  _|_|_|_|_|  _|    _|  _|    _|   _|  \\n\" +"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"                        \"    _|      _|    _|              _|    _|  _|    _|       \\n\" +"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"                        \"    _|        _|_|                _|_|_|      _|_|     _|  \";"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"        System.out.println(\"This is a Duke.Duke Project.\\n\");"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"        System.out.println(\"What you are going to do today?\");"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":21,"author":{"gitId":"Raymond0212"},"content":"    /**Reads incoming commands and use a parser to pase it."},{"lineNumber":22,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"     * @param parser a parser used to parse incoming commands"},{"lineNumber":24,"author":{"gitId":"Raymond0212"},"content":"     * @return the User interface itself"},{"lineNumber":25,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Raymond0212"},"content":"    public String read(String input, Parser parser){"},{"lineNumber":27,"author":{"gitId":"Raymond0212"},"content":"        Command command \u003d Command.INIT;"},{"lineNumber":28,"author":{"gitId":"Raymond0212"},"content":"        command \u003d Command.getCommand(input);"},{"lineNumber":29,"author":{"gitId":"Raymond0212"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Raymond0212"},"content":"            return parser.runCommand(command);"},{"lineNumber":31,"author":{"gitId":"Raymond0212"},"content":"        } catch (Exception e){"},{"lineNumber":32,"author":{"gitId":"Raymond0212"},"content":"            return showExceptionContent(e.getMessage());"},{"lineNumber":33,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":36,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Raymond0212"},"content":"     * Prints all the tasks stored in memory"},{"lineNumber":38,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Raymond0212"},"content":"     * @param todoList a list contains all the tasks"},{"lineNumber":40,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Raymond0212"},"content":"    static public String printList(ArrayList\u003cTask\u003e todoList){"},{"lineNumber":42,"author":{"gitId":"Raymond0212"},"content":"        if (todoList.size() \u003d\u003d 0)"},{"lineNumber":43,"author":{"gitId":"Raymond0212"},"content":"            return \"There is no task in your list now.\";"},{"lineNumber":44,"author":{"gitId":"Raymond0212"},"content":"        String tmp\u003d\"\";"},{"lineNumber":45,"author":{"gitId":"Raymond0212"},"content":"        for (int i \u003d 0; i \u003c todoList.size(); i++){"},{"lineNumber":46,"author":{"gitId":"Raymond0212"},"content":"            Task task \u003d todoList.get(i);"},{"lineNumber":47,"author":{"gitId":"Raymond0212"},"content":"            if (task.checkDone())"},{"lineNumber":48,"author":{"gitId":"Raymond0212"},"content":"                tmp \u003d tmp + print(i+1 + \".[\"+task.getTaskType()+\"][X] \" + task.toString());"},{"lineNumber":49,"author":{"gitId":"Raymond0212"},"content":"            else"},{"lineNumber":50,"author":{"gitId":"Raymond0212"},"content":"                tmp \u003d tmp + print(i+1 + \".[\"+task.getTaskType()+\"][ ] \" + task.toString())+ \"\\n\";"},{"lineNumber":51,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":53,"author":{"gitId":"Raymond0212"},"content":"        return tmp;"},{"lineNumber":54,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":56,"author":{"gitId":"Raymond0212"},"content":"    static public String print(String str){"},{"lineNumber":57,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":59,"author":{"gitId":"Raymond0212"},"content":"        for (String s:str.split(\"\\n\")) {"},{"lineNumber":60,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp + s + \"\\n\";"},{"lineNumber":61,"author":{"gitId":"Raymond0212"},"content":"            System.out.println(\"    \" + s);"},{"lineNumber":62,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":64,"author":{"gitId":"Raymond0212"},"content":"        assert tmp.compareTo(\"\")!\u003d0: \"An empty string is passed to print()\";"},{"lineNumber":65,"author":{"gitId":"Raymond0212"},"content":"        return tmp;"},{"lineNumber":66,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":68,"author":{"gitId":"Raymond0212"},"content":"    public String showExceptionContent(String err){"},{"lineNumber":69,"author":{"gitId":"Raymond0212"},"content":"        return print(err);"},{"lineNumber":70,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":72,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Raymond0212"},"content":"     * Print TodoTasks to screen"},{"lineNumber":74,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of todo task"},{"lineNumber":76,"author":{"gitId":"Raymond0212"},"content":"     * @param size total number of tasks left in the list"},{"lineNumber":77,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":78,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Raymond0212"},"content":"    static public String printTodoTask(String taskContent, int size, int undoneCount){"},{"lineNumber":80,"author":{"gitId":"Raymond0212"},"content":"        return (Ui.print(\"The following task has been added to your list:\")+"},{"lineNumber":81,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(\"  [T][ ] \" + taskContent)+"},{"lineNumber":82,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"Now you have %d tasks in your list.\", size))+"},{"lineNumber":83,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"There are %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":84,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":86,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Raymond0212"},"content":"     * Print DeadlineTasks to screen"},{"lineNumber":88,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of deadline task"},{"lineNumber":90,"author":{"gitId":"Raymond0212"},"content":"     * @param size total number of tasks left in the list"},{"lineNumber":91,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":92,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Raymond0212"},"content":"    static public String printDeadlineTask(String taskContent, int size, int undoneCount){"},{"lineNumber":94,"author":{"gitId":"Raymond0212"},"content":"        return (Ui.print(\"The following task has been added to your list:\")+"},{"lineNumber":95,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(\"  [D][ ] \" + taskContent)+"},{"lineNumber":96,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"Now you have %d tasks in your list.\", size))+"},{"lineNumber":97,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"There are %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":98,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":100,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Raymond0212"},"content":"     * Print EventTasks to screen"},{"lineNumber":102,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"Raymond0212"},"content":"     * @param taskContent content of event task"},{"lineNumber":104,"author":{"gitId":"Raymond0212"},"content":"     * @param size total number of tasks left in the list"},{"lineNumber":105,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":106,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Raymond0212"},"content":"    static public String printEventTask(String taskContent, int size, int undoneCount){"},{"lineNumber":108,"author":{"gitId":"Raymond0212"},"content":"        return (Ui.print(\"The following task has been added to your list:\")+"},{"lineNumber":109,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(\"  [E][ ] \" + taskContent)+"},{"lineNumber":110,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"Now you have %d tasks in your list.\", size))+"},{"lineNumber":111,"author":{"gitId":"Raymond0212"},"content":"                Ui.print(String.format(\"There are %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":112,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":114,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"Raymond0212"},"content":"     * Inform the used a task is deleted and print the information on screen"},{"lineNumber":116,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"Raymond0212"},"content":"     * @param task the deleted task"},{"lineNumber":118,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":119,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Raymond0212"},"content":"    static public String printDelete(Task task, int undoneCount) {"},{"lineNumber":121,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d Ui.print(\"Nice! I\u0027ve deleted following task:\");"},{"lineNumber":122,"author":{"gitId":"Raymond0212"},"content":"        if (task.checkDone())"},{"lineNumber":123,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp + Ui.print(\"  [\"+task.getTaskType()+\"][X] \" + task.toString());"},{"lineNumber":124,"author":{"gitId":"Raymond0212"},"content":"        else"},{"lineNumber":125,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp +Ui.print(\"  [\"+task.getTaskType()+\"][ ] \" + task.toString());"},{"lineNumber":126,"author":{"gitId":"Raymond0212"},"content":"        return (tmp + Ui.print(String.format(\"Now you have %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":127,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":129,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"Raymond0212"},"content":"     * Inform the used a task is archived and print additional information on screen"},{"lineNumber":131,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"Raymond0212"},"content":"     * @param task the deleted task"},{"lineNumber":133,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":134,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"Raymond0212"},"content":"    static public String printArchive(Task task, int undoneCount) {"},{"lineNumber":136,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d Ui.print(\"Nice! I\u0027ve achived following task:\");"},{"lineNumber":137,"author":{"gitId":"Raymond0212"},"content":"        if (task.checkDone())"},{"lineNumber":138,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp + Ui.print(\"  [\"+task.getTaskType()+\"][X] \" + task.toString());"},{"lineNumber":139,"author":{"gitId":"Raymond0212"},"content":"        else"},{"lineNumber":140,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp +Ui.print(\"  [\"+task.getTaskType()+\"][ ] \" + task.toString());"},{"lineNumber":141,"author":{"gitId":"Raymond0212"},"content":"        return (tmp + Ui.print(String.format(\"Now you have %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":142,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":144,"author":{"gitId":"Raymond0212"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"Raymond0212"},"content":"     * Inform the used a task is done and print the information on screen"},{"lineNumber":146,"author":{"gitId":"Raymond0212"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"Raymond0212"},"content":"     * @param task the finished task"},{"lineNumber":148,"author":{"gitId":"Raymond0212"},"content":"     * @param undoneCount number of tasks in the list that has not been done."},{"lineNumber":149,"author":{"gitId":"Raymond0212"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"Raymond0212"},"content":"    static public String printDone(Task task, int undoneCount) {"},{"lineNumber":151,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d Ui.print(\"Nice! I\u0027ve marked following task as done:\");"},{"lineNumber":152,"author":{"gitId":"Raymond0212"},"content":"        if (task.checkDone())"},{"lineNumber":153,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp + Ui.print(\"  [\"+task.getTaskType()+\"][X] \" + task.toString());"},{"lineNumber":154,"author":{"gitId":"Raymond0212"},"content":"        else"},{"lineNumber":155,"author":{"gitId":"Raymond0212"},"content":"            tmp \u003d tmp + Ui.print(\"  [\"+task.getTaskType()+\"][ ] \" + task.toString());"},{"lineNumber":156,"author":{"gitId":"Raymond0212"},"content":"        return (tmp + Ui.print(String.format(\"Now you have %d tasks waiting to be done.\", undoneCount)));"},{"lineNumber":157,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":159,"author":{"gitId":"Raymond0212"},"content":"    static public String printFind(ArrayList\u003cTask\u003e allMatches){"},{"lineNumber":160,"author":{"gitId":"Raymond0212"},"content":"        String tmp \u003d Ui.print(\"Here are the matching tasks in your list:\");"},{"lineNumber":161,"author":{"gitId":"Raymond0212"},"content":"        for (int i \u003d 0; i \u003c allMatches.size(); i++){"},{"lineNumber":162,"author":{"gitId":"Raymond0212"},"content":"            Task task \u003d allMatches.get(i);"},{"lineNumber":163,"author":{"gitId":"Raymond0212"},"content":"            if (task.checkDone())"},{"lineNumber":164,"author":{"gitId":"Raymond0212"},"content":"                tmp \u003d tmp + Ui.print(String.format(\"%d.[\", i+1)+task.getTaskType()+\"][X] \" + task.toString());"},{"lineNumber":165,"author":{"gitId":"Raymond0212"},"content":"            else"},{"lineNumber":166,"author":{"gitId":"Raymond0212"},"content":"                tmp \u003d tmp + Ui.print(String.format(\"%d.[\", i+1)+task.getTaskType()+\"][ ] \" + task.toString());"},{"lineNumber":167,"author":{"gitId":"Raymond0212"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"Raymond0212"},"content":"        return tmp;"},{"lineNumber":169,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":170}},{"path":"src/main/java/Duke/WrongDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"public class WrongDescriptionException extends DukeException{"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"    public WrongDescriptionException(String message){"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":7}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Raymond0212":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Raymond0212":19}},{"path":"src/test/java/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"class DeadlineTaskTest {"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":4}},{"path":"src/test/java/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"import duke.EventTask;"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":"import duke.ParseErrorException;"},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"public class EventTaskTest{"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"    public void getFromDateTimeTest() throws ParseErrorException {"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"        assertEquals(\"2020-01-01\", new EventTask(\"Hello\", \"2020-01-01\"));"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"}"}],"authorContributionMap":{"Raymond0212":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Raymond0212"},"content":"todo t1"},{"lineNumber":2,"author":{"gitId":"Raymond0212"},"content":"todo t2"},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"deadline d1 /by 02/01/2020 13:00"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":"deadline d2 /by 2020-01-01 13:00"},{"lineNumber":5,"author":{"gitId":"Raymond0212"},"content":"event e1 /at 01 Jan, 2020 13:00 /to 02/01/2020 13:00"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Raymond0212"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"Raymond0212"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Raymond0212"},"content":"hello"},{"lineNumber":10,"author":{"gitId":"Raymond0212"},"content":"done 100"},{"lineNumber":11,"author":{"gitId":"Raymond0212"},"content":"deadline 1"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"deadline"},{"lineNumber":13,"author":{"gitId":"Raymond0212"},"content":"event"},{"lineNumber":14,"author":{"gitId":"Raymond0212"},"content":"event 1"},{"lineNumber":15,"author":{"gitId":"Raymond0212"},"content":"delete -1"},{"lineNumber":16,"author":{"gitId":"Raymond0212"},"content":"delete"},{"lineNumber":17,"author":{"gitId":"Raymond0212"},"content":"delete 1"},{"lineNumber":18,"author":{"gitId":"Raymond0212"},"content":"event t5 /at 1 Jan, 2020 13:00 /to 2/1/2020, 2020 13:00"},{"lineNumber":19,"author":{"gitId":"Raymond0212"},"content":"bye"}],"authorContributionMap":{"Raymond0212":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Raymond0212"},"content":"SET MY_PATH\u003dC:\\Users\\cs623\\Docs\\GitHub\\ip"},{"lineNumber":4,"author":{"gitId":"Raymond0212"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"Raymond0212"},"content":"if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"Raymond0212"},"content":"javac  -cp \"%MY_PATH%\\src\\main\\java\\duke.duke\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\duke.duke\\duke.duke.java\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"Raymond0212"},"content":"java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"Raymond0212"},"content":"FC /w ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Raymond0212":6,"-":17}}]
