[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Shows the full list of Tasks saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `list` - Shows the full list of Tasks saved.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke will reply with a list of Tasks. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "1. [T] [✓] Todo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "2. [D] [✓] Deadline (by: Oct 20 2020)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "3. [E] [✗] Event (at: Nov 5 2020)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Finding Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can find Tasks that have names containing a specified keyword. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "The results are numbered according to their index in the full list, so the same indexes can be used for other commands. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `find {keyword}` - Finds all Tasks that contain {keyword} in the name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": " "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`find deadline`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "2. [D] [✓] Deadline (by: Oct 20 2020)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Marking Tasks as completed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can mark Tasks as completed based on the index in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "If the specified Task is already completed, Duke will mark it as incomplete. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `done {index}` - Marks the task at the specified index as complete or incomplete."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```[E] [✓] Event (at: Nov 5 2020)```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can delete Tasks based on the index in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `delete {index}` - Deletes the task at the specified index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Deleted [E] [✓] Event (at: Nov 5 2020).```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Todo task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "A Todo task has no date or deadline, and only needs the user to specify the name. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `todo {name}` - Adds a new Todo task with the given name. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`todo Do post-lecture quiz`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [T] [✗] Do post-lecture quiz.```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Event task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "An Event task has a name and a date (in YYYY-MM-DD)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `event {name} /at {YYYY-MM-DD}` - Adds a new Event task with the given name and date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`event Results release /at 2020-09-16`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [E] [✗] Results release (at: Sep 16 2020).```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Deadline task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "A Deadline task has a name and a date (in YYYY-MM-DD)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `deadline {name} /by {YYYY-MM-DD}` - Adds a new Deadline task with the given name and date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`deadline Lab submission /by 2020-09-16`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [D] [✗] Lab submission (at: Sep 16 2020).```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Exiting Duke"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Closes the program window. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `bye` - Closes the program. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Goodbye```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Help menu"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Shows the help guide. Can be called with a specific command to information on that command, or with no arguments to"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": " show information about the help command. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Can be called with `commands` as an argument by using `help commands` to show the full list of commands. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `help [{command}]` - Shows information about the command (if any), otherwise shows instructions on how to use the help command.  "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```help delete```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete \u003cindex\u003e - Deletes the task at the index of the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"delete 1\" -\u003e Removes the first entry of the list. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jazerler": 131,
      "-": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            srcDirs \u003d [\"src/main\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            srcDirs \u003d [\"src/test\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 30,
      "-": 44
    }
  },
  {
    "path": "data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[D],, 1,, Submit CS2100 Lab,, Sep 18 2020,, "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[T],, 0,, Stuff,, "
      }
    ],
    "authorContributionMap": {
      "jazerler": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Shows the full list of Tasks saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `list` - Shows the full list of Tasks saved.  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke will reply with a list of Tasks. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "1. [T] [✓] Todo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "2. [D] [✓] Deadline (by: Oct 20 2020)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "3. [E] [✗] Event (at: Nov 5 2020)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Finding Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can find Tasks that have names containing a specified keyword. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "The results are numbered according to their index in the full list, so the same indexes can be used for other commands. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `find {keyword}` - Finds all Tasks that contain {keyword} in the name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`find deadline`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "2. [D] [✓] Deadline (by: Oct 20 2020)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Marking Tasks as completed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can mark Tasks as completed based on the index in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "If the specified Task is already completed, Duke will mark it as incomplete. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `done {index}` - Marks the task at the specified index as complete or incomplete."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```[E] [✓] Event (at: Nov 5 2020)```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Duke can delete Tasks based on the index in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `delete {index}` - Deletes the task at the specified index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`delete 3`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Deleted [E] [✓] Event (at: Nov 5 2020).```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Todo task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "A Todo task has no date or deadline, and only needs the user to specify the name. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `todo {name}` - Adds a new Todo task with the given name. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`todo Do post-lecture quiz`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [T] [✗] Do post-lecture quiz.```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Event task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "An Event task has a name and a date (in YYYY-MM-DD)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `event {name} /at {YYYY-MM-DD}` - Adds a new Event task with the given name and date."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`event Results release /at 2020-09-16`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [E] [✗] Results release (at: Sep 16 2020).```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Adding a Deadline task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "A Deadline task has a name and a date (in YYYY-MM-DD)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `deadline {name} /by {YYYY-MM-DD}` - Adds a new Deadline task with the given name and date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`deadline Lab submission /by 2020-09-16`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```Added [D] [✗] Lab submission (at: Sep 16 2020).```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Exiting Duke"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Closes the program window. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `bye` - Closes the program. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Goodbye"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### Help menu"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Shows the help guide. Can be called with a specific command to information on that command, or with no arguments to"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": " show information about the help command. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Can be called with `commands` as an argument by using `help commands` to show the full list of commands. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazerler"
        },
        "content": "### `help [{command}]` - Shows information about the command (if any), otherwise shows instructions on how to use the help command.  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```help delete```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete \u003cindex\u003e - Deletes the task at the index of the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazerler"
        },
        "content": "   "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"delete 1\" -\u003e Removes the first entry of the list. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazerler"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jazerler": 127,
      "-": 13
    }
  },
  {
    "path": "src/main/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Launcher class for the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 12,
      "-": 4
    }
  },
  {
    "path": "src/main/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an action input by the user to be executed by the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns true only if the program should terminate upon receiving this Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Default: false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true if the program should exit, false otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to carry out the operation as written in the respective subclass\u0027s implementation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to perform the operations on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the program was unable to execute the action."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public abstract String execute(Storage storage) throws DukeExecutionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 29
    }
  },
  {
    "path": "src/main/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Deadline object to the list of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DeadlineCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the input string to be parsed into the arguments for constructing a Deadline object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the arguments from the input string are invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DeadlineCommand(String input) throws DukeArgumentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !input.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d input.split(\"/by \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String name \u003d args[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(args[1].trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            deadline \u003d new Deadline(name, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Insufficient arguments provided for Deadline.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DateTimeParseException de) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Deadline date/time could not be parsed.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Deadline object to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Deadline object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"Added %s.\", deadline.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 55
    }
  },
  {
    "path": "src/main/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to delete a Task object at the given index from the list of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param args the input string to be parsed for the index of the list to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the index provided in the input string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DeleteCommand(String args) throws DukeArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !args.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            int index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.index \u003d index - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Invalid index\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to delete the Task object at the index of the Storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object in which to delete the Task at the index given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the index is out of range, or the program runs into an IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"Deleted %s.\", storage.delete(index).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(String.format(\"Could not execute command due to the index %d being out \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"of range\", index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIoException die) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 49
    }
  },
  {
    "path": "src/main/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to mark a Task object at the given index from the list of Tasks as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param args the input string to be parsed for the index of the list to be marked as complete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the index provided in the input string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DoneCommand(String args) throws DukeArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !args.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            int index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.index \u003d index - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Invalid index\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to mark the Task object at the index of the Storage object as completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object in which to mark the Task at the index given as complete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the index is out of range, or the program runs into an IOException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(storage.complete(index).toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeArgumentException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(String.format(\"Could not execute command due to the index %d being out \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"of range\", index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIoException die) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 48
    }
  },
  {
    "path": "src/main/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Event object to the list of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a EventCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the input string to be parsed into the arguments for constructing a Event object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the arguments from the input string are invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public EventCommand(String input) throws DukeArgumentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !input.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d input.split(\"/at \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String name \u003d args[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(args[1].trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.event \u003d new Event(name, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Insufficient arguments provided for Event.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DateTimeParseException de) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Event date/time could not be parsed.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Event object to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Event object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(event);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"Added %s.\", event.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 55
    }
  },
  {
    "path": "src/main/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to tell the program to terminate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to perform the operations on."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Do nothing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return \"Goodbye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns true to tell the program to terminate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 28
    }
  },
  {
    "path": "src/main/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents a request from the user to find tasks containing a keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the text to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !input.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        keyword \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to find all Tasks containing the keyword within the Storage\u0027s list,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then returns it as a string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to search for the keyword in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        TaskList tasks \u003d storage.find(keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return \"No results found.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String result \u003d \"Your search results:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks.list()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                result \u003d result.concat(String.format(\"%d. %s\\n\", storage.indexOf(t) + 1, t.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 42
    }
  },
  {
    "path": "src/main/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // Command types"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"commands\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private String helpType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a HelpCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input Optional argument for the help command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public HelpCommand(String... input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (input.length \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            helpType \u003d input[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            helpType \u003d HELP;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String reply \u003d \"Welcome to Duke\u0027s Help System!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                + \"To find a list of all commands, type \\\"help commands\\\".\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                + \"To find out more about a command, type \\\"help \u003cname of command\u003e\\\".\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                + \"    Example: \\\"help list\\\" will return the readme for the List command.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        switch (helpType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"bye - Closes the program.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"list - Shows the list of all Tasks added.\\n\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"list\\\" -\u003e Shows all the Tasks added. \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"find \u003ckeyword\u003e - Shows a list of Tasks which have the keyword.\\n\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"find task\\\" -\u003e Returns a list of Tasks with the word \\\"task\\\" in their name.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"done \u003cindex\u003e - Marks the task at the index of the list as completed.\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"done 1\\\" -\u003e Marks the first entry of the list as completed.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"delete \u003cindex\u003e - Deletes the task at the index of the list.\\n\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"delete 1\\\" -\u003e Removes the first entry of the list.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"deadline \u003cname\u003e /by \u003cYYYY-MM-DD\u003e -\u003e Adds a Deadline Task with this name at this time.\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"deadline Submission /by 2020-09-05\\\"\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"-\u003e Adds a Deadline Task with the name \\\"Submssion\\\" with the date\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \" 5th September 2020\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"event \u003cname\u003e /at \u003cYYYY-MM-DD\u003e -\u003e Adds an Event Task with this name at this time.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage: \\\"event Concert /at 2020-09-05\\\" -\u003e Adds an Event Task with the name \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"\\\"Concert\\\" with the date\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \" 5th September 2020 \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"todo \u003cname\u003e - Adds a Todo Task with this name.\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"Example usage:\\n \\\"todo Do homework\\\" -\u003e Adds a Todo task with the name \\\"Do Homework\\\".\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            reply \u003d \"Command List:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    list - Shows the list of all Tasks added.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    find \u003ckeyword\u003e - Shows a list of Tasks which have the keyword.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    done \u003cindex\u003e - Marks the task at the index of the list as completed.\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    delete \u003cindex\u003e - Deletes the task at the index of the list.\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    todo \u003cname\u003e - Adds a Todo Task with this name.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    event \u003cname\u003e /at \u003cYYYY-MM-DD\u003e - Adds an Event Task with this name at this time.\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    deadline \u003cname\u003e /by \u003cYYYY-MM-DD\u003e - Adds a Deadline Task with this name at this time.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"    bye - Closes the program.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            // HELP is also included here."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            // Does not modify the reply as initialised already."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 97
    }
  },
  {
    "path": "src/main/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to print out the list of Tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Prints out the entire list in the storage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The duke.storage.Storage object from which to print the list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return storage.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 20
    }
  },
  {
    "path": "src/main/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Todo object to the list of Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Todo todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a TodoCommand/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name The name of the Todo object to be created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public TodoCommand(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert !name.isBlank() : \"Input is empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.todo \u003d new Todo(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Todo object to the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Todo object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(todo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"Added %s.\", todo.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 41
    }
  },
  {
    "path": "src/main/duke/exception/DukeArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Exception to be thrown if the arguments for a command are not valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeArgumentException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeArgumentException(String error) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "src/main/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * General Exception class for all the Exceptions from Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "src/main/duke/exception/DukeExecutionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Exception to be thrown if an error occurred in executing a Command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeExecutionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeExecutionException(String error) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "src/main/duke/exception/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Exception to be thrown if an error occurs in the IO of execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeIoException(String error) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "src/main/duke/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Utility class for reading input and files"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public final class CommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Converts input text into the appropriate command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the input text from the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Command to be executed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the input text did not match any existing Command types."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static Command parseCommand(String text) throws DukeArgumentException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] parsedInput \u003d text.split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            switch (parsedInput[0].toLowerCase()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new FindCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new DoneCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new DeleteCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new TodoCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new EventCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                return new DeadlineCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                if (parsedInput.length \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    return new HelpCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    return new HelpCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                throw new DukeArgumentException(\"Command did not match any known commands.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Insufficient arguments for the command. Try typing \\\"help\\\" for a list \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    + \"of commands\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 73
    }
  },
  {
    "path": "src/main/duke/parser/FileParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class FileParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String REGEX_SEPARATOR \u003d \",, \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Reads a String and splits it to create a new Task based on its type and values."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Format: Type | Completed | Name | Time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Example: \"[D],, 1,, deadline,, 23-08-2020\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param line the String from the csv to be parsed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return A duke.Tasks.Task object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException if the line does not follow the given regex."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static Task parseLine(String line) throws DukeIoException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] values \u003d line.split(REGEX_SEPARATOR);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        switch (values[0]) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[T]\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Todo(values[2], values[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[E]\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Event(values[2], LocalDate.parse(values[3], DateTimeFormatter.ofPattern(\"MMM d yyyy\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    values[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[D]\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Deadline(values[2], LocalDate.parse(values[3], DateTimeFormatter.ofPattern(\"MMM d yyyy\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    values[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIoException(String.format(\"The line \u0027%s\u0027 could not be parsed.\", line));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Converts a Task into a String format for writing to disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the Task to be converted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the String representation of the Task to be used in the data file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static String convertTaskToSaveFormat(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d task.toSaveFormatArray();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assert (args.length \u003e\u003d 3) : \"formatArray of Task is not of the correct length\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        for (String s : args) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            result \u003d result.concat(String.format(\"%s%s\", s, REGEX_SEPARATOR));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return result + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 56
    }
  },
  {
    "path": "src/main/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.FileParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Class that encapsulates the saving and reading of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param path The path to read/write the file to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException if it is unable to create the file or if an IO error occurs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Storage(String path) throws DukeIoException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            file \u003d new File(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            file.createNewFile(); // makes new file only if not already existing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            assert(file.exists()) : \"File does not exist\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            BufferedReader csvReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            // Add all the parsed lines to the ArrayList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            while ((line \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                tasks.add(FileParser.parseLine(line));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIoException(\"Could not create Storage object due to IO error.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Adds the given Task to the list of tasks and appends the new task to the data file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the Task to be added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws IOException if an IOException occurs during writing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void add(Task task) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // TODO: Catch IOException into DukeIoException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String taskString \u003d FileParser.convertTaskToSaveFormat(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file, true));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.append(taskString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.flush();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Removes the task at the given index from the TaskList,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then clears the existing file and rewrites the contents of the list back to it."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index The index of the task to be removed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return The deleted task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException                if an IOException occurs during writing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the given index is out of range."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task delete(int index) throws DukeIoException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        rewrite();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Marks the task at the given index of the TaskList as completed,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then clears the existing file and rewrites the contents of the list back to it."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index the index of the Task to be marked as completed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Task that was marked as completed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException       if an error occurs during write to file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the index given is out of bounds"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task complete(int index) throws DukeIoException, DukeArgumentException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Task completed \u003d tasks.complete(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        rewrite();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the list of Tasks whose name contains the given keyword."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param keyword the keyword in lower-case to be searched for"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return TaskList containing only matching tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public TaskList find(String keyword) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        for (Task t : tasks.list()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            if (t.getName().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                results.add(t);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the index of the Task within the TaskList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param t The Task to search for"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the index of the Task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public int indexOf(Task t) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.indexOf(t);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Clears the existing file and rewrites the contents of the list to the file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException if there are issues with the IO operations"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private void rewrite() throws DukeIoException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            new FileWriter(file, false).close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks.list()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                bw.append(FileParser.convertTaskToSaveFormat(t));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIoException(\"IO Exception when writing to file. \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 142
    }
  },
  {
    "path": "src/main/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an ArrayList of Tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    protected final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Removes the object from the ArrayList at the given index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index the index to delete from"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Task that was removed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Adds the Task to the ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the ArrayList of tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the ArrayList of all the tasks stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public ArrayList\u003cTask\u003e list() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns whether or not the list is currently empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true if tasks is empty, false otherwise"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Marks the Task in the ArrayList at the given index as completed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index the index to mark as complete"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Task that was completed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task complete(int index) throws DukeArgumentException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Task toComplete \u003d tasks.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            toComplete.setCompleted();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return toComplete;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(String.format(\"Array index %d is out of bounds.\", index));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the index of the Task within the TaskList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param t The Task to search for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the index of the Task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public int indexOf(Task t) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.indexOf(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return \"The list is empty.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                result \u003d result.concat(String.format(\"%d. %s\\n\", index, t.toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 98
    }
  },
  {
    "path": "src/main/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final LocalDate time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name the name for this Deadline task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param time the time for the deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Deadline(String name, LocalDate time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Deadline object with the ability to set completion status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name      the name for this Deadline task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param time      the time for the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param completed the completion status of this Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Deadline(String name, LocalDate time, String completed) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[D] %s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toSaveFormatArray() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[4];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[D]\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[3] \u003d time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 48
    }
  },
  {
    "path": "src/main/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final LocalDate time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name the name for this Event task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param time the time for the event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Event(String name, LocalDate time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Event object with the ability to set completion status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name      the name for this Event task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param time      the time for the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param completed the completion status of this Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Event(String name, LocalDate time, String completed) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[E] %s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toSaveFormatArray() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[4];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[E]\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[3] \u003d time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 49
    }
  },
  {
    "path": "src/main/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    protected Boolean completed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Task(String name, String completed) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.completed \u003d completed.equals(\"1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[\\u2713] %s\", name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[\\u2717] %s\", name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        completed \u003d !completed;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Converts the task into an array of the type, completion status, and name in Strings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return Array of Task details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toSaveFormatArray() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[3];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[T]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 48
    }
  },
  {
    "path": "src/main/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Todo(String name, String completed) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[T] %s\", super.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 18
    }
  },
  {
    "path": "src/main/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.component.DialogBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.component.ScrollDialoguePane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // Images used for displaying"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final Image IMG_USER \u003d new Image(\"/images/user.jpg\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final Image IMG_DUKE \u003d new Image(\"/images/duke.png\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // Styles"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String CSS_LABEL_PADDING_BG \u003d \"-fx-padding: 5px;\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // File path for storage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static final String PATH \u003d \"data.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    // Components for the GUI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final TextField userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Button sendButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final ScrollDialoguePane scrollDialoguePane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final PauseTransition exitPause;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final AnchorPane layout;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for the GUI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIoException if an error occurs when creating the Storage object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Gui() throws DukeIoException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // initialise each component"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        storage \u003d new Storage(PATH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        scrollDialoguePane \u003d new ScrollDialoguePane();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        exitPause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        layout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Add settings for the components"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        userInput.setPrefWidth(330);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        scrollDialoguePane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        scrollDialoguePane.setBackground(new Background(new BackgroundFill(Color.rgb(23, 36, 33),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new CornerRadii(0.0), new Insets(0.0))));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        layout.getChildren().addAll(userInput, sendButton, scrollDialoguePane);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        layout.setPrefSize(390, 570);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        layout.setBackground(new Background(new BackgroundFill(Color.rgb(23, 36, 33),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new CornerRadii(0.0), new Insets(0.0))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setTopAnchor(scrollDialoguePane, 5.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setLeftAnchor(scrollDialoguePane, 3.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 5.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 5.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Send greeting message"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        DialogBox greetingDialog \u003d dukeDialog(\"Hello. You can use \\\"help\\\" to see the help menu.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        scrollDialoguePane.addDialog(greetingDialog);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Stage initialisation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        exitPause.setOnFinished(event -\u003e stage.close());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Handle user input events"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        sendButton.setOnMouseClicked(event -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            if (handleUserInput()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                exitPause.playFromStart();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        userInput.setOnAction(event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            if (handleUserInput()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                exitPause.playFromStart();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Method to format text into a Label according to the styles given."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the text to be formatted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return a Label object with formatting applied."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        textToAdd.setStyle(CSS_LABEL_PADDING_BG);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        textToAdd.setTextFill(Color.web(\"#FFFFFF\")); // white text"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Executes commands that are sent to Duke and replies with the appropriate message returned by the command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return if the command would have the program exit."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private boolean handleUserInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        boolean shouldExit \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Command command \u003d CommandParser.parseCommand(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            DialogBox user \u003d userDialog(input);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            scrollDialoguePane.addDialog(user);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String dukeMessage \u003d command.execute(storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            DialogBox duke \u003d dukeDialog(dukeMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            scrollDialoguePane.addDialog(duke);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            shouldExit \u003d command.shouldExit();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeArgumentException | DukeExecutionException de) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            DialogBox user \u003d userDialog(input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            scrollDialoguePane.addDialog(user);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            DialogBox duke \u003d dukeDialog(de.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            scrollDialoguePane.addDialog(duke);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Method to create a DialogBox from the Duke."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the message to be sent."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return a DialogBox that can be inserted into the ScrollDialoguePane"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private DialogBox dukeDialog(String text) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Label dialogLabel \u003d getDialogLabel(text);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        ImageView dukeImage \u003d new ImageView(IMG_DUKE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return DialogBox.dukeDialog(dialogLabel, dukeImage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Method to create a DialogBox from the User."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the message to be sent."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return a DialogBox that can be inserted into the ScrollDialoguePane"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private DialogBox userDialog(String text) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Label dialogLabel \u003d getDialogLabel(text);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        ImageView userImage \u003d new ImageView(IMG_USER);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return DialogBox.userDialog(dialogLabel, userImage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 175
    }
  },
  {
    "path": "src/main/duke/ui/component/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.ui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DialogBox."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param l the Label containing the text to be displayed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param iv the ImageView containing the Image to be displayed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor method for a DialogBox sent by the Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param l the Label containing the text to be displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param iv the ImageView containing the Image to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return a DialogBox with the Duke\u0027s image and alignment."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static DialogBox dukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        l.setBackground(new Background(new BackgroundFill(Color.rgb(176, 163, 212), new CornerRadii(3.0),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new Insets(0.0))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        DialogBox db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.getChildren().addAll(db.displayPicture, db.text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.rgb(86, 85, 84),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new CornerRadii(0.0), new Insets(-10.0))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor method for a DialogBox sent by the User."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param l the Label containing the text to be displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param iv the ImageView containing the Image to be displayed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return a DialogBox with the User\u0027s image and alignment."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static DialogBox userDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        l.setBackground(new Background(new BackgroundFill(Color.rgb(153, 178, 221), new CornerRadii(3.0),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new Insets(0.0))));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        DialogBox db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.getChildren().addAll(db.text, db.displayPicture);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.rgb(103, 102, 101),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                new CornerRadii(0.0), new Insets(-10.0))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 70
    }
  },
  {
    "path": "src/main/duke/ui/component/ScrollDialoguePane.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.ui.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Pane that includes the scrolling bar and dialog boxes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ScrollDialoguePane extends ScrollPane {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a ScrollDialoguePane containing the Dialog boxes within a ScrollPane."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public ScrollDialoguePane() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.setStyle(\"-fx-background: #484747;\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e setVvalue(1.0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        dialogContainer.setSpacing(20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        setContent(dialogContainer);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        setVbarPolicy(ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        setFitToWidth(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void addDialog(DialogBox dialogBox) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        dialogContainer.getChildren().add(dialogBox);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 35
    }
  },
  {
    "path": "src/main/resources/readme/help.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Help "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Welcome to Duke\u0027s Help System!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "To find a list of all commands, type \"help commands\"."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "To find out more about a command, type \"help \u003cname of command\u003e\"."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Example: \"help list\" will return the readme for the List command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## List of all Commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Command List:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    list - Shows the list of all Tasks added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    find \u003ckeyword\u003e - Shows a list of Tasks which have the keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    done \u003cindex\u003e - Marks the task at the index of the list as completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    delete \u003cindex\u003e - Deletes the task at the index of the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    todo \u003cname\u003e - Adds a Todo Task with this name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    event \u003cname\u003e /at \u003cYYYY-MM-DD\u003e - Adds an Event Task with this name at this time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    deadline \u003cname\u003e /by \u003cYYYY-MM-DD\u003e - Adds a Deadline Task with this name at this time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    bye - Closes the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## List Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list - Shows the list of all Tasks added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"list\" -\u003e Shows all the Tasks added. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Find Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "find \u003ckeyword\u003e - Shows a list of Tasks which have the keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"find task\" -\u003e Returns a list of Tasks with the word \"task\" in their name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Done Command "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "done \u003cindex\u003e - Marks the task at the index of the list as completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"done 1\" -\u003e Marks the first entry of the list as completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Delete Command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete \u003cindex\u003e - Deletes the task at the index of the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"delete 1\" -\u003e Removes the first entry of the list. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Todo Command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "todo \u003cname\u003e - Adds a Todo Task with this name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"todo Do homework\" -\u003e Adds a Todo task with the name \"Do Homework\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Event Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "event \u003cname\u003e /at \u003cYYYY-MM-DD\u003e -\u003e Adds an Event Task with this name at this time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"event Concert /at 2020-09-05\" -\u003e Adds an Event Task with the name \"Concert\" with the date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": " 5th September 2020 "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": " "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Deadline Command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "deadline \u003cname\u003e /by \u003cYYYY-MM-DD\u003e -\u003e Adds a Deadline Task with this name at this time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "Example usage: \"deadline Submission /by 2020-09-05\" -\u003e Adds a Deadline Task with the name \"Submssion\" with the date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": " 5th September 2020 "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "## Exit Command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "bye - Closes the program. "
      }
    ],
    "authorContributionMap": {
      "jazerler": 57
    }
  },
  {
    "path": "src/test/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 12
    }
  },
  {
    "path": "src/test/parser/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.FileParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @DisplayName(\"parseLine called on \u0027[T],, 1,, todo\u0027\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void parseLineFromFile_validTodo_todoReturned() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            assertEquals(\"[T] [\\u2713] todo\", FileParser.parseLine(\"[T],, 1,, todo\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIoException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @DisplayName(\"convertTask called on a todo called todo\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void convertTaskForFile_validTodo_todoReturned() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\", \"1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assertEquals(\"[T],, 1,, todo,, \\n\", FileParser.convertTaskToSaveFormat(todo));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "todo duke.task.Todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "deadline duke.task.Deadline /by deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "event duke.task.Event /at event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "cmd /k"
      }
    ],
    "authorContributionMap": {
      "jazerler": 4,
      "-": 19
    }
  }
]
