[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    mainClassName \u003d \"src.main.java.duke.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    archiveBaseName \u003d \"main\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 22,
      "-": 43
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 42
    }
  },
  {
    "path": "config/travis/download_gradle_wrapper.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "# Downloads Gradle wrapper into current directory."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "baseurl\u003d\u0027https://se-edu.github.io/gradle-wrapper\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "mkdir -p gradle/wrapper \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "wget -O gradle/wrapper/gradle-wrapper.jar \"$baseurl/gradle/wrapper/gradle-wrapper.jar\" \u0026\u0026"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "wget -O gradle/wrapper/gradle-wrapper.properties \"$baseurl/gradle/wrapper/gradle-wrapper.properties\" \u0026\u0026"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "wget -O gradlew \"$baseurl/gradlew\" \u0026\u0026"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "chmod +x gradlew \u0026\u0026"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "wget -O gradlew.bat \"$baseurl/gradlew.bat\""
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 10
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | asdfa asdfasd | 2019-02-12 18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | asdfasd fadsfads | 2019-02-12 18:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asdfadf"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | aldskfmaklsdf"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | alkdsfmaskldf"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | alksdmfkalsdfmklads"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | alsdkfmalksdmf"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asdfa"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asd"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asdfasdf asdfasdf"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asd"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 14
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Application.launch(src.main.java.duke.Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents the GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Show welcome message and file path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        MainWindow ap \u003d new MainWindow();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ap.showWelcomeMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        stage.setTitle(\"Best 2103/2103T bot\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            StorageFile storage \u003d new StorageFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            ap.setDuke(storage.load().setStorageFile(storage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (StorageFile.StorageOperationException | InvalidStorageFilePathException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that adds a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // Message to add"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a deadline task to the tasklist. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"\\nParameters: DESCRIPTION [/by] DUEDATE TIME \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \" do homework /by 2019-02-12 18:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deadline task added: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final Deadline newTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public AddDeadlineCommand(String description, String dueDate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.newTask \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            duke.addTask(newTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(\"Oh no. Add deadline was not successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that adds an event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // Message to add"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a event to the tasklist. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"\\nParameters: DESCRIPTION [/at] DUEDATE TIME \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \" mark homework /at 2019-02-12 18:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event task added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final Event newTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public AddEventCommand(String description, String dueDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.newTask \u003d new Event(description, dueDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            duke.addTask(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(\"Oh no. Add event was not successful\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that adds a todo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // Message to add"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a todo to the tasklist. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"\\nParameters: DESCRIPTION \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \" revise homework\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo task added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final Todo newTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.newTask \u003d new Todo(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            duke.addTask(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, newTask));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(\"Oh no. Add todo was not successful\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    protected Duke duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    protected List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private String targetString \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param targetIndex last visible listing index of the target task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.setTargetIndex(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param targetString String that is the target"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Command(String targetString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.setTargetString(targetString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return a command result after execution"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to be implemented by child classes\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param duke duke object which requires to set data"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void setData(Duke duke) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public int getTargetIndex() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return this.targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String getTargetString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return this.targetString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void setTargetIndex(int targetIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void setTargetString(String targetString) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.targetString \u003d targetString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 68
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * The feedback message to be shown to the user. Contains a description of the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * execution result"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /** The list of tasks that was produced by the command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final List\u003cTask\u003e relevantTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for command result with feedback to user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param feedbackToUser message to the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assert feedbackToUser.length() \u003e 0 : \"No feedback to user\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        relevantTasks \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for command result with feedback to user and list of relevant tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param feedbackToUser message to the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param relevantTasks relevant tasks list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult(String feedbackToUser, List\u003cTask\u003e relevantTasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assert feedbackToUser.length() \u003e 0 : \"No feedback to user\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.relevantTasks \u003d relevantTasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns a list of tasks relevant to the command command result, if any."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return a list of tasks which may be empty"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Optional\u003cList\u003cTask\u003e\u003e getRelevantTasks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Optional.ofNullable(relevantTasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that deletes the task in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \": Deletes the task identified by the index number used in the last task listing.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Parameters: INDEX\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final int target \u003d getTargetIndex();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Task task \u003d duke.removeTask(target);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, task));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TASK_NOT_IN_TASKLIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents an exit command that helps to terminate the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWEDGEMENT \u003d \"Saving files and exiting Best2103/TBot as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWEDGEMENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a find command. Upon execution, list the tasks that contain the word to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static final String INDENT \u003d \"   \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // Message to add"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find the tasks that contains the words. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Parameters: find WORD\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public FindCommand(String targetVisibleString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        super(targetVisibleString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final String target \u003d getTargetString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            List\u003cTask\u003e allTasks \u003d duke.getTaskList().filteredView(target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            String result \u003d \"Display a list of tasks: \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            if (allTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                result \u003d \"There\u0027s nothing that contains in the list :(\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            for (int i \u003d 0; i \u003c allTasks.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                result +\u003d INDENT + (i + 1) + \".\" + allTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(result.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TASK_NOT_IN_TASKLIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a help command that helps the user to clarify doubts."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String[] stringArray \u003d {src.main.java.duke.commands.AddTodoCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            AddEventCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            AddDeadlineCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            DeleteCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            MarkDoneCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            HelpCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            ExitCommand.MESSAGE_USAGE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            UpdatedescriptionCommand.MESSAGE_USAGE};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String resultString \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Loop through the string array"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        for (int i \u003d 0; i \u003c stringArray.length; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            resultString +\u003d \"\\n\" + stringArray[i] + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new src.main.java.duke.commands.CommandResult(resultString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.main.java.duke.commons.Messages.INDENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents an list command. Upon execution, list the task list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \": Displays all tasks in the address book as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        List\u003cTask\u003e allTasks \u003d duke.getTaskList().immutableListView();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String result \u003d \"Display a list of tasks: \\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (allTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            result \u003d \"There\u0027s nothing in the list :(\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        for (int i \u003d 0; i \u003c allTasks.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            result +\u003d INDENT + (i + 1) + \".\" + allTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new CommandResult(result.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that marks the command done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \": Mark a task done in the tasklist. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Parameters: done INDEX\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mark done task: %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            assert getTargetIndex() \u003e\u003d 0 : 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final int target \u003d getTargetIndex();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, duke.markDone(target)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_TASK_NOT_IN_TASKLIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/UpdatedescriptionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a command that updates the description of the task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class UpdatedescriptionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updatedescription\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // Message to add"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update task description in tasklist. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"\\nParameters: update index description \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            + \" updatedescription 1 read my homework\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task updated: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final String newDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for updatedescriptionCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param newDescription new description to be updated."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index of the task to be updated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public UpdatedescriptionCommand(String newDescription, int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        super(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Task updatedTask \u003d duke.updateDescription(newDescription, getTargetIndex());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, updatedTask));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(src.main.java.duke.commons.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(src.main.java.duke.commons.Messages.MESSAGE_TASK_NOT_IN_TASKLIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 43
    }
  },
  {
    "path": "src/main/java/duke/commons/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String INDENT \u003d \"   \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String DIVIDER_STRING \u003d \"----------------------------\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String MESSAGE_TASK_NOT_IN_TASKLIST \u003d \"Task could not be found in task list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 12
    }
  },
  {
    "path": "src/main/java/duke/data/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.TaskList.TaskNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents the bot which contains a tasklist and interacts with the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private StorageFile storageFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Creates an empty task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructs an task list with the given data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param tasks external changes to this will not affect this task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Duke(TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.taskList \u003d new TaskList(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Sets the storage file for duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param storageFile storageFile which is the own storage file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return the duke object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Duke setStorageFile(StorageFile storageFile) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.storageFile \u003d storageFile;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param task task to be added to the task list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param newDescription new description of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index to update the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return task that is removed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task updateDescription(String newDescription, int index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Task currentTask \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        currentTask.updateDescription(newDescription);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return currentTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Marks the task in the list done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index of the task to be mark done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return Return task which is mark done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task markDone(int index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        taskList.getTask(index).markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return taskList.getTask(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns true if an equivalent task exists in the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param task check if the task contains the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return True if the list contains the task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean containsTask(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return taskList.doesContain(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Removes the equivalent task from the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index of the task to be removed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a task that is removed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws TaskNotFoundException task cannot be found back to {@code DeleteCommand}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task removeTask(int index) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return taskList.remove(index - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns a new UniqueTaskList of all tasks in the task list at the time of"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * the call."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the list of task that is immutable"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns true if duke is equal."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param other another object to compare if it\u0027s equal"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        boolean sameObject \u003d other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        boolean isSameInstance \u003d other instanceof Duke; // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        TaskList otherTaskList \u003d ((Duke) other).taskList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        boolean isEqual \u003d this.taskList.equals(otherTaskList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return sameObject || isSameInstance \u0026\u0026 isEqual;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the response from the input string and parse it to execute"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param input an user input"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return a response to the user"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Command command \u003d new Parser().parseCommand(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return executeCommand(command).getFeedbackToUser();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a command result which result from the command executed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        command.setData(this);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            storageFile.save(this);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (StorageOperationException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new CommandResult(\"Could not save the file\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 146
    }
  },
  {
    "path": "src/main/java/duke/data/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents customised exception class for Bot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final String errorMesage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.errorMesage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"☹ OOPS!!! \" + errorMesage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 16
    }
  },
  {
    "path": "src/main/java/duke/data/exception/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents exception that signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class IllegalValueException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 13
    }
  },
  {
    "path": "src/main/java/duke/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for deadline with description and dueDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param description description of deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param dueDate     duedate of the deadline task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Deadline(String description, String dueDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.dueDate \u003d LocalDateTime.parse(dueDate, dateFormat);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be printed for the deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + dueDate.format(dateFormat) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public LocalDateTime getDueDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be written for the deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toWriteString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"D \" + super.toWriteString() + \" | \" + dueDate.format(dateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 44
    }
  },
  {
    "path": "src/main/java/duke/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private LocalDateTime eventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for event with description and duedate"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param description description of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param eventDate duedate of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Event(String description, String eventDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.eventDate \u003d LocalDateTime.parse(eventDate, dateFormat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets a string that print event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return string that represents event task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + eventDate.format(dateFormat) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public LocalDateTime getEventDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be written for the event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return string which is to be written for the event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toWriteString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"E \" + super.toWriteString() + \" | \" + eventDate.format(dateFormat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 45
    }
  },
  {
    "path": "src/main/java/duke/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Costructor for task with description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the status icon of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return String of status icon"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Updates the description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param newDescription New description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return true if the description is updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean updateDescription(String newDescription) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * This method marks the task as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return true value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return true value"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean markAsDoneWithoutPrint() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns the hashCode of the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return integer which represents the hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return this.description.length();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be printed for the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return string to be printed for the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Checks if the object is equal to task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return true if it is equal"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return isDone \u003d\u003d task.isDone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                \u0026\u0026 Objects.equals(description, task.description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets a string that is to be written."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return String that is to be written"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toWriteString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 100
    }
  },
  {
    "path": "src/main/java/duke/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a task list that contains tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private final List\u003cTask\u003e internalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructs empty person list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructs a list from the items in the given collection."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param tasks a collection of persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public TaskList(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        internalList.addAll(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructs a shallow copy of the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param source the source of the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public TaskList(TaskList source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        internalList.addAll(source.internalList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns an unmodifiable java List view with elements cast as immutable {@link Task}s."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a list of task that is immmutable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public List\u003cTask\u003e immutableListView() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Collections.unmodifiableList(internalList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns an unmodifiable java List view with elements cast as immutable {@link Task}s."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * For use with other methods/libraries."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Any changes to the internal list/elements are immediately visible in the returned list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param searchString String to be searched in the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a list of tasks that is filtered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public List\u003cTask\u003e filteredView(String searchString) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        List\u003cTask\u003e filteredList \u003d internalList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                .filter(task -\u003e task.description.contains(searchString)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Collections.unmodifiableList(filteredList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Checks if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * defines a weaker notion of equality."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param toCheck the task to be check."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return true if the list contains the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean doesContain(Task toCheck) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        for (Task p : internalList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            if (p \u003d\u003d toCheck) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        internalList.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index to remove the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return task that is removed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws TaskNotFoundException if no such task could be found in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task remove(int index) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Task deletedTask \u003d internalList.remove(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (deletedTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the task at a certain index from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param index index of the task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return return a task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return internalList.get(index - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the task list iterator."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return an iterator that represents the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the task list iterator."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return an iterator that represents the task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        TaskList tasks \u003d (TaskList) o;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Objects.equals(internalList, tasks.internalList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the hashcode of taskList."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the hashcode of the tasklist"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Objects.hash(internalList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Signals that an operation targeting a specified task in the list would fail because"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * there is no such matching task in the list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static class TaskNotFoundException extends Exception {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 150
    }
  },
  {
    "path": "src/main/java/duke/data/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be printed for the todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return string to be printed for todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the string to be written for the todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return string to be written for todo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String toWriteString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return \"T \" + super.toWriteString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.main.java.duke.commons.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.main.java.duke.commons.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.commands.UpdatedescriptionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a parser that parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern TASK_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e.+)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern TASK_STRING_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e\\\\w.+)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern EVENT_TASK_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Pattern.compile(\"(?\u003cdescription\u003e[^/]+)+\\\\s+(\\\\/at)+\\\\s+\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    + \"(?\u003cduedate\u003e[\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\-\\\\d\\\\d\\\\d+\\\\s+\\\\d\\\\d:\\\\d\\\\d]+)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern DEADLINE_TASK_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Pattern.compile(\"(?\u003cdescription\u003e[^/]+)+\\\\s+(\\\\/by)+\\\\s+\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    + \"(?\u003cduedate\u003e[\\\\d\\\\d\\\\d-\\\\d\\\\d\\\\-\\\\d\\\\d\\\\d+\\\\s+\\\\d\\\\d:\\\\d\\\\d]+)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern UPDATE_DESCRIPTION_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Pattern.compile(\"(?\u003cindex\u003e[\\\\d]+)+\\\\s+(?\u003cdescription\u003e.+)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern TASK_DATA_ARGS_FORMAT \u003d // \u0027/\u0027 forward slashes are reserved for delimiter prefixes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            Pattern.compile(\"(?\u003cdescription\u003e[^/]+)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case AddTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareAddTodo(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareAddEvent(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareAddDeadline(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareDelete(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case MarkDoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareMarkDone(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareFind(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case UpdatedescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return prepareUpdateDescription(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the add task command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareAddEvent(String args) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d EVENT_TASK_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new AddEventCommand(matcher.group(\"description\"), matcher.group(\"duedate\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the add todo task command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareAddTodo(String args) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d TASK_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new AddTodoCommand(matcher.group(\"description\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the add task command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareUpdateDescription(String args) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d UPDATE_DESCRIPTION_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    UpdatedescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new UpdatedescriptionCommand(matcher.group(\"description\"), Integer.valueOf(matcher.group(\"index\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the add deadline task command."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareAddDeadline(String args) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d DEADLINE_TASK_DATA_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // Validate arg string format"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new AddDeadlineCommand(matcher.group(\"description\"), matcher.group(\"duedate\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the delete task command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the mark done command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareMarkDone(String args) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new MarkDoneCommand(targetIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    MarkDoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses arguments in the context of the find task command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            final String targetString \u003d parseArgsString(args);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new FindCommand(targetString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new IncorrectCommand(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws ParseException        if no region of the args string could be found"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                               for the index"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d TASK_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Parses the given arguments string."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws ParseException        if no region of the args string could be found"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                               for the index"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private String parseArgsString(String args) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final Matcher matcher \u003d TASK_STRING_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return matcher.group(\"targetIndex\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 258
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile.StorageOperationException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a decoder that decodes all the {@code Task} in the {@code toSave} into a list of decodable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class DukeDecoder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String TODO_REGEX \u003d \"(T)+\\\\s+([|])+\\\\s+([10])+\\\\s+([|])+\\\\s+\\\\w+.+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String DEADLINE_REGEX \u003d \"([DE])+\\\\s+([|])+\\\\s+([10])+\\\\s+([|])+\\\\s+\\\\w+.+\\\\s+([|])+\\\\s+\\\\w+.+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Decodes {@code encodedDuke} into an {@code Duke} containing the decoded"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param encodedDuke A list of string that is encoded"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return Duke duke object which is decoded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws IllegalValueException     if any of the fields in any encoded task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   string is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws StorageOperationException if the {@code encodedDuke} is in an invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static Duke decodeDuke(List\u003cString\u003e encodedDuke) throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            IllegalValueException, StorageOperationException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final List\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        for (String encodedTask : encodedDuke) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            decodedTasks.add(decodeTaskFromString(encodedTask));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new Duke(new TaskList(decodedTasks));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Decodes {@code encodedTask} into a {@code Task}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws IllegalValueException     if any field in the {@code encodedTask} is"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws StorageOperationException if {@code encodedTask} is in an invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static Task decodeTaskFromString(String input) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String[] inputList \u003d input.split(\"\\\\|\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!(Pattern.matches(TODO_REGEX, input.trim()) | Pattern"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                .matches(DEADLINE_REGEX, input.trim()))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            System.out.println(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String letterCommand \u003d inputList[0].trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        switch(letterCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            newTask \u003d new Deadline(inputList[2].trim(), inputList[3].trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            newTask \u003d new Todo(inputList[2].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            newTask \u003d new Event(inputList[2].trim(), inputList[3].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            newTask.markAsDoneWithoutPrint();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            System.out.println(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 81
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents an encoder that encodes all the {@code Task} in the {@code toSave} into a list of decodable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class DukeEncoder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Encodes all the {@code Task} in the {@code toSave} into a list of decodable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * and readable string presentation for storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param toSave the duke object that is required to save"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a list of strings that is encoded"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static List\u003cString\u003e encodeDuke(Duke toSave) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        final List\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        toSave.getTaskList().forEach(task -\u003e encodedTasks.add(encodeTaskToString(task)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Encodes the {@code task} into a decodable and readable string representation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static String encodeTaskToString(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return task.toWriteString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 33
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a storage that manages the storage of the Best2103Bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static String STORAGE_DIRECTORY \u003d System.getProperty(\"user.dir\") + \"/data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static String TEXT_FILE_NAME \u003d \"/duke.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d STORAGE_DIRECTORY + TEXT_FILE_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for storagefile"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public StorageFile() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for storagefile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param filePath File path to save the file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public StorageFile(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with \u0027.txt\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns true if the given path is acceptable as a storage file. The file path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * is considered acceptable if it ends with \u0027.txt\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Saves the {@code addressBook} data to the storage file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param duke Duke object that is to be saved"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   storing data to file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void save(Duke duke) throws StorageOperationException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            File tempFile \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            boolean exists \u003d tempFile.exists();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            if (exists) { // If the file exist"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                List\u003cString\u003e encodedDuke \u003d DukeEncoder.encodeDuke(duke);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                Files.write(path, encodedDuke);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            } else { // If file does not exist, make a new directory and file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                File directory \u003d new File(System.getProperty(\"user.dir\") + \"/data\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                directory.mkdirs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                File file \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                boolean isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                List\u003cString\u003e encodedDuke \u003d DukeEncoder.encodeDuke(duke);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                Files.write(path, encodedDuke);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Loads the {@code Duke} data from this storage file, and then returns it."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns an empty {@code Duke} if the file does not exist, or is not a regular"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return Duke object that is loaded"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     *                                   converting data from file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public Duke load() throws StorageOperationException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return new Duke();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            return DukeDecoder.decodeDuke(Files.readAllLines(path));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new AssertionError(\"A non-existent file scenario is already handled earlier.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            // other errors"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            throw new StorageOperationException(\"File contains illegal data values; data type constraints not met\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Signals that the given file path does not fulfill the storage filepath"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * data between the application and the storage file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 133
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents a dialog box consisting of an ImageView"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private VBox vBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the user dialog."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param text label"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param image Immage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a dialog box"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Gets the duke dialog."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param text label"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @param image Image"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * @return a dialog box"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        var db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 77
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.main.java.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Represents the controller MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private src.main.java.duke.data.Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Constructor for main window"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                    .getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void setDuke(src.main.java.duke.data.Duke d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Shows welcome message to the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                src.main.java.duke.ui.DialogBox.getUserDialog(\"Hello! I\u0027m Best2103/TBot \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                        + \"What can I do for you?\", dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private void handleUserInput() throws StorageFile.StorageOperationException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                src.main.java.duke.ui.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                src.main.java.duke.ui.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 82
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #f1faee;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"306.0\" style\u003d\"-fx-padding: 20; -fx-border-radius: 20 20 0 0; -fx-background-color: #1d3557;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"97.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);;\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: #f1faee;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #e63946;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #f1faee;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 19
    }
  },
  {
    "path": "src/test/data/InvalidData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "sdfasfdasfjkasdfnajksndfasdfasdf"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 1
    }
  },
  {
    "path": "src/test/data/ValidData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asdfasf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 3
    }
  },
  {
    "path": "src/test/data/temp.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 1 | mark homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 1 | revlkamdsflk laskdmfalkmdf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 3
    }
  },
  {
    "path": "src/test/java/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Test the main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 16
    }
  },
  {
    "path": "src/test/java/storage/StorageFileTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package test.java.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.test.java.util.TestUtil.assertFileDoesNotExist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.test.java.util.TestUtil.assertTextFilesEqual;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static src.test.java.util.TestUtil.isIdentical;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.Duke;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.data.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import src.main.java.duke.storage.StorageFile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class StorageFileTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d \"src/test/data/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private static final String NON_EXISTANT_FILE_NAME \u003d \"ThisFileDoesNotExist.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StorageFile(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void constructor_noTxtExtension_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e new StorageFile(TEST_DATA_FOLDER + \"/\" + \"InvalidfileName\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void load_validFormat() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke actualAb \u003d getStorage(\"ValidData.txt\").load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke expectedAb \u003d getTestDuke();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // ensure loaded Duke is properly constructed with test data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // TODO: overwrite equals method in Duke class and replace with equals method"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // below"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertEquals(isIdentical(actualAb.getTaskList(), expectedAb.getTaskList()), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void load_nonExistantFile_returnsEmptyDuke() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke actualAb \u003d getStorage(NON_EXISTANT_FILE_NAME).load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke expectedAb \u003d new Duke();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertEquals(actualAb, expectedAb);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // verify that loading does not result in the file being created"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertFileDoesNotExist(TEST_DATA_FOLDER + \"/\" + NON_EXISTANT_FILE_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void save_nullDuke_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e storage.save(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public void save_validDuke() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke ab \u003d getTestDuke();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        StorageFile storage \u003d getTempStorage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        storage.save(ab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertStorageFilesEqual(storage, getStorage(\"ValidData.txt\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    // getPath() method in StorageFile class is trivial so it is not tested"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Asserts that the contents of two storage files are the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private void assertStorageFilesEqual(StorageFile sf1, StorageFile sf2) throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertTextFilesEqual(Paths.get(sf1.getPath()), Paths.get(sf2.getPath()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private StorageFile getStorage(String fileName) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new StorageFile(TEST_DATA_FOLDER + \"/\" + fileName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private StorageFile getTempStorage() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return new StorageFile(testFolder.resolve(\"temp.txt\").toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    private Duke getTestDuke() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Duke ab \u003d new Duke();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ab.addTask(new Event(\"mark homework\", \"2019-02-12 18:00\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ab.addTask(new Todo(\"asdfasf\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        ab.addTask(new Event(\"mark homework\", \"2019-02-12 18:00\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 99
    }
  },
  {
    "path": "src/test/java/util/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "package src.test.java.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " * Utility methods for testing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns true if every pair of corresponding elements two iterables are (deeply) identical."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * In other words, the two containers must have the same elements, in the same order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static \u003cT\u003e boolean isIdentical(Iterable\u003cT\u003e firstIterable, Iterable\u003cT\u003e secondIterable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Iterator\u003cT\u003e currentPtr0 \u003d firstIterable.iterator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        Iterator\u003cT\u003e currentPtr1 \u003d secondIterable.iterator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        while (currentPtr0.hasNext() \u0026\u0026 currentPtr1.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            T val0 \u003d currentPtr0.next();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            T val1 \u003d currentPtr1.next();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            if (!val0.equals(val1)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        // If any of the two iterables still have elements, then they have different sizes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return !(currentPtr0.hasNext() || currentPtr1.hasNext());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns true if the underlying container behind an iterable is empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static \u003cT\u003e boolean isEmpty(Iterable\u003cT\u003e it) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return !it.iterator().hasNext();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Returns the number of elements in the container behind an iterable."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static \u003cT\u003e int getSize(Iterable\u003cT\u003e it) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        int numberOfElementsSeen \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        for (T elem : it) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "            numberOfElementsSeen++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        return numberOfElementsSeen;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Asserts whether the text in the two given files are the same. Ignores any"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * differences in line endings"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static void assertTextFilesEqual(Path path1, Path path2) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        List\u003cString\u003e list1 \u003d Files.readAllLines(path1, Charset.defaultCharset());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        List\u003cString\u003e list2 \u003d Files.readAllLines(path2, Charset.defaultCharset());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertEquals(String.join(\"\\n\", list1), String.join(\"\\n\", list2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     * Asserts that the file given does not exist on the filesystem."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    public static void assertFileDoesNotExist(String filePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "        assertTrue(Files.notExists(Paths.get(filePath)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 74
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | asdfasf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "D  | 0 | do homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "T  | 0 | borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "E  | 0 | mark homework | 2019-02-12 18:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "D  | 0 | do homework | 2019-02-12 18:00"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "event mark homework /at 2019-02-12 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "deadline do homework /by 2019-02-12 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "dir /s /B ..\\duke\\.\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    find ../src/main/java/duke -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "  )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "java -classpath ../bin src.main.java.duke.Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 8,
      "-": 34
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/ui/TextUi.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commons/Messages.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/parser/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/storage/DukeEncoder.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/storage/DukeDecoder.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/storage/StorageFile.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/Main.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/MarkDoneCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/DeleteCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/ListCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/AddEventCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/Command.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/HelpCommand.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/AddDeadlineCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/IncorrectCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/AddTodoCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/commands/CommandResult.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/task/TaskList.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/task/Event.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/task/Task.java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/task/Deadline.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/task/Todo.java"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/Duke.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/exception/IllegalValueException.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jillzyt"
        },
        "content": "../src/main/java/duke/data/exception/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "Jillzyt": 26
    }
  }
]
