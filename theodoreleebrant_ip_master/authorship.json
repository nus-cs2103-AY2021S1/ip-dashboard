[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"# Duke project - Individual project for CS2103 "},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"![Duke UI](https://github.com/theodoreleebrant/ip/blob/master/docs/Ui.png)"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"Duke is a **desktop app for managing tasks, optimised for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you are someone who can type fast, Duke can help you track your tasks faster than traditional GUI apps."},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"## Quick Start"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"1. Ensure you have Java 11 or later installed."},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"1. Download the jar file from the project website."},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"1. Copy the file to the folder you want to use as the home folder for the application."},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"1. Double-click the file to start the app. A GUI should appear, with the field bar to input commands. The list of commands are available below."},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"## Features "},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"1. Three types of tasks:"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    1. Todos"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    1. Deadlines"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    1. Events"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"1. Add, mark as done, and delete tasks"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"1. List tasks, filterable by:"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    1. task type"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    1. keyword search"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    1. date search"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"1. Mass operations"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    1. mark all tasks as done"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    1. delete all dasks"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    1. delete all done tasks."},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"## Usage"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"\u003e Command format:"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Words in `UPPER_CASE` are parameters supplied by the user"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Parameters starting with `DATE` must either be `today` or supplied in this format: `dd-MM-yyyy hhmm` where:"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `dd` is the date as a valid integer (e.g. `28`, `03`)"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `MM` is the month as a valid integer (e.g. `01`, `12`)"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `yyyy` is the year as a valid integer (e.g. `2020`)"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - (optional) `hhmm` is the time in 24 hour format (e.g. `1500` for 3:00pm)"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Parameters in square brackets are optional"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"### `todo`, `deadline`, `event` - Adding a task"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"Adds a task into the list."},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"There are three types of tasks: `Todo`, `Deadline` and `Event`."},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"// add a todo"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"todo DESCRIPTION"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"// add a deadline"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"deadline DESCRIPTION /by DATE_DUE"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"// add an event"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"event DESCRIPTION /at DATE_OF_EVENT"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"todo read book"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"deadline return book /by 28-09-2020"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"event go to library /at 28-09-2020 1000"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"[T][✘] read book"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 1 tasks in the list."},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"[D][✘] return book (by: Sep 28 2020 00:00)"},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 2 tasks in the list."},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":72,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":73,"author":{"gitId":"theodoreleebrant"},"content":"[E][✘] go to library (at: Sep 28 2020 10:00)"},{"lineNumber":74,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 3 tasks in the list."},{"lineNumber":75,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":76,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":77,"author":{"gitId":"theodoreleebrant"},"content":"### `list` - Listing tasks"},{"lineNumber":78,"author":{"gitId":"theodoreleebrant"},"content":"Shows a list of all tasks."},{"lineNumber":79,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":80,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":81,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":82,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":83,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":84,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":85,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":86,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":87,"author":{"gitId":"theodoreleebrant"},"content":"// list all tasks"},{"lineNumber":88,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":89,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":90,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":91,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":92,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":93,"author":{"gitId":"theodoreleebrant"},"content":"Here are the tasks in your list:"},{"lineNumber":94,"author":{"gitId":"theodoreleebrant"},"content":"1.[T][✘] read book"},{"lineNumber":95,"author":{"gitId":"theodoreleebrant"},"content":"2.[D][✘] return book (by: Sep 28 2020 00:00)"},{"lineNumber":96,"author":{"gitId":"theodoreleebrant"},"content":"3.[E][✘] go to library (at: Sep 28 2020 10:00)"},{"lineNumber":97,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":98,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":99,"author":{"gitId":"theodoreleebrant"},"content":"### `done` - Marking a task as done"},{"lineNumber":100,"author":{"gitId":"theodoreleebrant"},"content":"Marks a task as done."},{"lineNumber":101,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":102,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":103,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":104,"author":{"gitId":"theodoreleebrant"},"content":"// mark the task with INDEX as done"},{"lineNumber":105,"author":{"gitId":"theodoreleebrant"},"content":"done INDEX"},{"lineNumber":106,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":107,"author":{"gitId":"theodoreleebrant"},"content":"// mark all tasks as done"},{"lineNumber":108,"author":{"gitId":"theodoreleebrant"},"content":"done all"},{"lineNumber":109,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":110,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":111,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":112,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":113,"author":{"gitId":"theodoreleebrant"},"content":"done 1"},{"lineNumber":114,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":115,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":116,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":117,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":118,"author":{"gitId":"theodoreleebrant"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":119,"author":{"gitId":"theodoreleebrant"},"content":"[T][✓] read book"},{"lineNumber":120,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":121,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":122,"author":{"gitId":"theodoreleebrant"},"content":"### `delete` - Deleting a task"},{"lineNumber":123,"author":{"gitId":"theodoreleebrant"},"content":"Deletes a task."},{"lineNumber":124,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":125,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":126,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":127,"author":{"gitId":"theodoreleebrant"},"content":"// delete the task with INDEX"},{"lineNumber":128,"author":{"gitId":"theodoreleebrant"},"content":"delete INDEX"},{"lineNumber":129,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":130,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":131,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":132,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":133,"author":{"gitId":"theodoreleebrant"},"content":"delete 1"},{"lineNumber":134,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":135,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":136,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":137,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":138,"author":{"gitId":"theodoreleebrant"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":139,"author":{"gitId":"theodoreleebrant"},"content":"[T][✓] read book"},{"lineNumber":140,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 2 tasks in the list."},{"lineNumber":141,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":142,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":143,"author":{"gitId":"theodoreleebrant"},"content":"### `help` - Printing Help Message"},{"lineNumber":144,"author":{"gitId":"theodoreleebrant"},"content":"Prints the help message"},{"lineNumber":145,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":146,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":147,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":148,"author":{"gitId":"theodoreleebrant"},"content":"help"},{"lineNumber":149,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":150,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":151,"author":{"gitId":"theodoreleebrant"},"content":"### `bye` - Exiting the program"},{"lineNumber":152,"author":{"gitId":"theodoreleebrant"},"content":"Closes the program. The task data will be automatically saved."},{"lineNumber":153,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":154,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":155,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":156,"author":{"gitId":"theodoreleebrant"},"content":"bye"},{"lineNumber":157,"author":{"gitId":"theodoreleebrant"},"content":"```"}],"authorContributionMap":{"theodoreleebrant":157}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"//    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"//checkstyle {"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"//    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"//}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":19,"-":41}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"done"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"exit $ret"}],"authorContributionMap":{"theodoreleebrant":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"\u0027"}],"authorContributionMap":{"theodoreleebrant":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"\u0027"}],"authorContributionMap":{"theodoreleebrant":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"done"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"exit $ret"}],"authorContributionMap":{"theodoreleebrant":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"Duke project - User Guide"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"By theodoreleebrant  "},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"Last Updated 22 September 2020"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"# 1. Introduction"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"Duke is a productivity application that helps you manage your tasks in an orderly fashion. "},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"Duke has the following main features:"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"1. Manage tasks of various nature, including:"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    a. Simple tasks (To-Dos)"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    b. Tasks which has a deadline"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    c. Events that occur at a particular time"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"2. Mark tasks as complete"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"3. Delete tasks"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"4. Find your tasks based on the description"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"Duke is optimized for users who are fast typists and prefer typing over other means of input. It comes with:"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"* A Command Line Interface (CLI) which allows you to accesss the features in Duke by typing"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"* A Graphical User Interface (GUI) which displays the information requested"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"![Duke UI](https://github.com/theodoreleebrant/ip/blob/master/docs/Ui.png)"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"# 2. About this Guide"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"## 2.1. Basic Information"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"This User Guide explains how you can use Duke to help you manage your tasks."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"You may want to refer to [Section 3 (Quick start)](#3-quick-start) for a short tutorial on how to run Duke on your device and use Duke\u0027s main features. For a full walkthrough of Duke, please refer to [Section 4 (Features)](#4-features). If you are an experienced CLI user, you can find all the commands available under [Section 5 (Command Summary)](#5-command-summary)"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"## 2.2 Command Format"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"This section explains the forma of commands in the User Guide:"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"\u003e Command format:"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Words in `UPPER_CASE` are parameters supplied by the user"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Parameters starting with `DATE` must either be `today` or supplied in this format: `dd-MM-yyyy hhmm` where:"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `dd` is the date as a valid integer (e.g. `28`, `03`)"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `MM` is the month as a valid integer (e.g. `01`, `12`)"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - `yyyy` is the year as a valid integer (e.g. `2020`)"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"\u003e   - (optional) `hhmm` is the time in 24 hour format (e.g. `1500` for 3:00pm)"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"\u003e - Parameters in square brackets are optional"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"# 3. Quick Start"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"1. Ensure you have Java 11 or later installed."},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"2. Download the jar file from the project website. The file can be downloaded [here](https://github.com/theodoreleebrant/ip/releases)."},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"3. Copy the file to the folder you want to use as the home folder for the application."},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"4. Double-click the file to start the app. A window should appear, with the field bar below to input commands."},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"5. Type the command in the command box and press `Enter` to execute it. "},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"# 4. Features "},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"## 4.1 Overview"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"Duke supports three types of tasks:"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"* Todos - these are simple tasks with a description."},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"* Deadlines - these are tasks that needs to be completed within before a certain time period."},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"* Events - these are things that has a time at which they happen."},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"In Duke, you can:"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"* Add tasks"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"* Mark tasks as done"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"* Delete tasks"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"* List your tasks"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":"* Search for tasks"},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"Other commands are to:"},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"* Exit Duke"},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"* Show the help message"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"## 4.2 Details"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"### Adding tasks - `todo`, `deadline`, `event`"},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"Adds a task into the list."},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"There are three types of tasks: `Todo`, `Deadline` and `Event`."},{"lineNumber":72,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":73,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":74,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":75,"author":{"gitId":"theodoreleebrant"},"content":"// add a todo"},{"lineNumber":76,"author":{"gitId":"theodoreleebrant"},"content":"todo DESCRIPTION"},{"lineNumber":77,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":78,"author":{"gitId":"theodoreleebrant"},"content":"// add a deadline"},{"lineNumber":79,"author":{"gitId":"theodoreleebrant"},"content":"deadline DESCRIPTION /by DATE_DUE"},{"lineNumber":80,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":81,"author":{"gitId":"theodoreleebrant"},"content":"// add an event"},{"lineNumber":82,"author":{"gitId":"theodoreleebrant"},"content":"event DESCRIPTION /at DATE_OF_EVENT"},{"lineNumber":83,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":84,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":85,"author":{"gitId":"theodoreleebrant"},"content":"The date format is `dd/MM/yyyy HHmm`, with the default hour being 0000 if omitted."},{"lineNumber":86,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":87,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":88,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":89,"author":{"gitId":"theodoreleebrant"},"content":"todo read book"},{"lineNumber":90,"author":{"gitId":"theodoreleebrant"},"content":"deadline return book /by 28/09/2020"},{"lineNumber":91,"author":{"gitId":"theodoreleebrant"},"content":"event go to library /at 28/09/2020 1000"},{"lineNumber":92,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":93,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":94,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":96,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":97,"author":{"gitId":"theodoreleebrant"},"content":"[T][✘] read book"},{"lineNumber":98,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 1 tasks in the list."},{"lineNumber":99,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":100,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":101,"author":{"gitId":"theodoreleebrant"},"content":"[D][✘] return book (by: 28/09/2020 0000)"},{"lineNumber":102,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 2 tasks in the list."},{"lineNumber":103,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":104,"author":{"gitId":"theodoreleebrant"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":105,"author":{"gitId":"theodoreleebrant"},"content":"[E][✘] go to library (at: 28/09/2020 1000)"},{"lineNumber":106,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 3 tasks in the list."},{"lineNumber":107,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":108,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":109,"author":{"gitId":"theodoreleebrant"},"content":"### Mark task as done - `done`"},{"lineNumber":110,"author":{"gitId":"theodoreleebrant"},"content":"Marks a task as done."},{"lineNumber":111,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":112,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":113,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":114,"author":{"gitId":"theodoreleebrant"},"content":"// mark the task with INDEX as done"},{"lineNumber":115,"author":{"gitId":"theodoreleebrant"},"content":"done INDEX"},{"lineNumber":116,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":117,"author":{"gitId":"theodoreleebrant"},"content":"// mark all tasks as done"},{"lineNumber":118,"author":{"gitId":"theodoreleebrant"},"content":"done all"},{"lineNumber":119,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":120,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":121,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":122,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":123,"author":{"gitId":"theodoreleebrant"},"content":"done 1"},{"lineNumber":124,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":125,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":126,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":127,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":128,"author":{"gitId":"theodoreleebrant"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":129,"author":{"gitId":"theodoreleebrant"},"content":"[T][✓] read book"},{"lineNumber":130,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":131,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":132,"author":{"gitId":"theodoreleebrant"},"content":"### Deleting task - `delete`"},{"lineNumber":133,"author":{"gitId":"theodoreleebrant"},"content":"Deletes a task."},{"lineNumber":134,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":135,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":136,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":137,"author":{"gitId":"theodoreleebrant"},"content":"// delete the task with INDEX"},{"lineNumber":138,"author":{"gitId":"theodoreleebrant"},"content":"delete INDEX"},{"lineNumber":139,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":140,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":141,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":142,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":143,"author":{"gitId":"theodoreleebrant"},"content":"delete 1"},{"lineNumber":144,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":145,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":146,"author":{"gitId":"theodoreleebrant"},"content":"Expected outcome:"},{"lineNumber":147,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":148,"author":{"gitId":"theodoreleebrant"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":149,"author":{"gitId":"theodoreleebrant"},"content":"[T][✓] read book"},{"lineNumber":150,"author":{"gitId":"theodoreleebrant"},"content":"Now you have 2 tasks in the list."},{"lineNumber":151,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":152,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":153,"author":{"gitId":"theodoreleebrant"},"content":"### Listing tasks - `list`"},{"lineNumber":154,"author":{"gitId":"theodoreleebrant"},"content":"Shows a list of all tasks."},{"lineNumber":155,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":156,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":157,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":158,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":159,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":160,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":161,"author":{"gitId":"theodoreleebrant"},"content":"Example usage:"},{"lineNumber":162,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":163,"author":{"gitId":"theodoreleebrant"},"content":"// list all tasks"},{"lineNumber":164,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":165,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":168,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":169,"author":{"gitId":"theodoreleebrant"},"content":"Here are the tasks in your list:"},{"lineNumber":170,"author":{"gitId":"theodoreleebrant"},"content":"1.[T][✘] read book"},{"lineNumber":171,"author":{"gitId":"theodoreleebrant"},"content":"2.[D][✘] return book (by: Sep 28 2020 00:00)"},{"lineNumber":172,"author":{"gitId":"theodoreleebrant"},"content":"3.[E][✘] go to library (at: Sep 28 2020 10:00)"},{"lineNumber":173,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":174,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":175,"author":{"gitId":"theodoreleebrant"},"content":"### Exiting Duke -`bye`"},{"lineNumber":176,"author":{"gitId":"theodoreleebrant"},"content":"Closes the program. The task data will be automatically saved."},{"lineNumber":177,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":178,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":179,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":180,"author":{"gitId":"theodoreleebrant"},"content":"bye"},{"lineNumber":181,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":182,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":183,"author":{"gitId":"theodoreleebrant"},"content":"### Show help message - `help`"},{"lineNumber":184,"author":{"gitId":"theodoreleebrant"},"content":"Shows the help message"},{"lineNumber":185,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":186,"author":{"gitId":"theodoreleebrant"},"content":"Format:"},{"lineNumber":187,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":188,"author":{"gitId":"theodoreleebrant"},"content":"help"},{"lineNumber":189,"author":{"gitId":"theodoreleebrant"},"content":"```"},{"lineNumber":190,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":191,"author":{"gitId":"theodoreleebrant"},"content":"# 5. Command Summary"},{"lineNumber":192,"author":{"gitId":"theodoreleebrant"},"content":"**Utility commands**"},{"lineNumber":193,"author":{"gitId":"theodoreleebrant"},"content":"* Show help message: `help`"},{"lineNumber":194,"author":{"gitId":"theodoreleebrant"},"content":"* Exit the application: `bye`"},{"lineNumber":195,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":196,"author":{"gitId":"theodoreleebrant"},"content":"**Adding tasks**"},{"lineNumber":197,"author":{"gitId":"theodoreleebrant"},"content":"* Add a todo task: `todo \u003cdetails\u003e`"},{"lineNumber":198,"author":{"gitId":"theodoreleebrant"},"content":"* Add a deadline task: `deadline \u003cdetail\u003e /by \u003cdate\u003e`"},{"lineNumber":199,"author":{"gitId":"theodoreleebrant"},"content":"* Add an event task: `event \u003cdetail\u003e /at \u003cdate\u003e`"},{"lineNumber":200,"author":{"gitId":"theodoreleebrant"},"content":"The date format is `dd/MM/yyyy HHmm`, with the default hour being 0000 if omitted."},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"theodoreleebrant"},"content":"**Task processing**"},{"lineNumber":203,"author":{"gitId":"theodoreleebrant"},"content":"* Mark tasks as done: `done \u003cindex of task\u003e`"},{"lineNumber":204,"author":{"gitId":"theodoreleebrant"},"content":"* Delete tasks: `delete \u003cindex of task\u003e`"},{"lineNumber":205,"author":{"gitId":"theodoreleebrant"},"content":"* List your tasks: `list`"},{"lineNumber":206,"author":{"gitId":"theodoreleebrant"},"content":"* Search for tasks: `find \u003cname of task\u003e"}],"authorContributionMap":{"theodoreleebrant":196,"-":10}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":" */"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    private TextArea dialog;"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":59}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":" * The main entry point to the application."},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":" *"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":" * This is a workaround for the following error when MainApp is made the"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":" * entry point of the application:"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":" *"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":" *"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":" * The reason is that MainApp extends Application. In that case, the"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":" *"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":" */"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"public class Launcher {"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    public static void main(String[] args) {"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":23}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":" * A GUI for duke.Duke using FXML."},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":" */"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    private TaskList tasks \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    private Storage storage \u003d new Storage();"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    private boolean isFinished \u003d false;"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    public void start(Stage stage) {"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"            javafx.scene.image.Image dukeImage \u003d"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"                    new javafx.scene.image.Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"            stage.getIcons().add(dukeImage);"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"            stage.setScene(scene);"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"            stage.show();"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":39}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"import javafx.util.Duration;"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":" */"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"                DialogBox.getDukeDialog(Ui.initialMessage(), dukeImage)"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        );"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke."},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"        userInput.clear();"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"            delay.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"            delay.play();"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Parser;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private Storage storage;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    private TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    private boolean isFinished;"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"     * Default constructor for Duke."},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"     * Attempts to load from existing storage, if any."},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"            this.tasks \u003d storage.load();"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"        this.isFinished \u003d false;"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"    public String getResponse(String echo) {"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"        Command command \u003d null;"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"            command \u003d Parser.parseCommand(echo, tasks);"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"            String output \u003d command.execute(tasks);"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"            return output;"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"            return e.getMessage();"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":41}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"public interface Command {"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    String execute(TaskList tasks) throws DukeException;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    default boolean setIsFinished() {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        return false;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":12}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class DeadlineCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private Task toBeAdded;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public DeadlineCommand(Task toBeAdded) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.toBeAdded \u003d toBeAdded;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        // Do TaskList stuff"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        tasks.add(toBeAdded);"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        // Do UI stuff"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printAdd(toBeAdded.toString() + \"\\n\", tasks.length());"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":25}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private int indexToBeDeleted;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public DeleteCommand(int indexToBeDeleted) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.indexToBeDeleted \u003d indexToBeDeleted;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        // Do TaskList stuff"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        Task taskToBeDeleted \u003d tasks.getTask(indexToBeDeleted);"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        tasks.delete(indexToBeDeleted);"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        // Do UI stuff"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printDelete(taskToBeDeleted.getDescription(), tasks.length());"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":26}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class DoneCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private int index;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public DoneCommand(int index) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.index \u003d index;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        // do tasklist stuff here"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        tasks.markAsDone(index);"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        // do UI stuff here"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printDone(\"     \" + tasks.getTask(index).toString() + \"\\n\");"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    public boolean setIsFinished() {"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":30}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"public class EventCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    private Task toBeAdded;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    public EventCommand(Task toBeAdded) {"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        this.toBeAdded \u003d toBeAdded;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        // Do TaskList stuff"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        tasks.add(toBeAdded);"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        // Do UI stuff"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printAdd(toBeAdded.toString() + \"\\n\", tasks.length());"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        // tbc"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":27}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class ExitCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public ExitCommand() {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        // do storage stuff"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.exitMessage();"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    public boolean setIsFinished() {"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":27}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"public class FindCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    private String cmd;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    public FindCommand(String cmd) {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"        this.cmd \u003d cmd;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) {"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"        TaskList res \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        String toSearch \u003d cmd.replaceFirst(\"find\\\\s+\", \"\");"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        for (Task task : tasks.getThingsToDo()) {"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"            if (task.getDescription().matches(\".*?\" + toSearch + \".*\")) {"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"                res.add(task);"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        // do ui stuff"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printFind(toSearch, res.printTaskList());"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        // do storage stuff"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"        // do tasklist stuff"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":28}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"public class HelpCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    public HelpCommand() {"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) {"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printHelpMessage();"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    public boolean setIsFinished() {"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":19}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"public class ListCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    public ListCommand() {}"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        // Do UI stuff here"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printList(tasks.printTaskList());"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff here"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":14}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Storage;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.logic.Ui;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"public class ToDoCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    private Task toBeAdded;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public ToDoCommand(Task toBeAdded) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.toBeAdded \u003d toBeAdded;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public String execute(TaskList tasks) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        // Do TaskList stuff"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        tasks.add(toBeAdded);"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        // Do storage stuff"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        Storage.save(tasks);"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        // Do UI stuff"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        return Ui.printAdd(toBeAdded.toString() + \"\\n\", tasks.length());"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":25}},{"path":"src/main/java/duke/common/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public class Pair\u003cT, U\u003e {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    private final T firstType;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"    private final U secondType;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"     * A constructor for a Pair class containing two arbitrary objects."},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"     * @param a the first object in the Pair."},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"     * @param b the second object in the Pair."},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    public Pair(T a, U b) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.firstType \u003d a;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        this.secondType \u003d b;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public T getT() {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        return firstType;"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    public U getU() {"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        return secondType;"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":24}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    public DukeException() {"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"        super();"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":11}},{"path":"src/main/java/duke/logic/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.logic;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.FindCommand;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.HelpCommand;"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Event;"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.Task;"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.ToDo;"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"     * Parses a command as per the Duke specification."},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"     * Available command includes:"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"     *     \u003cpre\u003e\u003ccode\u003ebye, help, find, done, delete, todo, deadline, event\u003c/code\u003e\u003c/pre\u003e"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"     * More information in the User Guide of Duke."},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"     * @param echo The command to be parsed, in String format."},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"     * @param tasks The TaskList list in which the task generated (if any) will be added to."},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a command corresponding to the parsed String"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws DukeException If the command is invalid or of the wrong form."},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws ParseException If the date cannot be parsed correctly."},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"    public static Command parseCommand(String echo, TaskList tasks) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.equals(\"bye\")) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"            assert echo !\u003d null : \"Input should not be null\";"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"            return new ExitCommand();"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.equals(\"help\")) {"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"            return new HelpCommand();"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)list\\\\s*\")) { // Querying items"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"            return new ListCommand();"},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)find\\\\s+\\\\S+\")) {"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"            return new FindCommand(echo);"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)^done.*\")) { // Checks if it matches done and an integer"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"            int index \u003d Parser.parseDone(echo, tasks);"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"            return new DoneCommand(index);"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)^delete.*\")) { // Checks if it matches delete and an integer"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"            int index \u003d Parser.parseDelete(echo, tasks.length());"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"            return new DeleteCommand(index);"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)^todo.*\")) {"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"            Task toAdd \u003d Parser.parseToDo(echo);"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"            return new ToDoCommand(toAdd);"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)deadline.*\")) {"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"            Task toAdd \u003d Parser.parseDeadline(echo);"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"            return new DeadlineCommand(toAdd);"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)event.*\")) {"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"            Task toAdd \u003d Parser.parseEvent(echo);"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"            return new EventCommand(toAdd);"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Input not recognized.\");"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"    private static Task parseToDo(String echo) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.matches(\"(?i)^todo\\\\s+\\\\S+.*\")) {"},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"            String text \u003d echo.replaceFirst(\"(?i)^todo\\\\s*\", \"\");"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"            return new ToDo(text);"},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (echo.matches(\"(?i)^todo\\\\s*\")) {"},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Please put a description to your task.\");"},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Please put a space between the command and description.\");"},{"lineNumber":73,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":76,"author":{"gitId":"theodoreleebrant"},"content":"    private static Task parseDeadline(String echo) throws DukeException {"},{"lineNumber":77,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.matches(\"(?i)^deadline\\\\s+\\\\S+.*\\\\s+\\\\/by\\\\s+\\\\S+.*\")) {"},{"lineNumber":78,"author":{"gitId":"theodoreleebrant"},"content":"            String[] res \u003d echo.replaceFirst(\"(?i)deadline\\\\s+\", \"\").strip().split(\"(?i)/by\\\\s*\", 2);"},{"lineNumber":79,"author":{"gitId":"theodoreleebrant"},"content":"            return new Deadline(res[0], res[1]);"},{"lineNumber":80,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"theodoreleebrant"},"content":"            String[] badText \u003d echo.split(\"\\\\s+\", 2);"},{"lineNumber":82,"author":{"gitId":"theodoreleebrant"},"content":"            if (badText.length \u003d\u003d 1) {"},{"lineNumber":83,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"bruh you don\u0027t have spaces\");"},{"lineNumber":84,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"theodoreleebrant"},"content":"            String badCommand \u003d badText[1];"},{"lineNumber":86,"author":{"gitId":"theodoreleebrant"},"content":"            if (badCommand.matches(\".*\\\\/by.*\")) { // The command contains by."},{"lineNumber":87,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"Did you miss the description or date? Remember to put spaces.\");"},{"lineNumber":88,"author":{"gitId":"theodoreleebrant"},"content":"            } else {"},{"lineNumber":89,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"Please put /by followed by the date.\");"},{"lineNumber":90,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":94,"author":{"gitId":"theodoreleebrant"},"content":"    private static Task parseEvent(String echo) throws DukeException {"},{"lineNumber":95,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.matches(\"(?i)^event\\\\s+\\\\S+.*\\\\s+\\\\/at\\\\s+\\\\S+.*\")) {"},{"lineNumber":96,"author":{"gitId":"theodoreleebrant"},"content":"            String[] res \u003d echo.replaceFirst(\"(?i)event\\\\s+\", \"\").strip().split(\"(?i)/at\\\\s*\", 2);"},{"lineNumber":97,"author":{"gitId":"theodoreleebrant"},"content":"            return new Event(res[0], res[1]);"},{"lineNumber":98,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"theodoreleebrant"},"content":"            String[] badText \u003d echo.split(\"\\\\s+\", 2);"},{"lineNumber":100,"author":{"gitId":"theodoreleebrant"},"content":"            if (badText.length \u003d\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"bruh you don\u0027t have spaces\");"},{"lineNumber":102,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"theodoreleebrant"},"content":"            String badCommand \u003d badText[1];"},{"lineNumber":104,"author":{"gitId":"theodoreleebrant"},"content":"            if (badCommand.matches(\"(?i).*\\\\/at.*\")) { // The command contains by."},{"lineNumber":105,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"Did you miss the description or date? Remember to put spaces.\");"},{"lineNumber":106,"author":{"gitId":"theodoreleebrant"},"content":"            } else {"},{"lineNumber":107,"author":{"gitId":"theodoreleebrant"},"content":"                throw new DukeException(\"Please put /at followed by the date.\");"},{"lineNumber":108,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":112,"author":{"gitId":"theodoreleebrant"},"content":"    private static int parseDone(String echo, TaskList tasks) throws DukeException {"},{"lineNumber":113,"author":{"gitId":"theodoreleebrant"},"content":"        int listLength \u003d tasks.length();"},{"lineNumber":114,"author":{"gitId":"theodoreleebrant"},"content":"        String res \u003d \"\";"},{"lineNumber":115,"author":{"gitId":"theodoreleebrant"},"content":"        int toBeMarked;"},{"lineNumber":116,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.matches(\"(?i)done\\\\s+[0-9]+\")) {"},{"lineNumber":117,"author":{"gitId":"theodoreleebrant"},"content":"            res \u003d echo.replaceFirst(\"done\\\\s+\", \"\");"},{"lineNumber":118,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Done must be followed by a space and an integer!\");"},{"lineNumber":120,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":122,"author":{"gitId":"theodoreleebrant"},"content":"        toBeMarked \u003d Integer.parseInt(res); // No error: regex above guarantees that."},{"lineNumber":123,"author":{"gitId":"theodoreleebrant"},"content":"        if (toBeMarked \u003e listLength || toBeMarked \u003c\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"The task does not exist! (Index out of bounds)\");"},{"lineNumber":125,"author":{"gitId":"theodoreleebrant"},"content":"        } else if (tasks.getThingsToDo().get(toBeMarked - 1).isDone()) {"},{"lineNumber":126,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"The task is already done.\");"},{"lineNumber":127,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"theodoreleebrant"},"content":"        return toBeMarked - 1;"},{"lineNumber":129,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":131,"author":{"gitId":"theodoreleebrant"},"content":"    private static int parseDelete(String echo, int listLength) throws DukeException {"},{"lineNumber":132,"author":{"gitId":"theodoreleebrant"},"content":"        String res \u003d \"\";"},{"lineNumber":133,"author":{"gitId":"theodoreleebrant"},"content":"        if (echo.matches(\"(?i)delete\\\\s+[0-9]+\")) {"},{"lineNumber":134,"author":{"gitId":"theodoreleebrant"},"content":"            res \u003d echo.replaceFirst(\"(?i)delete\\\\s+\", \"\");"},{"lineNumber":135,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":136,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Delete must be followed by a space and an integer!\");"},{"lineNumber":137,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":139,"author":{"gitId":"theodoreleebrant"},"content":"        int toBeRemoved \u003d Integer.parseInt(res); // No error: regex above guarantees that."},{"lineNumber":140,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":141,"author":{"gitId":"theodoreleebrant"},"content":"        if (toBeRemoved \u003e listLength || toBeRemoved \u003c\u003d 0) {"},{"lineNumber":142,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"The task does not exist! (Index out of bounds)\");"},{"lineNumber":143,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":145,"author":{"gitId":"theodoreleebrant"},"content":"        return toBeRemoved - 1;"},{"lineNumber":146,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":147}},{"path":"src/main/java/duke/logic/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.logic;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.FileReader;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"import duke.task.TaskList;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"     * Saves task list onto a prescribed file."},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"     * @param tasks the tasklist to be saved"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws IOException if file not successfully made (e.g. permission error)"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    public static void save(TaskList tasks) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"        // Save file"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        Path dirPath \u003d Paths.get(\"data\");"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        Path filePath \u003d Paths.get(\"data\", \"duke.txt\");"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"        // Possible error: directory doesn\u0027t exist"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"        if (!dirPath.toFile().exists()) {"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"            File data \u003d new File(dirPath.toString());"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"            data.mkdir();"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"            // Write to file"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"            String toWrite \u003d tasks.toSave();"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"            BufferedWriter wr \u003d new BufferedWriter(new FileWriter(filePath.toString()));"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"            wr.write(toWrite);"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"            wr.close();"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"An IO error occurred.\");"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"     * Loads a TaskList from a file."},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a TaskList corresponding to the file input."},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws FileNotFoundException if the file is not found."},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws IOException if an I/O error occurs."},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"    public static TaskList load() throws DukeException {"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"        Path filePath \u003d Paths.get(\"data\", \"duke.txt\");"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"        BufferedReader reader \u003d null;"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"            reader \u003d new BufferedReader(new FileReader(filePath.toString()));"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"            String nextLine;"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"            while ((nextLine \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"                try {"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"                    parser.parseCommand(nextLine, tasks).execute(tasks);"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":"                } catch (DukeException e) {"},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"An IO error occurred.\");"},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"        return tasks;"},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":71}},{"path":"src/main/java/duke/logic/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.logic;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the string as passed into it."},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"     * @param msg the message to be returned."},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message passed in."},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    private static String printMessage(String msg) {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        return msg;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the initial message sent when opening the program."},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown at the start of the program."},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public static String initialMessage() {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Hello! I\u0027m Duke the Bad Dragon.\\n\" + \"What can I do for you?\\n\";"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the initial message sent when closing the program."},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown at the end of the program."},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"    public static String exitMessage() {"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(\"Bye. Hope to see you again soon!\\n\");"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the message when a task is marked as done."},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"     * @param msg the String representation of the task, to be printed."},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown when a task is marked as done."},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printDone(String msg) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + msg;"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the message when the list needs to be printed."},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"     * @param msg the String representation of the list, to be printed."},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown when the list needs to be printed."},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printList(String msg) {"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Here are the tasks in your list:\\n\" + msg;"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the message when the list needs to be printed."},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"     * @param srch The String passed as the search key."},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"     * @param tasks the String representation of the list, to be printed."},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown when the list needs to be printed."},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printFind(String srch, String tasks) {"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"You searched for: \" + srch + \"\\nHere are the tasks in your list:\\n\" + tasks;"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the message when a task is added."},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"     * @param description the String description of the task added."},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"     * @param numberOfTasks the number of tasks in the list."},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown when a task is added."},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printAdd(String description, int numberOfTasks) {"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"                + description + \"\\n\""},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":"                + \"Now you have \" + numberOfTasks;"},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"        if (numberOfTasks \u003d\u003d 1) {"},{"lineNumber":72,"author":{"gitId":"theodoreleebrant"},"content":"            toPrint \u003d toPrint + \" task in the list.\\n\";"},{"lineNumber":73,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"theodoreleebrant"},"content":"            toPrint \u003d toPrint + \" tasks in the list.\\n\";"},{"lineNumber":75,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":77,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":79,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the message when a task is deleted."},{"lineNumber":81,"author":{"gitId":"theodoreleebrant"},"content":"     * @param description the String description of the task deleted."},{"lineNumber":82,"author":{"gitId":"theodoreleebrant"},"content":"     * @param numberOfTasks the number of tasks in the list."},{"lineNumber":83,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the message that is shown when a task is added."},{"lineNumber":84,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printDelete(String description, int numberOfTasks) {"},{"lineNumber":86,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":87,"author":{"gitId":"theodoreleebrant"},"content":"                + description + \"\\n\""},{"lineNumber":88,"author":{"gitId":"theodoreleebrant"},"content":"                + \"Now you have \" + numberOfTasks;"},{"lineNumber":89,"author":{"gitId":"theodoreleebrant"},"content":"        if (numberOfTasks \u003d\u003d 1) {"},{"lineNumber":90,"author":{"gitId":"theodoreleebrant"},"content":"            toPrint \u003d toPrint + \" task in the list.\\n\";"},{"lineNumber":91,"author":{"gitId":"theodoreleebrant"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"theodoreleebrant"},"content":"            toPrint \u003d toPrint + \" tasks in the list.\\n\";"},{"lineNumber":93,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":95,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":97,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the help message."},{"lineNumber":99,"author":{"gitId":"theodoreleebrant"},"content":"     * @return the help message."},{"lineNumber":100,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"theodoreleebrant"},"content":"    public static String printHelpMessage() {"},{"lineNumber":102,"author":{"gitId":"theodoreleebrant"},"content":"        String toPrint \u003d \"Hi!\\n\""},{"lineNumber":103,"author":{"gitId":"theodoreleebrant"},"content":"                + \"For information on the commands and formats, please visit https://theodoreleebrant.github.io/ip/\";"},{"lineNumber":104,"author":{"gitId":"theodoreleebrant"},"content":"        return printMessage(toPrint);"},{"lineNumber":105,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":106}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"    private LocalDateTime timeBy;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"     * @param desc A Constructor for the Deadline object representing a task with a deadline."},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"     * @param timeBy The time at which the event is due."},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws DateTimeParseException"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    public Deadline(String desc, String timeBy) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        super(desc);"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"            LocalDateTime dateTime;"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"            DateTimeFormatter formatter \u003d"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy[ HHmm]\");"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"            TemporalAccessor temporalAccessor \u003d formatter.parseBest(timeBy, LocalDateTime::from, LocalDate::from);"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"            if (temporalAccessor instanceof LocalDateTime) {"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"                this.timeBy \u003d (LocalDateTime) temporalAccessor;"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"                this.timeBy \u003d ((LocalDate) temporalAccessor).atStartOfDay();"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Cannot parse date. Make sure the format is dd/MM/yyyy HHmm (optional time)\");"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"        String sign \u003d isDone ? \"✓\" : \"✗\";"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"        return \"[D][\" + sign + \"] \" + description + \" (by: \" + getDate() + \")\";"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"    public TaskType getType() {"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"        return TaskType.DEADLINE;"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDate() {"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"        return timeBy.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDelimiter() {"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"        return \"/by\";"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":56}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"import duke.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    private LocalDateTime timeAt;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"     * Constructs an Event object, which is a task with a time at which it is done."},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"     * @param desc The description of the event."},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"     * @param timeAt The time at which the event is done."},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"     * @throws ParseException when the date time formatting is wrong."},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"    // TODO: 17/8/20 make a toString"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    public Event(String desc, String timeAt) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"        super(desc);"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"            LocalDateTime dateTime;"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"            DateTimeFormatter formatter \u003d"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"                    DateTimeFormatter"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"                            .ofPattern(\"dd/MM/yyyy[ HHmm]\");"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"            TemporalAccessor temporalAccessor \u003d"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"                    formatter.parseBest("},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"                            timeAt,"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"                            LocalDateTime::from, LocalDate::from"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"                    );"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"            if (temporalAccessor instanceof LocalDateTime) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"                this.timeAt \u003d (LocalDateTime) temporalAccessor;"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"                this.timeAt \u003d ((LocalDate) temporalAccessor).atStartOfDay();"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"            throw new DukeException(\"Cannot parse date. Make sure the format is dd/MM/yyyy[ HHmm] (optional time)\");"},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns a string representation of the event."},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"     * The toString method for the Event object returns a string consisting of"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"     * [E] indicating event, the description of the event, and the time of the event."},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"     * @return A String representation of the Event object."},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"        String sign \u003d isDone ? \"✓\" : \"✗\";"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"        return \"[E][\" + sign + \"] \" + description + \" (at: \" + getDate() + \")\";"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"    public TaskType getType() {"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"        return TaskType.EVENT;"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDate() {"},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"        return timeAt.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));"},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDelimiter() {"},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"        return \"/at\";"},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":71}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    protected boolean isDone;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"     * Constructor for a Task."},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"     * Should only be accessible from the children of Task."},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"     * @param description the description of the task."},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    protected Task(String description) {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    public boolean isDone() {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"        return isDone;"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    public void setDone(boolean done) {"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        isDone \u003d done;"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDescription() {"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"        return description;"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the type of the task."},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"     * A task may be a todo, an event, or a description."},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"     * @return an enum representing the type of the task."},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"    public TaskType getType() {"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        return TaskType.NONE;"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the date associated with the task."},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"     * If there are no dates associated to the task, it returns an empty String."},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a String representing the date associated to the task."},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDate() {"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"        return \"\";"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"     * Returns the delimiter associated with the task."},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":"     * The delimiter is a String that separates the description from the date"},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"     * If there are no delimiter associated to the task, it returns an empty String."},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a String representing the delimiter associated to the task."},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":"    public String getDelimiter() {"},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"        return \"\";"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":56}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"import duke.common.Pair;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    private ArrayList\u003cTask\u003e thingsToDo;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"        this.thingsToDo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"     * Adds a task to the list."},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"     * @param task the task to be added"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a Pair, containing s String representation of the Task and the index number of the Task."},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    public Pair\u003cString, Integer\u003e add(Task task) {"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        this.thingsToDo.add(task);"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"        return new Pair\u003c\u003e(task.toString() + \"\\n\", thingsToDo.size());"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"        // TODO: 26/8/20   change this to length"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"    public ArrayList\u003cTask\u003e getThingsToDo() {"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"        return thingsToDo;"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"     * Formats the list for printing purposes."},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a String representation of the list."},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"theodoreleebrant"},"content":"    public String printTaskList() {"},{"lineNumber":34,"author":{"gitId":"theodoreleebrant"},"content":"        String message \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"theodoreleebrant"},"content":"        for (int i \u003d 0; i \u003c thingsToDo.size(); i++) {"},{"lineNumber":36,"author":{"gitId":"theodoreleebrant"},"content":"            message \u003d message"},{"lineNumber":37,"author":{"gitId":"theodoreleebrant"},"content":"                    + \"     \""},{"lineNumber":38,"author":{"gitId":"theodoreleebrant"},"content":"                    + (i + 1)"},{"lineNumber":39,"author":{"gitId":"theodoreleebrant"},"content":"                    + \".\""},{"lineNumber":40,"author":{"gitId":"theodoreleebrant"},"content":"                    + thingsToDo.get(i).toString()"},{"lineNumber":41,"author":{"gitId":"theodoreleebrant"},"content":"                    + \"\\n\";"},{"lineNumber":42,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"theodoreleebrant"},"content":"        return message;"},{"lineNumber":44,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":46,"author":{"gitId":"theodoreleebrant"},"content":"    public void markAsDone(int i) {"},{"lineNumber":47,"author":{"gitId":"theodoreleebrant"},"content":"        this.thingsToDo.get(i).setDone(true);"},{"lineNumber":48,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":50,"author":{"gitId":"theodoreleebrant"},"content":"    public int length() {"},{"lineNumber":51,"author":{"gitId":"theodoreleebrant"},"content":"        return thingsToDo.size();"},{"lineNumber":52,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":54,"author":{"gitId":"theodoreleebrant"},"content":"    public Task getTask(int i) {"},{"lineNumber":55,"author":{"gitId":"theodoreleebrant"},"content":"        return this.thingsToDo.get(i);"},{"lineNumber":56,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":58,"author":{"gitId":"theodoreleebrant"},"content":"    public void delete(int i) {"},{"lineNumber":59,"author":{"gitId":"theodoreleebrant"},"content":"        this.thingsToDo.remove(i);"},{"lineNumber":60,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":62,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"theodoreleebrant"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"theodoreleebrant"},"content":"        return \"Task{\" + \"thingsToDo\u003d\" + thingsToDo + \u0027}\u0027;"},{"lineNumber":65,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":67,"author":{"gitId":"theodoreleebrant"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"theodoreleebrant"},"content":"     * Formats the list to a String for saving purposes."},{"lineNumber":69,"author":{"gitId":"theodoreleebrant"},"content":"     * @return a String representation of the list."},{"lineNumber":70,"author":{"gitId":"theodoreleebrant"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"theodoreleebrant"},"content":"    public String toSave() {"},{"lineNumber":72,"author":{"gitId":"theodoreleebrant"},"content":"        String res \u003d \"\";"},{"lineNumber":73,"author":{"gitId":"theodoreleebrant"},"content":"        for (Task task : thingsToDo) {"},{"lineNumber":74,"author":{"gitId":"theodoreleebrant"},"content":"            res \u003d res"},{"lineNumber":75,"author":{"gitId":"theodoreleebrant"},"content":"                    + task.getType().toString() + \" \""},{"lineNumber":76,"author":{"gitId":"theodoreleebrant"},"content":"                    + task.getDescription() + \" \""},{"lineNumber":77,"author":{"gitId":"theodoreleebrant"},"content":"                    + task.getDelimiter() + \" \""},{"lineNumber":78,"author":{"gitId":"theodoreleebrant"},"content":"                    + task.getDate() + \"\\n\";"},{"lineNumber":79,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"theodoreleebrant"},"content":"        return res.trim();"},{"lineNumber":81,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":82}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    TODO {"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"        @Override"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"        public String toString() {"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"            return \"todo\";"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    },"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"    DEADLINE {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"        public String toString() {"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"            return \"deadline\";"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    },"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    EVENT {"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"        @Override"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        public String toString() {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"            return \"event\";"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"    },"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    NONE"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":23}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"    public ToDo(String desc) {"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"        super(desc);"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        String sign \u003d isDone ? \"✓\" : \"✗\";"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"        return \"[T][\" + sign + \"] \" + description;"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    public TaskType getType() {"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"        return TaskType.TODO;"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"}"}],"authorContributionMap":{"theodoreleebrant":18}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cTextArea fx:id\u003d\"dialog\" editable\u003d\"false\" prefHeight\u003d\"99.0\" styleClass\u003d\"text-area\" stylesheets\u003d\"@TextArea.css\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"         \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"         \u003c/padding\u003e"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"            \u003cInsets /\u003e"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"         \u003c/HBox.margin\u003e\u003c/TextArea\u003e"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"theodoreleebrant":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":""},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"\u003cAnchorPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #383838; -fx-border-color: #383838;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"    \u003cchildren\u003e"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" maxHeight\u003d\"45.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: #818688;\" AnchorPane.bottomAnchor\u003d\"-2.0\" AnchorPane.leftAnchor\u003d\"-2.0\" AnchorPane.rightAnchor\u003d\"75.0\" /\u003e"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" maxHeight\u003d\"45.0\" maxWidth\u003d\"76.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #515658;\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"-1.0\" AnchorPane.rightAnchor\u003d\"-1.0\" /\u003e"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"            \u003ccontent\u003e"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #383838; -fx-border-color: #383838;\" /\u003e"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"            \u003c/content\u003e"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"theodoreleebrant":16}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"//import duke.Event;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"//import java.text.ParseException;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"//import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"//import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"//public class EventTest {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"//    @Test"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"//    void newEvent() {"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"//        try {"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"//            Event event \u003d new Event(\"desc\", \"02-02-2020 1820\");"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"//            assertEquals(event.description, \"desc\");"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"//            assertEquals(event.timeAt,"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"//                    LocalDateTime.parse(\"02-02-2020 1820\", DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\")));"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"//        } catch (ParseException e) {"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"//            e.printStackTrace();"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"//        }"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"//    }"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"//}"}],"authorContributionMap":{"theodoreleebrant":22}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"//import duke.*;"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"//import java.text.ParseException;"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"//"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"//public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"//    @Test"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"//    void parseAdd() {"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"//        Parser parser \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"//        String in \u003d \"todo asdf\";"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"//        Task todo \u003d new ToDo(\"asdf\");"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"//        Task res \u003d null;"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"//        try {"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"//            res \u003d parser.parseAdd(in);"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"//        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"//            e.printStackTrace();"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"//        } catch (ParseException e) {"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"//            e.printStackTrace();"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"//        }"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"//        assertEquals(todo.toString(), res.toString());"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"//    }"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"//}"}],"authorContributionMap":{"theodoreleebrant":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"theodoreleebrant"},"content":"deadline"},{"lineNumber":2,"author":{"gitId":"theodoreleebrant"},"content":"deadline/by"},{"lineNumber":3,"author":{"gitId":"theodoreleebrant"},"content":"deadline /by"},{"lineNumber":4,"author":{"gitId":"theodoreleebrant"},"content":"deadline /by"},{"lineNumber":5,"author":{"gitId":"theodoreleebrant"},"content":"deadline /at"},{"lineNumber":6,"author":{"gitId":"theodoreleebrant"},"content":"deadline      /by"},{"lineNumber":7,"author":{"gitId":"theodoreleebrant"},"content":"deadline      s     /by      asdf"},{"lineNumber":8,"author":{"gitId":"theodoreleebrant"},"content":"deadline correct /by asdfg"},{"lineNumber":9,"author":{"gitId":"theodoreleebrant"},"content":"deadline      asdfasdfasdf /by asdfasdfas"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"todo a"},{"lineNumber":11,"author":{"gitId":"theodoreleebrant"},"content":"todo b"},{"lineNumber":12,"author":{"gitId":"theodoreleebrant"},"content":"todoc"},{"lineNumber":13,"author":{"gitId":"theodoreleebrant"},"content":"todo         d"},{"lineNumber":14,"author":{"gitId":"theodoreleebrant"},"content":"todo e"},{"lineNumber":15,"author":{"gitId":"theodoreleebrant"},"content":"todo     f"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"todo deadline"},{"lineNumber":17,"author":{"gitId":"theodoreleebrant"},"content":"todo event deadline"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"event deadline"},{"lineNumber":19,"author":{"gitId":"theodoreleebrant"},"content":"deadline event /by asdf /at asd"},{"lineNumber":20,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":21,"author":{"gitId":"theodoreleebrant"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"theodoreleebrant"},"content":"done 2"},{"lineNumber":23,"author":{"gitId":"theodoreleebrant"},"content":"done 3"},{"lineNumber":24,"author":{"gitId":"theodoreleebrant"},"content":"done -1"},{"lineNumber":25,"author":{"gitId":"theodoreleebrant"},"content":"done a"},{"lineNumber":26,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":27,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":28,"author":{"gitId":"theodoreleebrant"},"content":"list"},{"lineNumber":29,"author":{"gitId":"theodoreleebrant"},"content":"asdf"},{"lineNumber":30,"author":{"gitId":"theodoreleebrant"},"content":"lists"},{"lineNumber":31,"author":{"gitId":"theodoreleebrant"},"content":"liststst"},{"lineNumber":32,"author":{"gitId":"theodoreleebrant"},"content":"liststststs"}],"authorContributionMap":{"theodoreleebrant":32}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"theodoreleebrant"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"theodoreleebrant"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"theodoreleebrant":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"theodoreleebrant"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"theodoreleebrant":1,"-":37}}]
