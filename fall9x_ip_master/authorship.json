[
  {
    "path": "src/main/java/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    LIST, BYE, DONE, TODO, EVENT, DEADLINE, DELETE"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 13
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import jdk.jshell.spi.ExecutionControl;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.channels.NonWritableChannelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.concurrent.CopyOnWriteArraySet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String line \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String bye \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ArrayList\u003cTask\u003e inputList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        inputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (command.equals(bye)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                System.out.println(template(\"Cya!!\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    String reply \u003d inputHandler(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    System.out.println(template(reply));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                } catch (InvalidArgumentException | InvalidCommandException e){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String template(String reply) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return line + reply + \"\\n\" + line;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String inputHandler(String input) throws InvalidArgumentException, InvalidCommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String[] commands \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Commands current;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            current \u003d Commands.valueOf(commands[0].toUpperCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            switch(current) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return display();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return updateTask(Integer.valueOf(commands[1]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return addTodo(commands[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    String[] arr \u003d commands[1].split(\"/at\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return addEvent(arr[0], arr[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    String[] arr2 \u003d commands[1].split(\"/by\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return addDeadline(arr2[0], arr2[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return deleteTask(Integer.valueOf(commands[1]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    throw new InvalidCommandException(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry, your argument cannot be empty!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (InvalidArgumentException exception) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(exception.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (InvalidCommandException exception) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, your command is not recognised!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String display() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        str.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(String.valueOf(i+1) + \".\" + inputList.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String addTodo(String task) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Todo current \u003d new Todo(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.add(current);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(\"Got it bro, I\u0027ve added this task:\\n  \").append(current.toString() + \"\\n\").append("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \"Now you have \").append(inputList.size()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry, ToDo does not accept this argument!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String addDeadline(String task, String by) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Deadline current \u003d new Deadline(task, by);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.add(current);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(\"Got it bro, I\u0027ve added this task:\\n  \").append(current.toString() + \"\\n\").append("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \"Now you have \").append(inputList.size()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry, Deadline does not accept this argument!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String addEvent(String task, String at) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Event current \u003d new Event(task, at);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.add(current);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(\"Got it bro, I\u0027ve added this task:\\n  \").append(current.toString() + \"\\n\").append("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \"Now you have \").append(inputList.size()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry, Event does not accept this argument!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String updateTask(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(\"Solid bro!! I\u0027ve marked this task as done:\\n\").append("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    inputList.get(index - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch(IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry! The task index you wanted to complete does not exist!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private String deleteTask(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            str.append(\"Understood. I\u0027ve removed this task:\\n  \").append("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    inputList.get(index - 1).toString()).append(\"Now you have \").append("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.size() - 1).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            inputList.remove(index - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new InvalidArgumentException(\"Sorry! The index to be removed does not exist!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String welcome \u003d \"Yo I\u0027m Dood!!\\nAnything I can do for you?\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        System.out.println(line + welcome + line);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Duke bot \u003d new Duke();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        bot.init();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 147,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return \"[D]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 13
    }
  },
  {
    "path": "src/main/java/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class InvalidArgumentException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 5
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void unMarkAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return (this.isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 26
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "todo read lecture notes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "deadline read lecture notes /by Sunday 23rd 11pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "event statistic lecture /at Monday 24th 4-6pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "todo buy new pens"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "fall9x": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "fall9x": 1
    }
  }
]
