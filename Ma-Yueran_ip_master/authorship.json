[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "![GitHub Logo](docs/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Duke** is an application that can help you to *manage tasks*. It supports *saving*, *editing*, *deleting* and "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "*displaying* **tasks** using simple **commands**."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Prerequisites: Java 11 or later installed.**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Download** the latest version of Duke `(a jar file)` from the [website](https://github.com/Ma-Yueran/ip/releases)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Copy** the jar file to the directory you want to use as the *home directory* for the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. `Double click` the jar file or enter `java -jar duke.jar` in console to run the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. The window shown above should appear."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. *Well done!* Now you can start using Duke!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. Refer to the [User Guide](https://ma-yueran.github.io/ip/) for more information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## Setting up in Intellij for Developers"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Prerequisites: JDK 11, update Intellij to the most recent version.**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Fork** the project to your GitHub repository."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Clone** the repository to your pc."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Delete** `.idea` folder in the project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. Use Intellij to open the `build.gradle` file, **remember** to choose `Open as Project`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. Now, wait for Intellij to set up the project for you."
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    toolVersion \u003d \u00278.36\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 18,
      "-": 44
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "![GitHub Logo](Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Duke** is an application that can help you to *manage tasks*. It supports *saving*, *editing*, *deleting* and "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "*displaying* **tasks** using simple **commands**."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**Prerequisites: Java 11 or later installed.**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Download** the latest version of Duke `(a jar file)` from the [website](https://github.com/Ma-Yueran/ip/releases)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. **Copy** the jar file to the directory you want to use as the *home directory* for the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. `Double click` the jar file or enter `java -jar duke.jar` in console to run the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. The window shown above should appear."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "1. *Well done!* Now you can start using Duke!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Creating a new ToDo task: `todo`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `todo \u003ctask description\u003e`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `todo read book`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: *Todo* task created **if there is no duplications**."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Creating a new Event task: `event`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `event \u003ctask description\u003e /at \u003ctime\u003e`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `event have dinner /at 18:00`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: *Event* task created **if there is no duplications**."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Creating a new Deadline task: `deadline`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `deadline \u003ctask description\u003e /by \u003ctime\u003e`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `deadline return book /by next Firday`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: *Deadline* task created **if there is no duplications**."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Listing current tasks: `list`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: A list of current tasks shown."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Deleting a task using an index: `delete`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `delete \u003ctask index\u003e`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: The task with the given index is deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Tagging a task: `tag`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `tag \u003ctask index\u003e \u003ctag\u003e`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `tag 2 This is a tag...`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: The task with the given index is tagged with the input tag string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Removing the tag of a task: `untag`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `untag \u003ctask index\u003e`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `untag 2`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: The tag of  the task with the given index is removed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `done \u003ctask index\u003e`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `done 3`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: The task with the given index is marked as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Finding tasks using a keyword: `find`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "(The *keyword* does not have to be a word)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `find re`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: All tasks that contains the keyword in their description are shown."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Showing all available commands: `help`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: Descriptions and formats of all commands are shown."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Exiting the application: `bye`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Example: `bye`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: All current tasks are saved, and the application ends."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Showing the table of current tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Method: Click `View` -\u003e `Task List...`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: A window containing the table of tasks pops up."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "### Showing the table of all commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Method: Click `Help` -\u003e `Commands...`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Expected outcome: A window containing the table of all commands pops up."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "## Saving Task Data"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "**3 Ways of Saving Task Data in Duke**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Click `File` -\u003e `Save`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Choose `Yes` in Exit window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "![GitHub Logo](ExitWindow.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Enter command `bye` to exit the application."
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 121,
      "-": 11
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 103
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.gui.GuiResponse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.input.UserInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiResponse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Duke is a console program that can save tasks and modify saved tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeCommandSet commandSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeState state;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected UiResponse uiResponse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected GuiResponse guiResponse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected CommandParser commandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeTaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected TaskStorage taskStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeStorage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandSet \u003d new DukeCommandSet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        state \u003d new DukeState();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiResponse \u003d new UiResponse(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiResponse \u003d new GuiResponse(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskStorage \u003d new TaskStorage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage \u003d new DukeStorage(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //---------------------------------------------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets up things at start."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param useGui going to use gui or not"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void onStart(boolean useGui) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage.loadSavedTasks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        state.setUseGui(useGui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void onExit() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage.saveCurrentTasks();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the response string based on input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandParser.parse(input, this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return guiResponse.getResponse();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //---------------------------------------------------------------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Runs the Duke console program."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        onStart(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiResponse.greet();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        while (!state.getExitLoop()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String inputLine \u003d UserInput.getOneLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandParser.parse(inputLine, this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        onExit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * The main function of Duke"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param args arguments"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException likely to be thrown when there are problems"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * loading or saving data"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //region getters"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeCommandSet getCommandSet() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return commandSet;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeState getState() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UiResponse getUiResponse() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return uiResponse;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public GuiResponse getGuiResponse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return guiResponse;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeTaskList getTaskList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TaskStorage getTaskStorage() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskStorage;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStorage getStorage() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //endregion"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 126,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.gui.DukeGuiWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.onStart(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/DukeGuiWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            BorderPane bp \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Scene scene \u003d new Scene(bp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fxmlLoader.\u003cDukeGuiWindow\u003egetController().setUp(duke, stage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 34
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The super class of all types of commands in Duke, cannot be instantiated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected String[] names;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected String description \u003d \"no description provided.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected String format \u003d \"no format provided.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Do something."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the info needed for execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public abstract void execute(String str, Duke duke);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the names of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the array of names"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String[] getNames() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the whole description of this command, containing format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return command description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getWholeDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return description + \"\\nFormat: \" + format;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String names \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String name : this.names) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            names +\u003d name + \", \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // removes the \", \" at the end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d names.substring(0, names.length() - 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 57
    }
  },
  {
    "path": "src/main/java/duke/command/CommandFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CommandFormat {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EXIT_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"bye\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String LIST_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DEADLINE_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"deadline \u003ctask description\u003e /by \u003ctime\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EVENT_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"event \u003ctask description\u003e /at \u003ctime\u003e\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TODO_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"todo \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DONE_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"done \u003ctask index\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DELETE_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"delete \u003ctask index\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String FIND_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"find \u003ckeyword\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String HELP_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TAG_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"tag \u003ctask index\u003e \u003ctag\u003e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String UNTAG_CMD_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"untag \u003ctask index\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 37
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * CommandParser split user\u0027s input string line into parts, then try to figure"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * out the command to executed and try to execute it. If the input line"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * cannot be understood by CommandParser, it would reports that to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tries to split the input string, then tries to figure out the command,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * and tries to execute if a command is figured out."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the input line"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void parse(String str, Duke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitParts \u003d splitInputLine(str);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName \u003d splitParts[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String rest \u003d splitParts[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Command command \u003d tryGetCommand(commandName, duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (command !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            tryExecuteCommand(command, rest, duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String[] splitInputLine(String inputLine) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitParts \u003d new String[2];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] inputParts \u003d inputLine.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        splitParts[0] \u003d inputParts[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        splitParts[1] \u003d inputParts.length \u003d\u003d 2 ? inputParts[1].trim() : \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return splitParts;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Command tryGetCommand(String commandName, Duke duke) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command \u003d duke.getCommandSet().getCommand(commandName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (UnknownCommandException exception) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            reportException(exception, duke);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void tryExecuteCommand(Command command, String rest, Duke duke) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(rest, duke);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            reportException(exception, duke);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void reportException(DukeException exception, Duke duke) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportException(exception);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportException(exception);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 69
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DeadlineCommand creates a Deadline task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DeadlineCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DeadlineCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"deadline\" };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Creates a deadline task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.DEADLINE_CMD_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a Deadline task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the task info"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Deadline newDeadline \u003d Deadline.createDeadline(str);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getTaskList().addTask(newDeadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(newDeadline, duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Deadline newDeadline, Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportNewTask(newDeadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportNewTask(newDeadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 39
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.util.ParseUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DeleteCommand asks DukeTaskList to remove the task with the input index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DeleteCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"delete\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Deletes a task using its index.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.DELETE_CMD_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Asks DukeTaskList to remove the task with the input index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws InvalidIndexException thrown when the index is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) throws InvalidIndexException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(str);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.getTaskList().deleteTask(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(task, duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Task task, Duke duke) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportDeleteTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportDeleteTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(String str) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!ParseUtil.canParseInteger(str)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(str);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 54
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.util.ParseUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DoneCommand marks the task with the index as done, reports to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DoneCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"done\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Marks a task as done using its index.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.DONE_CMD_FORMAT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Marks the task with the index as done, reports to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws InvalidIndexException thrown when the index is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) throws InvalidIndexException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(str);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.getTaskList().getTask(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(task, duke);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Task task, Duke duke) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportDoneTask(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportDoneTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(String str) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!ParseUtil.canParseInteger(str)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(str);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 55
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * EventCommand creates a Event task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs an EventCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public EventCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"event\" };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Creates an event task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.EVENT_CMD_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a Event task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the task info"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the currentDuke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Event newEvent \u003d Event.createEvent(str);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getTaskList().addTask(newEvent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(newEvent, duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Event newEvent, Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportNewTask(newEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportNewTask(newEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * ExitCommand ends Duke by changing exitLoop state in DukeState."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs an ExitCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"bye\" };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Ends the program.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.EXIT_CMD_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Ends Duke by changing exitLoop state in DukeState."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str any string after command \"exit\" on the same line"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getState().endLoop();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Duke duke) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyKeywordException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * FindCommand finds all tasks that contain the keyword entered by user,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * then report to user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"find\" };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Finds the tasks containing the keyword.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.FIND_CMD_FORMAT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Finds all tasks containing the keyword using DukeTaskList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * then use UiResponse to report to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the keyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFound \u003d duke.getTaskList().findTasks(str);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(tasksFound, duke);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(ArrayList\u003cTask\u003e tasksFound, Duke duke) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportGivenTasks(tasksFound);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportGivenTasks(tasksFound);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(String str) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (str.isBlank()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new EmptyKeywordException(ExceptionMessage.EMPTY_KEYWORD_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 51
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a HelpCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"help\" };"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Lists descriptions of all commands.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.HELP_CMD_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(duke);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Duke duke) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().showAllCommands(duke.getCommandSet());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().showAllCommands(duke.getCommandSet());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * ListCommand asks UiResponse to print out current tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a ListCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"list\" };"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Lists all current tasks.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.LIST_CMD_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Asks UiResponse to print out current tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str any string after command \"list\" on the same line"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Duke duke) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportCurrentTasks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportCurrentTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 36
    }
  },
  {
    "path": "src/main/java/duke/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.BlankTagException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.util.ParseUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a TagCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TagCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"tag\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Tags a task in the task list with some string.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.TAG_CMD_FORMAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tags the task with the input index with some string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the info needed for execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitStr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(splitStr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(splitStr[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String tag \u003d splitStr[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.getTaskList().getTask(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        task.setTag(tag);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(task, duke);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Task task, Duke duke) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportTagTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportTagTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(String[] splitStr) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr.length !\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.TAG_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new IncorrectFormatException(errMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!ParseUtil.canParseInteger(splitStr[0])) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(splitStr[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr[1].isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.BLANK_TAG_MESSAGE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new BlankTagException(errMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 66
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * TodoCommand creates a ToDo task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a TodoCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TodoCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"todo\" };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Creates a todo task.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.TODO_CMD_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a ToDo task, stores it in task list, reports to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str the task info"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ToDo newToDo \u003d ToDo.createToDo(str);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getTaskList().addTask(newToDo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(newToDo, duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(ToDo newToDo, Duke duke) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportNewTask(newToDo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportNewTask(newToDo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 39
    }
  },
  {
    "path": "src/main/java/duke/command/UntagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.util.ParseUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UntagCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs an UntagCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UntagCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        names \u003d new String[] { \"untag\" };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        description \u003d \"Deletes the tag of the task with the given index.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        format \u003d CommandFormat.UNTAG_CMD_FORMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute(String str, Duke duke) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(str);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int taskIndex \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task task \u003d duke.getTaskList().getTask(taskIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        boolean wasTagged;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (task.getTag().equals(Task.NO_TAG)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            wasTagged \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            wasTagged \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            task.setTag(Task.NO_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response(task, wasTagged, duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void response(Task task, boolean wasTagged, Duke duke) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getUseGui()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getGuiResponse().reportUntagTask(task, wasTagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.getUiResponse().reportUntagTask(task, wasTagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void checkException(String str) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!ParseUtil.canParseInteger(str)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(str);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(errMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 54
    }
  },
  {
    "path": "src/main/java/duke/data/DukeCommandSet.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.TagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.UntagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DukeCommandSet contains all supported commands in Duke, and provides"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * a method to get commands using command names."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeCommandSet {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private HashMap\u003cString, Command\u003e commandSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DukeCommandSet, register all supported commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeCommandSet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandSet \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new ExitCommand());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new ListCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DoneCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new TodoCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DeadlineCommand());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new EventCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new DeleteCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new FindCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new HelpCommand());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new TagCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        registerCommand(new UntagCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void registerCommand(Command command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String name : command.getNames()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.put(name, command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the command using its name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param commandName the name of the command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws UnknownCommandException thrown when the name does not belong to any commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Command getCommand(String commandName) throws UnknownCommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!commandSet.containsKey(commandName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.UNKNOWN_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new UnknownCommandException(errMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return commandSet.get(commandName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public HashMap\u003cString, Command\u003e getAllCommands() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return commandSet;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 72
    }
  },
  {
    "path": "src/main/java/duke/data/DukeState.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DukeState stores the state information of Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean exitLoop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean useGui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DukeState."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        exitLoop \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        useGui \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the exitLoop value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the exitLoop value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getExitLoop() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return exitLoop;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Makes exitLoop true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void endLoop() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        exitLoop \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets useGui value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getUseGui() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return useGui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets useGui value."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param useGui"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setUseGui(boolean useGui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.useGui \u003d useGui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 49
    }
  },
  {
    "path": "src/main/java/duke/data/DukeTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DukeTaskList manages tasks in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DukeTaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeTaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the task with the index."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param index the task index"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        indexCheck(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Adds the input task to the current task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert task !\u003d null : \"task cannot be null\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (hasDuplicate(task)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.getDuplicateTaskMessage(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new DuplicateTaskException(errMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean hasDuplicate(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (t.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Deletes the task with the index from the current task list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param index the index of the task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the task deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task taskDelete \u003d getTask(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskDelete;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the current number of tasks saved in the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the number of tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Overrides all current tasks using the tasks in the input ArrayList of Tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param tasks the ArrayList of tasks"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the ArrayList of current tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the ArrayList of current tasks"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void indexCheck(int index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (index - 1 \u003e\u003d getSize() || index \u003c 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new InvalidIndexException(ExceptionMessage.getInvalidIndexMessage(index + \"\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Finds tasks containing the input keyword."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param keyword the keyword"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the list of tasks containing the keyword"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert !keyword.isBlank() : \"keyword for findTasks cannot be empty\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (task.containsKeyWord(keyword)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                tasksFound.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasksFound;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 119
    }
  },
  {
    "path": "src/main/java/duke/exception/BlankTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class BlankTagException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public BlankTagException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DukeException is the super class of all other DukeExceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public abstract class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected DukeException(String errMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DuplicateTaskException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EmptyKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public EmptyKeywordException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EmptyTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public EmptyTimeException(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/ExceptionMessage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.CommandFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ExceptionMessage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DEADLINE_INCORRECT_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"Please follow the format of \" + CommandFormat.DEADLINE_CMD_FORMAT + \"\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EVENT_INCORRECT_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"Please follow the format of \" + CommandFormat.EVENT_CMD_FORMAT + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TAG_INCORRECT_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"Please follow the format of \" + CommandFormat.TAG_CMD_FORMAT + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TODO_NO_DESCRIPTION_MESSAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String UNKNOWN_COMMAND_MESSAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EMPTY_KEYWORD_MESSAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"OOPS!!! The keyword for find command cannot be empty.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EMPTY_TIME_MESSAGE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"OOPS!!! The time cannot be empty.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String BLANK_TAG_MESSAGE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \"OOPS!!! The tag of a task cannot be blank\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getInvalidIndexMessage(String wrongIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"Sorry \" + wrongIndex + \" is not a valid index\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getUnknownTaskMessage(String unknownTask) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return unknownTask + \"is not a task type\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getDuplicateTaskMessage(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return task.getDescription() + \" already exits in the current task list.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "src/main/java/duke/exception/IncorrectFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Thrown when there are problems of string format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class IncorrectFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public IncorrectFormatException(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Thrown when there are invalid index problems."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public InvalidIndexException(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Thrown when creating a ToDo with no description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class NoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public NoDescriptionException(String errMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Thrown when a command entered is not in the DukeCommandSet."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UnknownCommandException(String errMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Thrown when the task type is unknown. e.g. Can be thrown after modifying"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * auto saved task data."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UnknownTaskTypeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UnknownTaskTypeException(String errMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 12
    }
  },
  {
    "path": "src/main/java/duke/gui/AllCommandsWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class AllCommandsWindow {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays a popup window of all commands in Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the current Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void display(Duke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // table of commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableView\u003cCommand\u003e table \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // table columns"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cCommand, String\u003e commandNameColumn \u003d new TableColumn\u003c\u003e(\"Command Name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandNameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"name\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cCommand, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cCommand, String\u003e formatColumn \u003d new TableColumn\u003c\u003e(\"Format\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        formatColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"format\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // set columns"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        table.getColumns().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                commandNameColumn,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                formatColumn"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // put commands into table"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        initTable(table, duke);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // layout"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        VBox layout \u003d new VBox();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        layout.getChildren().add(table);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // scene"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Scene scene \u003d new Scene(layout, 650, 400);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // stage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setTitle(\"Tasks\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void initTable(TableView\u003cCommand\u003e table, Duke duke) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        HashMap\u003cString, Command\u003e allCommands \u003d duke.getCommandSet().getAllCommands();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String key : allCommands.keySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            table.getItems().add(allCommands.get(key));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 66
    }
  },
  {
    "path": "src/main/java/duke/gui/DukeGuiWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.version.Version;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeGuiWindow extends BorderPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label dukeMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label userMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label messageLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets up things on the start."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param stage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setUp(Duke duke, Stage stage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // sets up style"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.getScene().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // handles close request"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            event.consume();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                exception.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // makes Duke greet the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getGuiResponse().greet();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        dukeMessage.setText(duke.getGuiResponse().getResponse());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // version"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        version.setText(Version.CURRENT_VERSION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Handles the user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        userMessage.setText(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        dukeMessage.setText(response);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getState().getExitLoop()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            duke.onExit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Saves all current tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveTasks() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getStorage().saveCurrentTasks();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        messageLabel.setText(GuiResponse.TASK_SAVED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Asks the user if he or she wants to save current tasks, then exit the program."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void exit() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        boolean saveTasks \u003d ExitWindow.display();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (saveTasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            saveTasks();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (ExitWindow.isStillExit()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows all available commands to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllCommands() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        AllCommandsWindow.display(duke);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows tasks table"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllTasks() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TaskListWindow.display(duke);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 118
    }
  },
  {
    "path": "src/main/java/duke/gui/ExitWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Modality;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ExitWindow {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static boolean answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static boolean stillExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static boolean isLoaded \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays an ExitWindow asking if the user want to save current tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the answer of the user (Y/N)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static boolean display() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!isLoaded) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            loadLayout();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.showAndWait();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void loadLayout() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FXMLLoader fxmlLoader \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                new FXMLLoader(Main.class.getResource(\"/view/ExitWindow.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Parent root \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Scene scene \u003d new Scene(root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        scene.getStylesheets().add(\"view/ExitWindowStyle.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.initModality(Modality.APPLICATION_MODAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setTitle(\"Exit\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            stillExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isLoaded \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets if the user still want to exit the program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static boolean isStillExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return stillExit;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Handles the event of yesButton being clicked."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void yesButtonClicked() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        answer \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stillExit \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Handles the event of noButton being clicked."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void noButtonClicked() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        answer \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stillExit \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 83
    }
  },
  {
    "path": "src/main/java/duke/gui/GuiResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class GuiResponse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TASK_SAVED \u003d \"Tasks saved successfully...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StringBuilder response;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a UiResponse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the Duke that will use this UiResponse"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public GuiResponse(Duke duke) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void resetResponse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.delete(0, response.length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Prints out the current tasks saved in task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportCurrentTasks() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Current tasks:\\n\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d duke.getTaskList().getSize(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(i + \". \" + duke.getTaskList().getTask(i) + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getTaskList().getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(\"None\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a new task is added to the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the new task added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportNewTask(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(task + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Now you have \" + duke.getTaskList().getSize() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a task has been marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the task marked as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDoneTask(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Nice, I\u0027ve marked this task as done: \\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(task + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a task has been deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the task deleted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDeleteTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(task + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Now you have \" + duke.getTaskList().getSize() + \" tasks in the list\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Says good bye to the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportExit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String exitWords \u003d \"Bye, hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(exitWords);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows the input tasks to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param tasks tasks to show"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportGivenTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(\"None\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                response.append(i + 1 + \". \" + tasks.get(i) + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports the input exception to user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param exception input exception"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportException(DukeException exception) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(exception.getMessage() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows description of all commands."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param commandSet the DukeCommandSet"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllCommands(DukeCommandSet commandSet) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        HashMap\u003cString, Command\u003e allCommands \u003d commandSet.getAllCommands();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(\"Here are all commands in Duke:\\n\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String commandName : allCommands.keySet()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(\"\\\"\" + commandName + \"\\\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(allCommands.get(commandName).getWholeDescription() + \"\\n\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports that the task has been tagged."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the tagged task"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportTagTask(Task task) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        response.append(task.getDescription() + \" has been tagged with \" + task.getTag());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports that the task has been untagged."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the untagged task"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportUntagTask(Task task, boolean wasTagged) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resetResponse();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (wasTagged) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(\"The tag of \" + task.getDescription() + \" has been removed.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            response.append(task.getDescription() + \" was already untagged.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 175
    }
  },
  {
    "path": "src/main/java/duke/gui/TaskListWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TaskListWindow {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays a popup window of all current tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void display(Duke duke) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // table of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableView\u003cTask\u003e table \u003d new TableView\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // table columns"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cTask, String\u003e typeColumn \u003d new TableColumn\u003c\u003e(\"Task Type\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        typeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"icon\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cTask, String\u003e descriptionColumn \u003d new TableColumn\u003c\u003e(\"Description\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        descriptionColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cTask, Time\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"time\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cTask, String\u003e tagColumn \u003d new TableColumn\u003c\u003e(\"Tag\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"tag\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        TableColumn\u003cTask, String\u003e isDoneColumn \u003d new TableColumn\u003c\u003e(\"Is Task Done?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDoneColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"isDone\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // set columns"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        table.getColumns().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                typeColumn,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                descriptionColumn,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                timeColumn,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                tagColumn,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                isDoneColumn"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // put tasks into the table"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        initTasks(table, duke);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // layout"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        VBox layout \u003d new VBox();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        layout.getChildren().add(table);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // scene"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Scene scene \u003d new Scene(layout, 500, 300);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // stage"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.setTitle(\"Tasks\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void initTasks(TableView\u003cTask\u003e table, Duke duke) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d duke.getTaskList().getTasks();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        table.getItems().addAll(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 72
    }
  },
  {
    "path": "src/main/java/duke/input/UserInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.input;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * UserInput gets inputs from the key broad."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UserInput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets one line entered by the key broad."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the string of the input line"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getOneLine() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String inputLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return inputLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 20
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * DukeStorage helps Duke saving and loading data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DukeStorage object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the duke that will use this DukeStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStorage(Duke duke) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStorage \u003d duke.getTaskStorage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Loads saved tasks to the current task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void loadSavedTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        duke.getTaskList().setTasks(taskStorage.getSavedTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Saves all current tasks in task list into the task txt files."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveCurrentTasks() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStorage.saveTasks(duke.getTaskList().getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 38
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownTaskTypeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * TaskStorage saves and loads task data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path folderPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File folderFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path taskFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File taskFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Path taskStateFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private File taskStateFile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Scanner taskReader;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Scanner taskStateReader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a TaskStorage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TaskStorage() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderPath \u003d Paths.get(\".\", \"saves\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderFile \u003d folderPath.toFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFilePath \u003d Paths.get(folderPath.toString(), \"taskSave.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFile \u003d taskFilePath.toFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateFilePath \u003d Paths.get(folderPath.toString(), \"isDoneSave.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateFile \u003d taskStateFilePath.toFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        folderFile.mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskFile.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateFile.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskReader \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateReader \u003d new Scanner(taskStateFile);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Task stringToTask(String taskString) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] taskStringParts \u003d taskString.split(\" \", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String taskType \u003d taskStringParts[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String taskInfo \u003d taskStringParts[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return ToDo.createToDo(taskInfo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return Deadline.createDeadline(taskInfo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return Event.createEvent(taskInfo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new UnknownTaskTypeException(ExceptionMessage.getUnknownTaskMessage(taskType));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String taskToString(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return task.getTaskType() + \" \" + task.getTaskInfo();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets all tasks saved in the task saving txt files."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the ArrayList of all tasks saved"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e getSavedTasks() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        while (taskReader.hasNextLine() \u0026\u0026 taskStateReader.hasNextLine()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String taskString \u003d taskReader.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String[] taskStateString \u003d taskStateReader.nextLine().split(\" \", 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            boolean isTaskDone \u003d Boolean.parseBoolean(taskStateString[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String tag \u003d taskStateString[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Task task \u003d stringToTask(taskString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            task.setDone(isTaskDone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            task.setTag(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Saves all tasks given to the task saving txt files."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param tasks tasks to be saved"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileWriter taskWriter \u003d new FileWriter(taskFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FileWriter taskStateWriter \u003d new FileWriter(taskStateFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Remove all current contents in the files"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskWriter.write(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateWriter.write(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskWriter.append(taskToString(task) + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String taskState \u003d task.isDone() + \" \" + task.getTag() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskStateWriter.append(taskState);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskWriter.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskStateWriter.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiPrint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A Deadline is a task with a deadline. Deadline objects store both task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * description and deadline time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Deadline(String icon, String description, String deadline, String taskInfo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setTime(Time.stringToTime(deadline));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a Deadline using a string with task info,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * throws exceptions when the string has wrong format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param deadlineInfo the string of task info"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the Deadline object created"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Deadline createDeadline(String deadlineInfo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitStr \u003d deadlineInfo.split(\" /by \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(splitStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String deadline \u003d splitStr[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(UiPrint.DEADLINE_ICON, description, deadline, deadlineInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String[] splitStr) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr.length !\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.DEADLINE_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new IncorrectFormatException(errMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr[1].isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.EMPTY_TIME_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new EmptyTimeException(errMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return super.toString() + \" (by: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiPrint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A Event is a task with a time. Event objects store both task description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Event(String icon, String description, String time, String taskInfo) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setTime(Time.stringToTime(time));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a Event using a string with task info,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * throws exceptions when the string has wrong format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param eventInfo the string of task info"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the Event object created"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Event createEvent(String eventInfo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String[] splitStr \u003d eventInfo.split(\" /at \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(splitStr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String description \u003d splitStr[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String time \u003d splitStr[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Event newEvent \u003d new Event(UiPrint.EVENT_ICON, description, time, eventInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String[] splitStr) throws IncorrectFormatException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr.length !\u003d 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.EVENT_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new IncorrectFormatException(errMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (splitStr[1].isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.EMPTY_TIME_MESSAGE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new EmptyTimeException(errMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return super.toString() + \" (at: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.time.Time;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Task is the super class of all types of tasks, cannot be instantiated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String NO_TAG \u003d \"Nil\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String icon;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Task(String icon, String description, String taskInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.icon \u003d icon;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        time \u003d Time.stringToTime(\"Nil\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tag \u003d NO_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the string of the task type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return task type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"task\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean containsKeyWord(String keyWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return description.contains(keyWord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String statusIcon \u003d isDone ? UiPrint.TICK : UiPrint.CROSS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String tag \u003d this.tag.equals(NO_TAG) ? \"\" : \" #\" + this.tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return icon + statusIcon + \" \" + description + tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTag(String tag) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert !tag.isBlank() : ExceptionMessage.BLANK_TAG_MESSAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTime(Time time) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String taskType;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (icon.equals(UiPrint.DEADLINE_ICON)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskType \u003d \"Deadline\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (icon.equals(UiPrint.EVENT_ICON)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskType \u003d \"Event\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else if (icon.equals(UiPrint.TODO_ICON)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskType \u003d \"Todo\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return \"Error!!!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getIsDone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            isDone \u003d \"done\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            isDone \u003d \"not done yet\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 109
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiPrint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A ToDo is a task with no time info. Todo objects store only task description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ToDo(String icon, String description, String taskInfo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(icon, description, taskInfo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a ToDo using a string of task info"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param todoInfo the string of task info"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the ToDo object created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static ToDo createToDo(String todoInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        checkException(todoInfo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ToDo newToDo \u003d new ToDo(UiPrint.TODO_ICON, todoInfo, todoInfo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void checkException(String str) throws NoDescriptionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (str.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String errMessage \u003d ExceptionMessage.TODO_NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw new NoDescriptionException(errMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 38
    }
  },
  {
    "path": "src/main/java/duke/time/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Time stores time information. The information can either be a specific"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * time or some string description of the time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String timeDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time(LocalDateTime time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        timeDescription \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Time(String timeDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        time \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Converts a string to Time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param timeString the time string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the Time object formed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Time stringToTime(String timeString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert !timeString.isBlank() : \"timeString cannot be empty\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        LocalDateTime time \u003d TimeParser.parse(timeString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return new Time(timeString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return new Time(time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return time.format(TimeFormat.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return timeDescription;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 53
    }
  },
  {
    "path": "src/main/java/duke/time/TimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The accepted formats for parsing a string to some specific time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TimeFormat {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER_1 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER_2 \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 21
    }
  },
  {
    "path": "src/main/java/duke/time/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * TimeParser tries to parse a string to a specific time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tries to parse a string to LocalDateTime."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param timeString the string to be parsed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the result LocalDateTime, null when cannot parse."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static LocalDateTime parse(String timeString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(timeString, TimeFormat.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DateTimeParseException exception1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(timeString, TimeFormat.DATE_FORMATTER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                return date.atTime(LocalTime.MIN);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            } catch (DateTimeParseException exception2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    LocalTime time \u003d LocalTime.parse(timeString, TimeFormat.TIME_FORMATTER_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    return LocalDate.now().atTime(time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                } catch (DateTimeParseException exception3) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        LocalTime time \u003d LocalTime.parse(timeString, TimeFormat.TIME_FORMATTER_2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        return LocalDate.now().atTime(time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    } catch (DateTimeParseException exception4) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 41
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPrint.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * UiPrint stores strings such as LOGO, icons, symbols, and provides"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * methods to form Strings or print strings."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiPrint {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final char STAR \u003d \u0027*\u0027;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TICK \u003d \"[Done]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String CROSS \u003d \"[Not Done]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Draws a line formed by a char with customized length."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param ch the char to form the line"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param length the length of the line"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void drawLine(char ch, int length) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert length \u003e\u003d 0 : \"the length of a line cannot be negative\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(getLine(ch, length));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Forms a line formed by a char with customized length."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param ch the char to form the line"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param length the length of the line"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the formed line"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static String getLine(char ch, int length) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assert length \u003e\u003d 0 : \"the length of a line cannot be negative\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String line \u003d \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            line +\u003d ch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        line +\u003d \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 50
    }
  },
  {
    "path": "src/main/java/duke/ui/UiResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * UiResponse interacts with users by printing out messages in console."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * e.g. When the user enters a command, the command function would be"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * executed, and methods in UiResponse is usually called in by the execute function"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * to respond the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiResponse {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a UiResponse."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param duke the Duke that will use this UiResponse"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UiResponse(Duke duke) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(UiPrint.LOGO);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Prints out the current tasks saved in task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportCurrentTasks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Current tasks:\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d duke.getTaskList().getSize(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(i + \". \" + duke.getTaskList().getTask(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (duke.getTaskList().getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(\"None\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a new task is added to the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the new task added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportNewTask(Task task) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Now you have \" + duke.getTaskList().getSize() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a task has been marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the task marked as done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDoneTask(Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Nice, I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Tells the user a task has been deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the task deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDeleteTask(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Now you have \" + duke.getTaskList().getSize() + \" tasks in the list\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Says good bye to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportExit() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String exitWords \u003d \"Bye, hope to see you again soon!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(exitWords);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows the input tasks to the user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param tasks tasks to show"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportGivenTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(\"None\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                System.out.println(i + 1 + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports the input exception to user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param exception input exception"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportException(DukeException exception) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"\\n\" + exception.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows description of all commands."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param commandSet the DukeCommandSet"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllCommands(DukeCommandSet commandSet) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        HashMap\u003cString, Command\u003e allCommands \u003d commandSet.getAllCommands();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(\"Here are all commands in Duke:\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        for (String commandName : allCommands.keySet()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            description \u003d \"\\\"\" + commandName + \"\\\"\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            description +\u003d allCommands.get(commandName).getWholeDescription();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(description + \"\\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports that the task has been tagged."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the tagged task"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportTagTask(Task task) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.out.println(task.getDescription() + \" has been tagged with \" + task.getTag());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Reports that the task has been untagged."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param task the untagged task"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportUntagTask(Task task, boolean wasTagged) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (wasTagged) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(\"The tag of \" + task.getDescription() + \" has been removed.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(task.getDescription() + \" was already untagged.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiPrint.drawLine(UiPrint.STAR, 50);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 196
    }
  },
  {
    "path": "src/main/java/duke/util/ParseUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Contains parse related functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ParseUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Checks if the input string can be parsed to an integer."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param str string to parse"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static boolean canParseInteger(String str) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (NumberFormatException exception) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 21
    }
  },
  {
    "path": "src/main/java/duke/version/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.version;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Version {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String CURRENT_VERSION \u003d \"1.2\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6
    }
  },
  {
    "path": "src/main/resources/view/DukeGuiWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.DukeGuiWindow\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cVBox BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"25.0\" prefWidth\u003d\"66.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"348.0\" promptText\u003d\"Enter commands here\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"48.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"25.0\" prefWidth\u003d\"77.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cLabel styleClass\u003d\"bottom-label\" text\u003d\"Version:\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cLabel fx:id\u003d\"version\" styleClass\u003d\"bottom-label\" text\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"17.0\" prefWidth\u003d\"117.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cLabel styleClass\u003d\"bottom-label\" text\u003d\"Message:\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cLabel fx:id\u003d\"messageLabel\" styleClass\u003d\"bottom-label\" text\u003d\"None\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cVBox spacing\u003d\"5.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cScrollPane hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"238.0\" prefWidth\u003d\"540.0\" vbarPolicy\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cLabel fx:id\u003d\"dukeMessage\" text\u003d\"Duke Message...\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cScrollPane prefHeight\u003d\"37.0\" prefWidth\u003d\"540.0\" vbarPolicy\u003d\"NEVER\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cLabel fx:id\u003d\"userMessage\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cBorderPane.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/BorderPane.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cMenuBar BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cmenus\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#saveTasks\" text\u003d\"Save\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#exit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003citems\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#showAllTasks\" text\u003d\"Task List...\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/items\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#showAllCommands\" text\u003d\"Commands...\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/menus\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 112
    }
  },
  {
    "path": "src/main/resources/view/ExitWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"198.0\" prefWidth\u003d\"331.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.ExitWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel layoutX\u003d\"39.0\" layoutY\u003d\"50.0\" text\u003d\"Do you want to Save Current Tasks?\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cButton fx:id\u003d\"noButton\" layoutX\u003d\"96.0\" layoutY\u003d\"93.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#noButtonClicked\" text\u003d\"No\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cButton fx:id\u003d\"yesButton\" layoutX\u003d\"194.0\" layoutY\u003d\"93.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#yesButtonClicked\" text\u003d\"Yes\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel layoutX\u003d\"49.0\" layoutY\u003d\"147.0\" text\u003d\"Close this window if you do not want to exit\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 27
    }
  },
  {
    "path": "src/test/java/duke/DukeStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.gui.GuiStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.storage.DukeStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.storage.TaskStorageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeStub extends Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a DukeStub."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeStub() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandSet \u003d new DukeCommandSet();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        state \u003d new DukeState();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiResponse \u003d new UiStub(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiResponse \u003d new GuiStub(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList \u003d new DukeTaskListStub();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskStorage \u003d new TaskStorageStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage \u003d new DukeStorage(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 33
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListSideEffects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DeadlineCommand command \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DeadlineCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskAdded() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"return book /by 12:33:01\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskListSideEffects.addTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportNewTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskListSideEffects.reset();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"return book\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                IncorrectFormatException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.DEADLINE_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 62
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListSideEffects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DeleteCommand command \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DeleteCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskDeleted() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskListSideEffects.deleteTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskListSideEffects.reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"hahaha\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(invalidInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 58
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DoneCommand command \u003d new DoneCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DoneCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskDeleted() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportDoneTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"hahaha\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(invalidInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 57
    }
  },
  {
    "path": "src/test/java/duke/command/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListSideEffects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final EventCommand command \u003d new EventCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new EventCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskAdded() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"return book /at 12:33:01\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskListSideEffects.addTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportNewTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskListSideEffects.reset();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"return book\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                IncorrectFormatException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.EVENT_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 62
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final ExitCommand command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new ExitCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_anyInput_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d \"abc\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(input, dukeStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, dukeStub.getState().getExitLoop());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 37
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListSideEffects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyKeywordException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final FindCommand command \u003d new FindCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new FindCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String keyword \u003d \"book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(keyword, dukeStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskListSideEffects.findTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskListSideEffects.reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    EmptyKeywordException.class, () -\u003e command.execute(emptyInput, dukeStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(ExceptionMessage.EMPTY_KEYWORD_MESSAGE, exception.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 59
    }
  },
  {
    "path": "src/test/java/duke/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final HelpCommand command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new HelpCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_anyInput_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d \"123\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(input, dukeStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiShowAllCommands);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new ListCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_anyInput_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d \"123\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(input, dukeStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportCurrentTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/command/TagCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.BlankTagException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final TagCommand command \u003d new TagCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new TagCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String tag \u003d \"hahaha\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d index + \" \" + tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(input, dukeStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            String taskTag \u003d dukeStub.getTaskList().getTask(1).getTag();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(tag, taskTag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportTagTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_incorrectFormatInput_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d \"asdf\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                IncorrectFormatException.class, () -\u003e command.execute(input, dukeStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.TAG_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidIndexInput_exceptionThrown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidIndex \u003d \"one\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d invalidIndex + \" hahaha\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e command.execute(input, dukeStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(invalidIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_blankTagInput_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input \u003d \"1      \";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                BlankTagException.class, () -\u003e command.execute(input, dukeStub));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.BLANK_TAG_MESSAGE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 89
    }
  },
  {
    "path": "src/test/java/duke/command/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeTaskListSideEffects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final TodoCommand command \u003d new TodoCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new TodoCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskAdded() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"read book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskListSideEffects.addTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportNewTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskListSideEffects.reset();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                NoDescriptionException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.TODO_NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 63
    }
  },
  {
    "path": "src/test/java/duke/command/UntagCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.ui.UiSideEffects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UntagCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final UntagCommand command \u003d new UntagCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects uiSideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new UntagCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_normalInput_taskDeleted() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String normalInput \u003d \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            command.execute(normalInput, dukeStub);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, uiSideEffects.uiReportUntagTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            uiSideEffects.reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void execute_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidInput \u003d \"hahaha\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e command.execute(invalidInput, dukeStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.getInvalidIndexMessage(invalidInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 57
    }
  },
  {
    "path": "src/test/java/duke/data/DukeCommandSetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeCommandSetTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeCommandSet commandSet \u003d new DukeCommandSet();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getCommand_validCommandName_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName01 \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName02 \u003d \"todo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String commandName03 \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName01);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName02);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandSet.getCommand(commandName03);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getCommand_invalidCommandName_exceptionThrown() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String invalidCommandName \u003d \"hahaha\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                UnknownCommandException.class, () -\u003e commandSet.getCommand(invalidCommandName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.UNKNOWN_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/data/DukeTaskListSideEffects.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTaskListSideEffects {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static DukeTaskListSideEffects instance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:OFF: VisibilityModifier"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean addTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean deleteTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getSize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean setTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean findTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:ON: VisibilityModifier"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static DukeTaskListSideEffects getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            instance \u003d new DukeTaskListSideEffects();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Resets all values to false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getTask \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        addTask \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        deleteTask \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getSize \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setTasks \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getTasks \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        findTasks \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 41
    }
  },
  {
    "path": "src/test/java/duke/data/DukeTaskListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTaskListStub extends DukeTaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public final Task taskAdded \u003d ToDo.createToDo(\"read book\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public final Task taskDeleted \u003d ToDo.createToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public final int size \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public final ArrayList\u003cTask\u003e currentTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private DukeTaskListSideEffects taskListSideEffects \u003d DukeTaskListSideEffects.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public DukeTaskListStub() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskListSideEffects.getTask \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskAdded;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskListSideEffects.addTask \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskListSideEffects.deleteTask \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return taskDeleted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskListSideEffects.setTasks \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return currentTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskListSideEffects.findTasks \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return currentTasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 58
    }
  },
  {
    "path": "src/test/java/duke/data/DukeTaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeTaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeTaskList taskList \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DukeTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTask_validIndex_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task taskToBeGet \u003d ToDo.createToDo(\"read book\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList.addTask(taskToBeGet);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int validIndex \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Task taskGet \u003d taskList.getTask(validIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(taskToBeGet, taskGet);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int invalidIndex \u003d 10;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e taskList.getTask(invalidIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(ExceptionMessage.getInvalidIndexMessage(invalidIndex + \"\"), exception.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void addTask_normalInput_taskAdded() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task taskToBeAdded \u003d ToDo.createToDo(\"read book\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int currentSize \u003d taskList.getSize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskList.addTask(taskToBeAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(currentSize + 1, taskList.getSize());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(taskToBeAdded, taskList.getTask(currentSize + 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void deleteTask_validIndex_taskDeleted() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Task taskToBeDeleted \u003d ToDo.createToDo(\"read book\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList.addTask(taskToBeDeleted);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int validIndex \u003d taskList.getSize();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int currentSize \u003d taskList.getSize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Task deletedTask \u003d taskList.deleteTask(validIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(taskToBeDeleted, deletedTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(currentSize - 1, taskList.getSize());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void deleteTask_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        int invalidIndex \u003d -2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                InvalidIndexException.class, () -\u003e taskList.deleteTask(invalidIndex));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(ExceptionMessage.getInvalidIndexMessage(invalidIndex + \"\"), exception.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getSizeTest() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        DukeTaskList newTaskList \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(0, newTaskList.getSize());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        newTaskList.addTask(ToDo.createToDo(\"read book\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        newTaskList.addTask(ToDo.createToDo(\"return book\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(2, newTaskList.getSize());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        newTaskList.deleteTask(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(1, newTaskList.getSize());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        newTaskList.setTasks(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(0, newTaskList.getSize());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTasksTest() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks.add(ToDo.createToDo(\"read book\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasks.add(ToDo.createToDo(\"return book\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskList.setTasks(tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(tasks, taskList.getTasks());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTasksTest() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ArrayList\u003cTask\u003e tasksSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasksSet.add(ToDo.createToDo(\"read book\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tasksSet.add(ToDo.createToDo(\"return book\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        taskList.setTasks(tasksSet);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ArrayList\u003cTask\u003e tasksGet \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(tasksSet, tasksGet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 141
    }
  },
  {
    "path": "src/test/java/duke/gui/GuiSideEffects.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class GuiSideEffects {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static GuiSideEffects instance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:OFF: VisibilityModifier"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiGreet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportCurrentTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportNewTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportDoneTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportDeleteTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiShowAllCommands;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportTagTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean guiReportUntagTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:ON: VisibilityModifier"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private GuiSideEffects() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static GuiSideEffects getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            instance \u003d new GuiSideEffects();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Resets all values to false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiGreet \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportCurrentTasks \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportNewTask \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportDeleteTask \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportDoneTask \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiShowAllCommands \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportTagTask \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        guiReportUntagTask \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/gui/GuiStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class GuiStub extends GuiResponse {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private GuiSideEffects sideEffects \u003d GuiSideEffects.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public GuiStub(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiGreet \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportCurrentTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportCurrentTasks \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportNewTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportNewTask \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDoneTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportDoneTask \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDeleteTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportDeleteTask \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportExit \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllCommands(DukeCommandSet commandSet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiShowAllCommands \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportTagTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportTagTask \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportUntagTask(Task task, boolean wasTagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.guiReportUntagTask \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 59
    }
  },
  {
    "path": "src/test/java/duke/storage/DukeStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.DukeStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DukeStorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final DukeStub dukeStub \u003d new DukeStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TaskStorageSideEffects taskStorageSideEffects \u003d TaskStorageSideEffects.getInstance();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void constructorTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DukeStorage(dukeStub);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void loadSavedTasksTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DukeStorage(dukeStub).loadSavedTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskStorageSideEffects.getSavedTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskStorageSideEffects.reset();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveCurrentTasksTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new DukeStorage(dukeStub).saveCurrentTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            assertEquals(true, taskStorageSideEffects.saveTasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            taskStorageSideEffects.reset();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 51
    }
  },
  {
    "path": "src/test/java/duke/storage/TaskStorageSideEffects.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TaskStorageSideEffects {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static TaskStorageSideEffects instance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:OFF: VisibilityModifier"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean getSavedTasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean saveTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:ON: VisibilityModifier"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TaskStorageSideEffects() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static TaskStorageSideEffects getInstance() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            instance \u003d new TaskStorageSideEffects();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Resets all values to false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getSavedTasks \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        saveTasks \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 30
    }
  },
  {
    "path": "src/test/java/duke/storage/TaskStorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class TaskStorageStub extends TaskStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TaskStorageSideEffects sideEffects \u003d TaskStorageSideEffects.getInstance();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TaskStorageStub() throws IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ArrayList\u003cTask\u003e getSavedTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.getSavedTasks \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.saveTasks \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 27
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_normalInput_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book /by tmr\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book /by 18:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner /by 2020-08-26 12:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input01);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input02);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Deadline.createDeadline(input03);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_incorrectFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String incorrectFormatInput \u003d \"read book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // lambda used here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                IncorrectFormatException.class, () -\u003e Deadline.createDeadline(incorrectFormatInput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.DEADLINE_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createDeadline_blankTime_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String blankTimeInput \u003d \"read book /by      \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                EmptyTimeException.class, () -\u003e Deadline.createDeadline(blankTimeInput));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.EMPTY_TIME_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"deadline\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                Deadline.createDeadline(\"read book /by tmr\").getTaskType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 59
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.EmptyTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.IncorrectFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createEvent_normalInput_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book /at tmr\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book /at 18:00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner /at 2020-08-26 12:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input01);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input02);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Event.createEvent(input03);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createEvent_incorrectFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String incorrectFormatInput \u003d \"read book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                IncorrectFormatException.class, () -\u003e Event.createEvent(incorrectFormatInput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.EVENT_INCORRECT_FORMAT_MESSAGE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createEvent_blankTime_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String blankTimeInput \u003d \"read book /at     \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                EmptyTimeException.class, () -\u003e Event.createEvent(blankTimeInput));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.EMPTY_TIME_MESSAGE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"event\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                Event.createEvent(\"read book /at tmr\").getTaskType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 59
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.ExceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.exception.NoDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createToDo_normalInput_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input01 \u003d \"read book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input02 \u003d \"return book\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String input03 \u003d \"have dinner\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input01);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input02);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ToDo.createToDo(input03);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            fail(exception.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void createToDo_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Exception exception \u003d assertThrows(NoDescriptionException.class, () -\u003e ToDo.createToDo(\"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String errMessage \u003d ExceptionMessage.TODO_NO_DESCRIPTION_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(errMessage, exception.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void getTaskTypeTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        assertEquals(\"todo\", ToDo.createToDo(\"read book\").getTaskType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/ui/UiSideEffects.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiSideEffects {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static UiSideEffects instance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:OFF: VisibilityModifier"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiGreet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportCurrentTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportNewTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportDoneTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportDeleteTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiShowAllCommands;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportTagTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean uiReportUntagTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    //CHECKSTYLE:ON: VisibilityModifier"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static UiSideEffects getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            instance \u003d new UiSideEffects();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Resets all values to false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiGreet \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportCurrentTasks \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportNewTask \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportDeleteTask \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportDoneTask \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiShowAllCommands \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportTagTask \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        uiReportUntagTask \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 42
    }
  },
  {
    "path": "src/test/java/duke/ui/UiStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.data.DukeCommandSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiStub extends UiResponse {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private UiSideEffects sideEffects \u003d UiSideEffects.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public UiStub(Duke duke) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(duke);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiGreet \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportCurrentTasks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportCurrentTasks \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportNewTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportNewTask \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDoneTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportDoneTask \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportDeleteTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportDeleteTask \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportExit \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showAllCommands(DukeCommandSet commandSet) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiShowAllCommands \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportTagTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportTagTask \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void reportUntagTask(Task task, boolean wasTagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        sideEffects.uiReportUntagTask \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 59
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "event jump"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "Hahaha"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "deadline sleep"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "todo have dinner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "# run the program, feed commands from duke.input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 37
    }
  }
]
