[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    LocalDate deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Deadline(String taskName, LocalDate date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Deadline(String taskName, LocalDate deadline, boolean isCompleted) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "       super(taskName,isCompleted);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "       this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String deadlineFormatted \u003d deadline.format(formatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s%s%s\", \"[D]\", super.toString(), \"(by: \", deadlineFormatted + \")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static char line \u003d \u0027*\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void loopMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //gets input and displays it"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ui.handleInteraction();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Loads a file from a given file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param filePath Location of the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void loadFile(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Given a file path, read all contents of the file and convert them to Tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void readFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e sentences \u003d storage.readFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String sentence : sentences) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String taskName \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (sentence.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //Sentence is in the form [T][\u003cStatus of Task\u003e ]  \u003cTask Name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //find out whether task is done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove [T]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                sentence \u003d sentence.substring(index + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                boolean isCompleted \u003d sentence.startsWith(\"[DONE]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get index after closing bracket ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 3) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get task name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                taskName \u003d sentence.substring(index + 3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Task toBeAdded \u003d isCompleted ? new Todo(taskName, true) : new Todo(taskName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                taskList.addTask(toBeAdded);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            } else if (sentence.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //Sentence is in the form [D][\u003cStatus of Task\u003e]  \u003cTask Name\u003e  (\u003cDeadline\u003e)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove [D]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                sentence \u003d sentence.substring(index + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //check if task is completed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                boolean isCompleted \u003d sentence.startsWith(\"[DONE]\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get index after closing bracket ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 3) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get task name, i.e. everything before opening bracket"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                sentence \u003d sentence.substring(index + 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                taskName \u003d getStringBeforeCharacter(sentence, \u0027(\u0027);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (taskName.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted entry"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get task deadline"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String deadline \u003d getStringAfterCharacter(sentence, \u0027 \u0027);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (deadline.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted entry"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove () brackets and by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d deadline.indexOf(\":\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d deadline.length() - 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                deadline \u003d deadline.substring(index + 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove ) closing bracket"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                deadline \u003d deadline.substring(0, deadline.length() - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //add task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    LocalDate deadlineDate \u003d LocalDate.parse(deadline, formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    Task toBeAdded \u003d new Deadline(taskName, deadlineDate, isCompleted);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    taskList.addTask(toBeAdded);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted input"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            } else if (sentence.startsWith(\"[E\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //Sentence is in the form [E][\u003cStatus of Task\u003e]   (at: tmr)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove [E]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                sentence \u003d sentence.substring(index + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //check if task is completed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                boolean isCompleted \u003d sentence.startsWith(\"[DONE]\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get index after closing bracket ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d sentence.indexOf(\"]\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d sentence.length() - 3) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get task name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                sentence \u003d sentence.substring(index + 3);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                taskName \u003d getStringBeforeCharacter(sentence, \u0027(\u0027);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (taskName.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted entry"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //get task deadline"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String time \u003d getStringAfterCharacter(sentence, \u0027 \u0027);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (time.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted entry"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove () brackets and at"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                index \u003d time.indexOf(\":\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                if (index \u003d\u003d -1 || index \u003e\u003d time.length() - 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                time \u003d time.substring(index + 2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //remove ) closing bracket"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                time \u003d time.substring(0, time.length() - 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                //add task"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    LocalDate timeDate \u003d LocalDate.parse(time, formatter);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    Task toBeAdded \u003d new Event(taskName, timeDate, isCompleted);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    taskList.addTask(toBeAdded);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    //corrupted input"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Get the substring that comes after the first instance of the character"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an empty String if character is not found in the String"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Example: getStringAfterCharacter(\"abc def\", \u0027 \u0027) returns \"def\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param task String to be operated on"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param character Character for the String to search for"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Substring after the character"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static String getStringAfterCharacter(String task, Character character) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //gets String after character, e.g. if input is \"Apple Juice\" and character is \" \", method returns \"Juice\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d task.indexOf(character);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d task.length() - 1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //index not found, or index is last char in string"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //get everything after the space"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String taskName \u003d task.substring(index + 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return taskName;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Get the substring that comes before the first instance of the character"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Returns an empty String if character is not found"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Example: getStringAfterCharacter(\"abc def\", \u0027 \u0027) returns \"abc\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param task String to be operated on"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param character Character for the String to search for"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Substring after the character"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static String getStringBeforeCharacter(String task, char character) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //gets a string before the first character"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //e.g. if input is \"Apple juice\", and character is \" \", method returns \"Apple\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d task.indexOf(character);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //space not found, or index is first char in String"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return task.substring(0, index);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String filePath \u003d home + \"/tasks.txt\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        ui \u003d new Ui(taskList, storage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        loadFile(filePath);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean fileExists \u003d file.exists();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (fileExists) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            readFile();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        loopMethod();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 229,
      "-": 4
    }
  },
  {
    "path": "src/main/java/EmptyArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class EmptyArgumentException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    EmptyArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 13
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    LocalDate time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Event(String taskName, LocalDate date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.time \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Event(String taskName, LocalDate time, boolean isCompleted) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName,isCompleted);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String timeFormatted \u003d time.format(formatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s%s%s\", \"[E]\", super.toString(), \"(at: \", timeFormatted + \")\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 23
    }
  },
  {
    "path": "src/main/java/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.omg.CORBA.DynAnyPackage.Invalid;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class InvalidArgumentException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    InvalidArgumentException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.errorMessage \u003d \"Sorry, Duke does not recognize your command!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    InvalidArgumentException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.errorMessage  \u003d errorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 16
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Constructor for Parser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param taskList List of tasks that the Parser interacts with"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param storage Storage that the Parser interacts with"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Parser(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Update the storage after an operation is performed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void updateStorage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e taskStrings \u003d tasks.stream().map(Task :: toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        storage.updateFile(taskStrings);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Makes sense of a user\u0027s command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param command Command given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether operation was successful"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean handleCommand(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleDelete(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleDone(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleAddTodo(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleAddDeadline(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleAddEvent(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            handleList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return handleSearchTask(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        else if (command.startsWith(\"bye\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "           return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleSearchTask(String command) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (command.length() \u003c 6) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"Command must be in the form \u0027find \u003ctask name\u003e\u0027\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String name \u003d command.substring(5); //remove everything before \"find\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] words \u003d name.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cTask\u003e tasksThatMatched \u003d taskList.findMatchingTasks(words);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (tasksThatMatched.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"Here\u0027s what you were looking for\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (Task t : tasksThatMatched) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Printer.printCustomStatement(t.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"No matching tasks found! Try again?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleDelete(String command) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            index \u003d Integer.parseInt(command.substring(7));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //no proper number given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printTaskNotFound();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Optional\u003cTask\u003e task \u003d taskList.removeTask(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (task.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printSuccessDeleteTask(task.get(), taskList.size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            updateStorage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleDone(String command) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d Character.getNumericValue(command.charAt(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Optional\u003cTask\u003e task \u003d taskList.setAsDone(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (task.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printSuccessSetTaskAsDone(task.get());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            updateStorage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printTaskNotFound();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleAddTodo(String command) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d command.indexOf(\" \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printEmptyArgument();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        command \u003d command.substring(index + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Task toDo \u003d new Todo(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean isSuccess \u003d taskList.addTask(toDo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printSuccessAddTask(toDo, taskList.size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            updateStorage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printEmptyArgument();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleAddDeadline(String command) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d command.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get content after the space"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d command.length() - 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printEmptyArgument();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get stuff after the space if there are still characters after the space"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String content \u003d command.substring(index + 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        index \u003d content.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get content after the slash"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d content.length() - 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //nothing after the slash, or slash is not found"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"No deadline given!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //for String formatting reasons, check if there is a space before the slash"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d 0 || content.charAt(index - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"Command must be in the format \u0027deadline \u003ctask name\u003e /by \u003cyyyy-mm-dd\u003e\u0027 \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String taskName \u003d content.substring(0, index - 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get keyword, e.g. \"by\" or \"at\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String keyword \u003d content.substring(index + 1, index + 3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matches \u003d keyword.equals(\"by\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matches) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"Task name does not start with proper arguments\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //get the deadline, e.g. deadline do homework /by tmr returns \"tmr\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String deadline \u003d content.substring(index + 4);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            LocalDate dateTime \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Task newTask \u003d new Deadline(taskName, dateTime);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            boolean isSuccessful \u003d taskList.addTask(newTask);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (isSuccessful) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Printer.printSuccessAddTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                updateStorage();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return isSuccessful;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printEmptyArgument();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "           Printer.printCustomStatement(\"Time given must be in the format yyyy-mm-dd\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean handleAddEvent(String command) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int index \u003d command.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get content after the space"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d command.length() - 1) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"No task name given\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get stuff after the space if there are still characters after the space"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String content \u003d command.substring(index + 1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        index \u003d content.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get content after the slash"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d -1 || index \u003d\u003d content.length() - 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //nothing after the slash, or slash is not found"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"No deadline given!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //for String formatting reasons, check if there is a space before the slash"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (index \u003d\u003d 0 || content.charAt(index - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printCustomStatement(\"Command must be in the format \u0027event \u003ctask name\u003e /at \u003cyyyy-mm-dd\u003e\u0027 \");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String taskName \u003d content.substring(0, index - 1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //get keyword, e.g. \"by\" or \"at\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String keyword \u003d content.substring(index + 1, index + 3);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matches \u003d keyword.equals(\"at\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!matches) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(new EmptyArgumentException(\"Task name does not start with proper arguments\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            //get the time, e.g. deadline do homework /by tmr returns \"tmr\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String time \u003d content.substring(index + 4);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            LocalDate dateTime \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Task newTask \u003d new Event(taskName, dateTime);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            boolean isSuccessful \u003d taskList.addTask(newTask);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (isSuccessful) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                updateStorage();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                Printer.printSuccessAddTask(newTask, taskList.size());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return isSuccessful;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(new EmptyArgumentException(\"No task name given\"));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(new InvalidArgumentException(\"Time given must be in the format yyyy-mm-dd\"));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        taskList.iterate();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 246
    }
  },
  {
    "path": "src/main/java/Printer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Handles printing of messages to the User"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints the message that is shown to user after a task is deleted"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param deletedTask Task that was deleted"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param lengthAfterDeletion Number of tasks left after deletion"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printSuccessDeleteTask(Task deletedTask, int lengthAfterDeletion) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + deletedTask);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String numberTasks \u003d String.format(\"Now you have %s %s in the list.\", lengthAfterDeletion, lengthAfterDeletion \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(numberTasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints the message that is shown to user after a task is successfully set as down"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param successDone Task that was set as done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printSuccessSetTaskAsDone(Task successDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + successDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints the message that is shown to user after a task is successfully added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param toDo Task that was added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param size Number of tasks left after the task was added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printSuccessAddTask(Task toDo, int size) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(toDo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String numberTasks \u003d String.format(\"Now you have %s %s in the list.\", size, size \u003d\u003d 1 ? \"task\" : \"tasks\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(numberTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints an error message when the Task to be operated on couldn\u0027t be found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printTaskNotFound() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(new EmptyArgumentException(\"Sorry! Duke could not find the task\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints an error message when the input given by user is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printEmptyArgument() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(new EmptyArgumentException(\"No task name given\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints a custom String"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param s String to be printed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static void printCustomStatement(String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 60
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Reads a file line by line and returns the contents as a List of Strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return List of Strings"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    List\u003cString\u003e readFile() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items; //empty list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Scanner s \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                items.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items; //empty list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Reads a List of Strings and re-writes the file at the location filePath"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param sentences List of Sentences"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether operation succeeded"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean updateFile(List\u003cString\u003e sentences) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            boolean hasError \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            for (String sentence : sentences) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    fw.write(sentence + System.lineSeparator());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    System.out.println(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                    hasError \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return !hasError; //return true if operation succeeded"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 62
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean isCompleted;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Create a new Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param task Name of the Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskName \u003d task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Create a new task whose status is isCompleted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param isCompleted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Task(String task, boolean isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskName \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    private boolean matchesWord(String keyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] getWords \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        int numberMatches \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String word : getWords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "//            System.out.println(\"keyword is:\" + keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (word.equals(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                numberMatches++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return numberMatches \u003e 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Given an array of words, check if the task name matches any of them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param words Array of words"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether task name matches"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean matchesWordList(String[] words) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String[] getWords \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean matchesTask \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (matchesWord(word)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                matchesTask \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return matchesTask;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Sets a task as completed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return A new Task whose status is completed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Task setTaskAsCompleted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Task(taskName, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String tickOrCross  \u003d isCompleted? \"DONE\" : \"NOT DONE\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s%s %s\", \"[\", tickOrCross, \"] \", taskName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 68
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " * Wrapper behind a List that performs operations on the List of Tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Iterate through a list and prints its contents"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void iterate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println(\"Hooray! You have no tasks in the list\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            System.out.println((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Given an array of words, return a List of all tasks that match the search word"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param search Array of words"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return List of all matching tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    List\u003cTask\u003e findMatchingTasks(String[] search) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            if (t.matchesWordList(search)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                matchingTasks.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Gets the size of the List"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return size of List"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    int size() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Adds a Task to the List"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param t Task to be added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Whether operation succeeded"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    boolean addTask(Task t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Removes a Task from a given index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param index Index of Task to be removed from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Optional\u003cTask\u003e if the removal was successful, otherwise an empty Optional object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Optional\u003cTask\u003e removeTask(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return Optional.of(tasks.remove(index));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "           return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Sets a Task status to Done"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @param index Index of Task to change"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * @return Optional\u003cTask\u003e if the task was set as done, otherwise an empty Optional object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Optional\u003cTask\u003e setAsDone(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Task originalTask \u003d tasks.get(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Task newTask \u003d originalTask.setTaskAsCompleted();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return Optional.of(originalTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Printer.printTaskNotFound();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 95
    }
  },
  {
    "path": "src/main/java/TestStorage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Goodbye"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Todo(String taskName) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Todo(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        super(taskName,isCompleted);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public Todo setTaskAsCompleted() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return new Todo(taskName,true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        return String.format(\"%s%s\", \"[T]\", super.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    static final char LINE \u003d \u0027*\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    Ui(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        this.parser \u003d new Parser(taskList, storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Handles I/O interaction with users and passes the command to the Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void handleInteraction() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        boolean isValid \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        while (sc.hasNext() \u0026\u0026 isValid) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printTopLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            isValid \u003d parser.handleCommand(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            printBottomLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Printer.printCustomStatement(\"Goodbye!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints a welcome message to the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void start() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        printTopLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke \\n What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        printBottomLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints the top line, e.g. *******************"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void printTopLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Stream.generate(() -\u003e LINE).limit(50).forEach(System.out::print); // _ _ _ _ _"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     * Prints the bottom line e.g. ****************"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    void printBottomLine() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Stream.generate(() -\u003e LINE).limit(50).forEach(System.out::print); // _ _ _ _ _"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chunyongg": 59
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void testGetStringAfterCharacter(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String output \u003d Duke.getStringAfterCharacter(\"abc def\", \u0027 \u0027);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(\"def\", output);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void getStringAfterCharacter_testNoCharacter_emptyString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String output \u003d Duke.getStringAfterCharacter(\"abc\", \u0027 \u0027);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(\"\", output);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void testGetStringBeforeCharacter(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String output \u003d Duke.getStringBeforeCharacter(\"abc def\", \u0027 \u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(\"abc\", output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void getStringBeforeCharacter_testNoCharacter_emptyString(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        String output \u003d Duke.getStringAfterCharacter(\"abc\", \u0027 \u0027);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(\"\", output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 30
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    public void readFile() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        //UPDATE PATH OF TESTSTORAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        Storage storage \u003d new Storage(\"C:/Users/Chunz/Desktop/ip/src/test/java/TestStorage.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e output \u003d storage.readFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e expectedOutput \u003d readFileFromText(\"C:/Users/Chunz/Desktop/ip/src/test/java/TestStorage.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        assertEquals(expectedOutput,output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chunyongg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    List\u003cString\u003e readFileFromText(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        List\u003cString\u003e items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items; //empty list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "                items.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "            return items; //empty list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 39
    }
  },
  {
    "path": "src/test/java/TestStorage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "Goodbye"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2
    }
  },
  {
    "path": "text-ui-test/run.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "cmd /k runtest.bat"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chunyongg"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chunyongg": 1,
      "-": 20
    }
  }
]
