[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Personal chat bot to keep track of user\u0027s tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The file path of where the data is stored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private static final Path filePath \u003d Paths.get(\".\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new Duke Object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Tries to load existing tasks from an existing data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * If that fails, a new task list instance is made."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.storage \u003d new Storage(Duke.filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.tasks \u003d new TaskList(this.storage.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Runs Duke, waits for the user to interact with it and responds to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Supports the commands:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * bye, done, delete, list, find, deadline, event, todo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param args user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 68
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Parses the user\u0027s inputs and decides what to do depending on the input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a command object according to what the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Checks for the integrity of the command and rejects it if it fails by throwing and error."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException If the command fails the integrity checks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        String[] commandDetail \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (commandDetail.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Be sure to follow the exact format of the commands!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Commands command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            command \u003d Commands.valueOf(commandDetail[0].toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Sorry! I don\u0027t recognize that command!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (commandDetail.length \u003c 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"Please key in a task to find!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new FindCommand(commandDetail[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (commandDetail.length \u003c 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"Please key in a task to be marked as done!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new DoneCommand(commandDetail[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (commandDetail.length \u003c 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"Please key in a task to delete!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new DeleteCommand(commandDetail[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (commandDetail.length \u003c 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"Please input a task to add!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            return new AddCommand(command, commandDetail[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Sorry! I don\u0027t recognize that command!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 64
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * The link between the {@link duke.task.TaskList} and a local .txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The filepath whether the data will be stored on the local machine."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * A list of the tasks currently stored."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private List\u003cString\u003e tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new storage object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Tries to create the needed directories and files if it doesn\u0027t exist yet."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param filePath the path at which data will be stored at."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Storage(Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            // create directory if directory doesn\u0027t exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Path parentPath \u003d filePath.getParent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            // create file if file doesn\u0027t exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Files.createFile(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.tasks \u003d Files.readAllLines(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            System.out.println(\"duke.Storage error\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a list of tasks based on the data stored currently."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Handles the creation of the task objects by manipulating the strings the tasks are stored in."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException if program fails at any point."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (String task : this.tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String[] split \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (split.length \u003c 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"The storage is corrupt!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String type \u003d split[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            boolean isDone \u003d split[1].equals(\"1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String desc \u003d split[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            switch(type) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                tasks.add(new Todo(desc, isDone));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                if (split.length \u003c 4) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"The storage is corrupt!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                String by \u003d split[3].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    tasks.add(new Deadline(desc, by, isDone));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"Date was not stored properly!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                if (split.length \u003c 4) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"The storage is corrupt!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                String at \u003d split[3].trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    tasks.add(new Event(desc, at, isDone));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"Date was not stored properly!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Joins all the strings in the List of tasks in strings and separates them with a linebreak"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * before writing it to a file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws IOException If the program fails at any point."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void write() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        String data \u003d String.join(\"\\n\", this.tasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        Files.writeString(filePath, data, StandardCharsets.UTF_8, StandardOpenOption.WRITE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                StandardOpenOption.TRUNCATE_EXISTING);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Saves a new task to the .txt file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param task new task to be saved."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException if the program fails to write."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void saveTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks.add(task.getSaveFormat());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.write();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t save this task!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Updates an existing task in the current tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param id ID of task to update."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param task Task to update."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException if the program fails to write."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void updateTask(int id, Task task) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks.set(id - 1, task.getSaveFormat());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.write();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t save this task!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Deletes a task from the current tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param id ID of the task to delete."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException If the program fails to write."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void deleteTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks.remove(id - 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.write();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t save this task!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 170
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * User interaction class that handles how the bot replies."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The scanner to take in inputs from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The messages that the chat bot sends out."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String DIVIDE \u003d \"_____________________________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String LIST_MESSAGE \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String TASK_ADDED_MESSAGE \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String DELETE_MESSAGE \u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String TASK_NOT_FOUND_MESSAGE \u003d \"No matching tasks found!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String TASK_FOUND_MESSAGE \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    static final String LOADING_ERROR_MESSAGE \u003d \"Something went wrong when loading previously saved tasks!\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            \" Starting with an empty tasks list instead...\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new UI object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints a message to the user in the given format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param message the message to send."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void botReply(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        System.out.printf(\"%s\\n%s\\n%s\\n\", Ui.DIVIDE, message, Ui.DIVIDE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints an error message if there is a problem with the UI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.LOADING_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints a welcome message when starting the chat bot."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * prints a goodbye message when exiting the chat bot."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.EXIT_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Appends the standard list message before printing out the list of tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param content list of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyList(String content) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.LIST_MESSAGE + content);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Appends the standard done message before printing out the done task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param content the task that was just marked as done."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyDone(String content) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.DONE_MESSAGE + content);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Appends the standard added task message before printing out the added task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param content the added task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyAdd(String content) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.TASK_ADDED_MESSAGE + content);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Appends the standard delete message before printing out the deleted task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param content the deleted task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyDelete(String content) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.DELETE_MESSAGE + content);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints out the standard task not found message."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyNoTasksFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.TASK_NOT_FOUND_MESSAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints out the standard found message before printing out the found task(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param content task(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void replyFoundTasks(String content) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(Ui.TASK_FOUND_MESSAGE + content);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Prints out the error message."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param message error message"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.botReply(message);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Reads the next line of the user\u0027s input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return User\u0027s input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.sc.nextLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 135
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will add a task according the the input it is given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The command that will determine the type of task added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final Commands command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The user given input that determines the details of the task added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new AddCommand instance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param command   The command that determines the type of task added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param input     The details of the task added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public AddCommand(Commands command, String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the Todo, Deadline and Event commands by creating a task according to the command given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList          The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui                The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage           The storage used by the chat bot."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the execution fails at any step."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Task newTodoTask \u003d new Todo(this.input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                addTask(newTodoTask, taskList, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String[] split \u003d this.input.split(\" /by \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    Task newDeadlineTask \u003d new Deadline(split[0], split[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    addTask(newDeadlineTask, taskList, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"Please enter a deadline to complete the task by \" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                            \"or follow the exact command format!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    String[] split \u003d this.input.split(\" /at \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    Task newEventTask \u003d new Event(split[0], split[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    addTask(newEventTask, taskList, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    throw new DukeException(\"Please enter the time at which the event will take place \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                            \"or follow the exact command format!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                throw new DukeException(\"Sorry! I don\u0027t recognize the type of task you\u0027re tyring to add!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds and stores a new task in the task list and storage then prints out a message indicating that"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * the task was successfully added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param newTask   The new task to be added"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList  The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui        The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage   The storage used by the chat bot."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException If the execution fails at any step."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void addTask(Task newTask, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            storage.saveTask(newTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String message \u003d String.format(\"%s\\nNow you have %d tasks in the list.\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    newTask.toString(), taskList.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyAdd(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t add the task to the database!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 96
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will stop the chat bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the bye command by printing out a goodbye message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList  The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui        The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage   The storage used by the chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Gives a boolean to tell the bot to stop."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return boolean that will break the while loop."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 33
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will be sent to the chat bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList          The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui                The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage           The storage used by the chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the execution fails at any step."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a flag which will end the while loop and terminate the bot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return \u003ccode\u003efalse\u003c/code\u003e by default."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * The list of commands this bot supports."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    LIST, DONE, DELETE, TODO, DEADLINE, EVENT, BYE, FIND"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 8
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will execute the delete command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * User given input to indicate which task to delete."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new instance of deleteCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param input ID of task to delete."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the deletion of a task from the bot task list and storage then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * prints out a message upon success."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList          The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui                The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage           The storage used by the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the execution fails at any step."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            int num \u003d Integer.parseInt(this.input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Task curr \u003d taskList.deleteTask(num);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            storage.deleteTask(num);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String numTasks \u003d \"Now you have \" + taskList.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyDelete(String.format(\"%s\\n%s\", curr.toString(), numTasks));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please key in the number of an existing task to be removed!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * User given input which will specify which task to mark as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new DoneCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param input ID of task to mark as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the done command by marking the task with the given ID as done, updating the storage and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * printing a message upon success."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList          The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui                The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage           The storage used by the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the execution fails at any step."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            int num \u003d Integer.parseInt(this.input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            Task curr \u003d taskList.getTask(num);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            curr.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            storage.updateTask(num, curr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyDone(curr.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please key in the number of an existing task to be marked as done!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 48
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will find a list of tasks corresponding to the given keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The user given input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new instance of a FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param input The keyword to search for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.input \u003d input.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the find command by searching for tasks with the keyword in the taskList and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * then prints a message either listing the matching tasks or stating that no tasks were found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList  The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui        The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage   The storage used by the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        TaskList filtered \u003d taskList.findTask(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (filtered.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyNoTasksFound();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyFoundTasks(filtered.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a command that will show all the current tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Executes the list command by printing out the current task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param taskList  The list of tasks known by the chat bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param ui        The Ui that is used by the chat bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param storage   The storage used by the chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.showError(\"No tasks found\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            ui.replyList(taskList.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates possible exception that can occur from the {@link duke} package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new instance with a \u003ccode\u003e☹ OOPS!!!\u003c/code\u003e followed by the error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param message the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a task that needs to be done by a certain date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constant that determines the representation of this task\u0027s type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected static final String TASK_TYPE \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constant that stores the date to finish the task by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected LocalDate dateBy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * constant that store the time to finish the task by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected LocalTime timeBy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new Deadline object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Converts the date and time to attend the event to LocalDate and LocalTime objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description       The task to be completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param by                The date and time when it must be completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the program fails at any point."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String[] parts \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.dateBy \u003d LocalDate.parse(parts[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.timeBy \u003d LocalTime.parse(parts[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format).\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new Deadline object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Converts the date and time to attend the event to LocalDate and LocalTime objects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description       The task to be completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param by                The date and time when it must be completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param isDone            Whether the task is done or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the program fails at any point."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String[] parts \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.dateBy \u003d LocalDate.parse(parts[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.timeBy \u003d LocalTime.parse(parts[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task in a save friendly format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The way it is saved affects how the .txt file is read in {@link duke.Storage}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Save-friendly string of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"%s | %s | %s %s\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Event.TASK_TYPE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                super.getSaveFormat(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.dateBy.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.timeBy.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Task is prepended by Deadline.TASK_TYPE."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Data of the task in string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        String modifier \u003d (this.timeBy.isAfter(LocalTime.NOON)) ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"[%s]%s (at: %s, %s)\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Event.TASK_TYPE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.dateBy.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.timeBy.format(DateTimeFormatter.ofPattern(\"hh:mm\")) + modifier);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 101
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a task that has to be attended by a specified and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constant that determines the representation of this task\u0027s type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected static final String TASK_TYPE \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constant that stores the date to finish the task by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected LocalDate dateBy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * constant that store the time to finish the task by."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected LocalTime timeBy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new Event object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Converts the date and time to attend the event to LocalDate and LocalTime objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description       The task to be completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param at                The date and time when it must be attended."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the program fails at any point."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String[] parts \u003d at.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.dateBy \u003d LocalDate.parse(parts[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.timeBy \u003d LocalTime.parse(parts[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format).\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new Event object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Converts the date and time to attend the event to LocalDate and LocalTime objects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description       The task to be completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param at                The date and time when it must be attended."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param isDone            Whether the task is done or not."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @throws DukeException    If the program fails at any point."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Event(String description, String at, boolean isDone) throws DukeException{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            String[] parts \u003d at.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.dateBy \u003d LocalDate.parse(parts[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            this.timeBy \u003d LocalTime.parse(parts[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            throw new DukeException(\"Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task in a save friendly format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The way it is saved affects how the .txt file is read in {@link duke.Storage}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Save-friendly string of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"%s | %s | %s %s\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Event.TASK_TYPE,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                super.getSaveFormat(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.dateBy.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.timeBy.format(DateTimeFormatter.ofPattern(\"HH:mm\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Task is prepended by Event.TASK_TYPE."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Data of the task in string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        String modifier \u003d (this.timeBy.isAfter(LocalTime.NOON)) ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"[%s]%s (by: %s, %s)\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                Deadline.TASK_TYPE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.dateBy.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                this.timeBy.format(DateTimeFormatter.ofPattern(\"hh:mm\")) + modifier);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 101
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The description of the task to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Whether the task is done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initialize a new Task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description the details of the task to be done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initialize a new Task object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description the details of the task to be done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param isDone whether the task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a visual representation of whether the task is done or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Tick for done, Cross for not done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Get the description of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return description of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the result of a check whether a task contains a keyword or not."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param keyword user specified keyword."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if contains, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.description.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task in a save friendly format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The way it is saved affects how the .txt file is read in {@link duke.Storage}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Save-friendly string of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"%s | %s\", this.isDone ? \"1\" : \"0\", this.getDescription());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Data of the task in string format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"[%s]%s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 93
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new task list object using an existing List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param tasks existing list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initializes a new task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Gets a given task in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param id the ID of the task to get."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Task with the given ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Task getTask(int id) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.tasks.get(id - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param task the task to add."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if task is added, \u003ccode\u003efalse\u003c/code\u003e if not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public boolean addTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.tasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Deletes a task in a task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param id Task to be deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Task that was deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Task deleteTask(int id) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.tasks.remove(id -1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return number of tasks in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a task list of all the tasks containing the specified keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param keyword User input keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Task(s) that contain the keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public TaskList findTask(String keyword) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        TaskList filtered \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        this.tasks.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            if (task.containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                filtered.addTask(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return filtered;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of all the tasks in the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Each task has a number of it\u0027s index + 1 and is separated by a newline."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return String comprising of all the tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            out.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 104
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " * Encapsulates a task to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Constant that determines the representation of this task\u0027s type."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    protected static final String TASK_TYPE \u003d \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initialize a new To do object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description details of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Initialize a new to do object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param description details of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @param isDone whether the task is done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task in a save friendly format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * The way it is saved affects how the .txt file is read in {@link duke.Storage}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Save-friendly string of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String getSaveFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"%s | %s\", Todo.TASK_TYPE, super.getSaveFormat());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * Task is prepended by Todo.TASK_TYPE."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     * @return Data of the task in string format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        return String.format(\"[%s]%s\", Todo.TASK_TYPE, super.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 53
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void newDeadline_ValidDateTime_noExceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            new Deadline(\"test desc\", \"2020-08-25 22:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void newDeadline_InvalidDateTime_ExceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            new Deadline(\"test desc\", \"2020-8-25 2359\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format).\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 29
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void newEvent_ValidDateTime_noExceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            new Event(\"test desc\", \"2020-08-25 22:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    void newEvent_InvalidDateTime_ExceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            new Event(\"test desc\", \"2020-8-25 2359\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "            assertEquals(\"☹ OOPS!!! Please input date and time in correct format: \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "                    \"\u0027yyyy-MM-dd HH:MM\u0027 (24-hour time format).\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "give me money"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "del data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ben-Hanan"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ben-Hanan": 4,
      "-": 19
    }
  }
]
