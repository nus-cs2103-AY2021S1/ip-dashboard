[
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Parent of all command classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final int targetIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final IDuke duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected Command(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Execute a command and return the resultant Duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Command must be initiated with a Duke object first."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resultant Duke object after execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new UnsupportedOperationException(\"This method is to\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \" be implemented by child classes.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Initiate command with Duke object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param duke Duke object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Command object after initiation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Command(targetIndex, duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Deadline class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Deadline is a task that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TimeWrapper time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Deadline(String description, TimeWrapper time, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time by which the task is to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Deadline getDeadline(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, TimeWrapper.getTimeWrapper(time), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Deadline(description, time, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"D|%d|%s|%s\", isDone ? 1 : 0, description, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isSameTime(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return time.equals(TimeWrapper.getTimeWrapper(date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), time.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 47
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DeadlineCommand(String description, String time, IDuke duke) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DeadlineCommand getDeadlineCommand(String description, String time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeadlineCommand(description, time, null);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDeadline(description, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDeadline(String description, String time)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Deadline.getDeadline(description, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \" +  newDuke.getNumTask()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke storeTask(ITask task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList newList \u003d new TaskList(duke.getTasks().getList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(newList.getList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeadlineCommand(description, time, duke);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 53
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DeleteCommand(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(targetIndex, duke);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Factory method for getting DeleteCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param targetIndex Index of task to be deleted."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return DeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DeleteCommand getDeleteCommand(int targetIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeleteCommand(targetIndex, null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDelete(targetIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDelete(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e duke.getNumTask()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d deleteTask(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Message.REMOVED_TASK.toString() + \"\\n\\t\" + duke.getTask(index)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + \"\\n Now you have \" + newDuke.getNumTask() + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Removes a specified task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be removed is specified by its index id."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Duke with task removed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index out of bound."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke deleteTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot delete task! Task id out of bound!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList newList \u003d new TaskList(list.getList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.remove(id - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(newList.getList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DeleteCommand(targetIndex, duke);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 65
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private DoneCommand(int targetIndex, IDuke duke) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(targetIndex, duke);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static DoneCommand getDoneCommand(int targetIndex) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DoneCommand(targetIndex, null);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleDone(targetIndex);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleDone(int index) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (index \u003c 1 || index \u003e duke.getNumTask()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d doneTask(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Message.MARKED_DONE.toString() + newDuke.getTask(index)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newDuke.getStorage().save(newDuke.getTasks().getList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Marks a specified task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Task to be done is specified by its index id."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Duke with task done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws DukeIllegalArgumentException If index out of bound."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke doneTask(int id) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task id out of bound!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (list.get(id - 1).isDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Cannot done task! Task is already done!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList newList \u003d new TaskList(list.getList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.replace(id - 1, newList.get(id - 1).markComplete());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(newList.getList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new DoneCommand(targetIndex, duke);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 57
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable Duke chatbot class to encapsulate the behavior of the chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Task id starts from 1."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Duke implements IDuke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** List for storing Tasks */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TaskList list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Duke(TaskList list, Storage storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.list \u003d new TaskList(list.getList());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new Duke chatbot object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New Duke chatbot object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Duke getDuke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage sm \u003d Storage.getStorage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(new TaskList(sm.read()), sm);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "       Ui.bye();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ITask getTask(int id) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (id - 1 \u003e list.size() || id \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Task id out of bound!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.get(id - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int getNumTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke handleCommand(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return c.setDuke(this).execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeIllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"Meow?!! \" + e.getMessage()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (DukeUnrecognizedArgumentException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.CAT_DOUBT.toString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.CAT_CRY.toString() + e));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke bot \u003d getDuke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Greet user"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        bot.greet();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Handle commands until user types bye"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (s.equals(\"bye\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (!s.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                // Ignore white spaces or empty lines"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                bot \u003d bot.handleCommand(s);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Exit bot"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        bot.bye();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 115,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when Duke detects illegal/empty argument."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeIllegalArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeIllegalArgumentException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8
    }
  },
  {
    "path": "src/main/java/DukeUnrecognizedArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Duke specific exception, thrown when argument cannot be recognized by Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class DukeUnrecognizedArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public DukeUnrecognizedArgumentException(String s) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Event class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * An Event is a task that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TimeWrapper time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Event(String description, TimeWrapper time, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param time Time during which the event is happening."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Event getEvent(String description, String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, TimeWrapper.getTimeWrapper(time), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Event(description, time, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"E|%d|%s|%s\", isDone ? 1 : 0, description, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isSameTime(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return time.equals(TimeWrapper.getTimeWrapper(date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 47
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private EventCommand(String description, String time, IDuke duke) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static EventCommand getEventCommand(String description, String time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new EventCommand(description, time, null);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleEvent(description, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleEvent(String description, String time)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of event cannot be empty!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (time.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The time of event cannot be empty!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d Event.getEvent(description, time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \" +  newDuke.getNumTask()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke storeTask(ITask task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList newList \u003d new TaskList(duke.getTasks().getList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(newList.getList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new EventCommand(description, time, duke);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 53
    }
  },
  {
    "path": "src/main/java/IDuke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface IDuke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints greeting message."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void greet();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    void bye();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets a specific task from the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The specified task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask getTask(int id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets a list of all the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return The specified task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    TaskList getTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Gets the number of tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Number of tasks currently in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    int getNumTask();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Handles a given command and returns the resulting Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param command A user command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Resulting Duke object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    IDuke handleCommand(String command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    Storage getStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 42
    }
  },
  {
    "path": "src/main/java/ITask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public interface ITask {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a task which is completed."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return Completed Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ITask markComplete();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if the task is done, false otherwise."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return true if the task is done, false otherwise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean isDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a string to represent data in this task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A string to represent the data in this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    String getDataString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if the task occurs at some date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param date Date to check against."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if task occurs at that time, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    boolean isSameTime(String date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 30
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ListCommand(String date, IDuke duke) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ListCommand getListCommand(String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ListCommand(date, null);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            handleDisplay();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            handleDisplay(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void handleDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_NO_TASK_IN_LIST.toString()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            displayTasks(list);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void handleDisplay(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList list \u003d duke.getTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        int[] indexes \u003d IntStream"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .range(0, list.size())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e list.get(x).isSameTime(date))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .toArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (indexes.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Message.ERR_NO_MATCHING_TASK.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Ui.displayTasks(list, indexes, date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void displayTasks(TaskList list) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Ui.displayTasks(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ListCommand(date, duke);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 61
    }
  },
  {
    "path": "src/main/java/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public enum Message {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    WELCOME (\"Hi I\u0027m Cat Bot.\\nWhat can I do for you?\\n\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    FAREWELL (\"Bye! Hope to see you again!\\n\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    LIST (\"Here are the tasks in your list:\\n\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    MARKED_DONE (\"Naisu! I\u0027ve marked this task done!\\n\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    REMOVED_TASK (\"Hmmm~! I\u0027ve removed this task:\\n\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_NO_TASK_IN_LIST (\"Oops! Looks like there\u0027s no task in the list!\\n\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_NO_MATCHING_TASK (\"Oops! Looks like there\u0027s no matching task!\\n\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_LIST_CMD (\"Wrong list command!\\nFormat: list Optional:\u003cdate\u003e\\n\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DONE_CMD (\"Wrong done command!\\nFormat: done \u003ctaskId\u003e\\n\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_TODO_CMD (\"Wrong todo command!\\nFormat: todo \u003ctaskName\u003e\\n\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DEADLINE_CMD (\"Wrong deadline command!\\nFormat: deadline \u003ctaskName\u003e /by \u003ctime\u003e\\n\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_EVENT_CMD (\"Wrong event command!\\nFormat: event \u003ctaskName\u003e /at \u003ctime\u003e\\n\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_DELETE_CMD (\"Wrong delete command!\\nFormat: delete \u003ctaskId\u003e\\n\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_WRONG_CMD (\"Unrecognizable command!\\n\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ERR_DUKE_NOT_INIT(\"Duke not initialised yet in execute command\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    CAT_DOUBT (\"Meow? Sorry I don\u0027t know what you are talking about...\\n\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    CAT_CRY (\"Meow!!! Something terrible happened!\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    Message(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 29
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Command parse(String commandStr) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (commandStr.matches(\"^list.*\")) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found list command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (commandStr.equals(\"list\")) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                return ListCommand.getListCommand(null);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            } else if (!commandStr.matches(\"^list .+\")) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_LIST_CMD.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return ListCommand.getListCommand(commandStr.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^done.*\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found done command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!commandStr.matches(\"^done -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_DONE_CMD.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            int index \u003d Integer.parseInt(commandStr.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return DoneCommand.getDoneCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^todo.*\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found todo command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!commandStr.matches(\"^todo .*\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_TODO_CMD.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String description \u003d commandStr.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return ToDoCommand.getToDoCommand(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^deadline.*\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Found deadline command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!commandStr.matches(\"^deadline .* /by .*\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_DEADLINE_CMD.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String[] params \u003d commandStr.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return DeadlineCommand.getDeadlineCommand(params[0], params[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^event.*\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle event command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!commandStr.matches(\"^event .* /at .*\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_EVENT_CMD.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String[] params \u003d commandStr.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return EventCommand.getEventCommand(params[0], params[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (commandStr.matches(\"^delete.*\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Handle delete command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!commandStr.matches(\"^delete -?[0-9]+$\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        Message.ERR_WRONG_DELETE_CMD.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            int index \u003d Integer.parseInt(commandStr.split(\" \")[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return DeleteCommand.getDeleteCommand(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new DukeUnrecognizedArgumentException(Message.ERR_WRONG_CMD.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 55
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate operations related to storage of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Storage(Path filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Factory method for creating StorageManager."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Storage file path is created if missing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param filePath Path to the storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return StorageManager class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Storage getStorage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage sm \u003d new Storage(Path.of(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sm.preparePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return sm;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Error creating file structure!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.exit(-1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        FileWriter fw \u003d new FileWriter(String.valueOf(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private List\u003cString\u003e readFromFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File f \u003d new File(String.valueOf(filePath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e taskStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            taskStringList.add(s.nextLine());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskStringList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Saves a list of strings into the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param list A list of string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void save(List\u003c? extends ITask\u003e list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e encodedList \u003d TaskEncoder.encodeTaskList(list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        encodedList.forEach(x -\u003e sb.append(x).append(\"\\n\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            writeToFile(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Unable to save to disk!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cITask\u003e read() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return TaskDecoder.decodeList(readFromFile());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            System.out.println(\"Error reading from file!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new RuntimeException(\"Unable to read task list from disk, exiting...\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private void preparePath() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!Files.exists(filePath.getParent())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createDirectory(filePath.getParent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Files.createFile(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 93
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Immutable Task Object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A task has a description and a completion status."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Task implements ITask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static Task getTask(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Task(description, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"Ta|%d|%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean isSameTime(String time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"[%s] %s\", isDone ? \"✓\" : \"✗\", description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 55
    }
  },
  {
    "path": "src/main/java/TaskDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskDecoder {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static List\u003cITask\u003e decodeList(List\u003cString\u003e taskString) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cITask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        taskString.forEach(x -\u003e taskList.add(decodeTask(x)));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static ITask decodeTask(String taskString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String[] list \u003d taskString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        switch (list[0]) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d ToDo.getToDo(list[2]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d Deadline.getDeadline(list[2], list[3]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d Event.getEvent(list[2], list[3]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new IllegalArgumentException(\"Unable to decode!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (list[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            task \u003d task.markComplete();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34
    }
  },
  {
    "path": "src/main/java/TaskEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encodes the tasks in a Duke object to a string for storage."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskEncoder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a list of encoded task strings of a Duke object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param tasks object whose tasks will be encoded."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A list of strings representing the tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static List\u003cString\u003e encodeTaskList(List\u003c? extends ITask\u003e tasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        List\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tasks.forEach(x -\u003e encodedTasks.add(x.getDataString()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 20
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final List\u003cITask\u003e list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    TaskList(List\u003cITask\u003e list) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void add(ITask task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void replace(int index, ITask newTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.set(index, newTask);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ITask get(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cITask\u003e getList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34
    }
  },
  {
    "path": "src/main/java/TextFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Handles text formatting"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TextFormatter {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Horizontal lines used for formatting */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴‥∵‥∴‥∴‥∵‥∴\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final String HORIZONTAL_LINE_2 \u003d \"▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼△▼\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /** Bot Logo */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String LOGO \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            \"　　＼　　　　　／\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＼∧∧∧／\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜　 Ｃ ＞\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ 　Ａ ＞\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜　 Ｔ ＞\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　 ───＜ Ｂ　 ＞───\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ Ｏ　 ＞\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　＜ Ｔ　 ＞\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　　／∨∨∨＼\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　／ ∧_∧　　＼\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　／　( ･ω･)　　 ＼\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"／　＿(_つ/￣￣￣/　＼\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"　　 　＼/＿＿＿/\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns text formatted with indentation and lines."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param text Text to be wrapped."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getFormattedText(String text) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String output \u003d text.replaceAll(\"(?m)^\", \"∴‥\\t\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (output.charAt(output.length() - 1) !\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return HORIZONTAL_LINE + \"\\n\" + output + HORIZONTAL_LINE + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 37
    }
  },
  {
    "path": "src/main/java/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Encapsulate parsing of time string to get LocalDate or LocalTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // Accept YYYYMMDD, DDMMYYYY"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final List\u003cPattern\u003e DATE_PATTERN_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-.]?(?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cday\u003e\\\\d{1,2})\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Pattern.compile(\"(?\u003cday\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cyear\u003e\\\\d{4})\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // Accept YYYY MM DD HHMM, DD MM YYYY HHMM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final List\u003cPattern\u003e DATETIME_PATTERN_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-.](?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cday\u003e\\\\d{1,2})\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    + \"[\\\\s\\\\-.T](?\u003chour\u003e\\\\d{1,2})[\\\\s\\\\-.:]?(?\u003cminute\u003e\\\\d{2})\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    Pattern.compile(\"(?\u003cday\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cyear\u003e\\\\d{4})\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                            + \"[\\\\s\\\\-.T](?\u003chour\u003e\\\\d{1,2})[\\\\s\\\\-.:]?(?\u003cminute\u003e\\\\d{2})\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses and returns a date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string Time as a string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return LocalDate representing the time string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static LocalDate parseDate(String string) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!isDate(string)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string +\" does not have a date time!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Pattern pattern \u003d DATE_PATTERN_LIST"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e x.matcher(string).find())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string +\" failed to match regex!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return LocalDate.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"day\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses and returns a date time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string Time as a string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return LocalDateTime representing the time string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static LocalDateTime parseDateTime(String string) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!isDateTime(string)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string +\" does not have a date time!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Pattern pattern \u003d DATETIME_PATTERN_LIST"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .filter(x -\u003e x.matcher(string).find())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(string +\" failed to match regex!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return LocalDateTime.of(Integer.parseInt(matcher.group(\"year\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"month\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"day\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"hour\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                Integer.parseInt(matcher.group(\"minute\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if a string is a date time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String to be checked."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if the string is a date time, false otherwise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static boolean isDateTime(String string) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DATETIME_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Checks if a string is a date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String to be checked."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if the string is a date, false otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static boolean isDate(String string) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return DATE_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 94
    }
  },
  {
    "path": "src/main/java/TimeWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Time wrapper class to store a time that maybe contains explicit time representation."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TimeWrapper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TimeWrapper(LocalDate date, LocalDateTime dateTime, String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Factory method for getting a time wrapper."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param string String representation of time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A time wrapper which may contain explicit time representation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static TimeWrapper getTimeWrapper(String string) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (TimeParser.isDateTime(string)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            LocalDateTime ldt \u003d TimeParser.parseDateTime(string);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TimeWrapper(ldt.toLocalDate(), ldt, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (TimeParser.isDate(string)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TimeWrapper(TimeParser.parseDate(string), null, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new TimeWrapper(null, null, string);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if both time wrapper represents the same time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param obj An object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return True if both objects are TimeWrapper and represent the same time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } else if (!(obj instanceof TimeWrapper)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TimeWrapper tw \u003d (TimeWrapper) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.dateTime !\u003d null \u0026\u0026 tw.dateTime !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.dateTime.equals(tw.dateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.date !\u003d null \u0026\u0026 tw.date !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.date.equals(tw.date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (this.message !\u003d null \u0026\u0026 tw.message !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return this.message.equals(tw.message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return date.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (message !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"No data found.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 75
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * ToDo class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A ToDo is a task without any date/time attached to it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns a new uncompleted ToDo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param description Description of ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return New uncompleted ToDo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ToDo getToDo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Task markComplete() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDo(description, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String getDataString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return String.format(\"T|%d|%s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 39
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private ToDoCommand(String description, IDuke duke) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        super(-1, duke);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static ToDoCommand getToDoCommand(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDoCommand(description, null);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (duke \u003d\u003d null) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return handleToDo(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private IDuke handleToDo(String description) throws DukeIllegalArgumentException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (description.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new DukeIllegalArgumentException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    \"The description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ITask task \u003d ToDo.getToDo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        IDuke newDuke \u003d storeTask(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        + \"\\nNow you have \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        +  newDuke.getNumTask() + \" task(s) in the list.\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return newDuke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public IDuke storeTask(ITask task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Storage storage \u003d duke.getStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TaskList newList \u003d new TaskList(duke.getTasks().getList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        storage.save(newList.getList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new Duke(newList, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Command setDuke(IDuke duke) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new ToDoCommand(description, duke);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 46
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.LOGO);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(Message.WELCOME.toString()));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void bye() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                .getFormattedText(Message.FAREWELL.toString()));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void displayTasks(TaskList list) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(Message.LIST.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sb.append(\" \").append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .append(list.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText(sb.toString()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static void displayTasks(TaskList list, int[] listIndex, String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the task on \" + date + \":\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        for (int index : listIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            sb.append(\" \").append(index + 1).append(\". \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .append(list.get(index).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        System.out.println(TextFormatter.getFormattedText(sb.toString()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 31
    }
  },
  {
    "path": "text-ui-test/input_deadline.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline do laundry /by tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline have something to eat /by lunch time"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_delete.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo myTodo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline myDeadline /by today"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event myEvent /at today"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 11
    }
  },
  {
    "path": "text-ui-test/input_event.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event NUS OPEN HOUSE /at August"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event SOMETHING FUN /at JUNE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/input_exception.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo correctTodo something extra"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline wrong command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /at time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline   /by time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline place /by    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline correctDeadline /by time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event wrong command\t"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event place /by time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event   /at tomorrow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event someEvent /at   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event correctEvent /at today"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 9"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete haha this is funny"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 28
    }
  },
  {
    "path": "text-ui-test/input_mixed.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo coding"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "deadline lab1 /by tomorrow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "event weeee~ /at next year"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 13
    }
  },
  {
    "path": "text-ui-test/input_todo.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "todo bcd"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "del ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "javac  -cp ..\\src -Xlint:none -encoding UTF-8 -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_exception.txt \u003e ACTUAL_EXCEPTION.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input_delete.txt \u003e ACTUAL_DELETE.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_TODO.TXT EXPECTED_TODO.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EVENT.TXT EXPECTED_EVENT.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_MIXED.TXT EXPECTED_MIXED.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_EXCEPTION.TXT EXPECTED_EXCEPTION.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "FC ACTUAL_DELETE.TXT EXPECTED_DELETE.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "luo-git": 25,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_TODO.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_DEADLINE.TXT\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_EVENT.TXT\" ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if [ -e \"./ACTUAL_MIXED.TXT\" ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "then"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    rm ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "if ! javac -cp ../src -Xlint:none -encoding UTF-8 -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input_todo.txt \u003e ACTUAL_TODO.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_deadline.txt \u003e ACTUAL_DEADLINE.TXT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_event.txt \u003e ACTUAL_EVENT.TXT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "java -classpath ../bin Duke \u003c input_mixed.txt \u003e ACTUAL_MIXED.TXT"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "cp EXPECTED_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "dos2unix ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_TODO.TXT EXPECTED_TODO-UNIX.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_DEADLINE.TXT EXPECTED_DEADLINE-UNIX.TXT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_EVENT.TXT EXPECTED_EVENT-UNIX.TXT"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "diff ACTUAL_MIXED.TXT EXPECTED_MIXED-UNIX.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34,
      "-": 31
    }
  }
]
