[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"    archiveBaseName \u003d \"Launcher\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":43,"xnmng":18}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"Duke is a task tracker that can be used on your computer to keep track of tasks for you."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"Duke is able to:"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"* create tasks"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"* list tasks"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"* mark tasks"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"* delete tasks"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"### `todo` - create a todo"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"Creates a new task of type \"todo\" in the task list."},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"Syntax:"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"        todo \u003cDescription_Of_ToDo\u003e"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"Example of usage: "},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"       todo dishes"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"Expected outcome:"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        Got it. I\u0027ve added the task:"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        [T][âœ˜] dishes"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"        Now you have 1 tasks in the list."},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"    "},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"    "},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"### `deadline` | `event` - create a deadline or an event"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"Creates a new task of type \"deadline\" or \"event\" in the task list with an attached time. The time attached in "},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"`deadline` and `event` commands should be indicated following `/by` and `/at` keyword respectively."},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"Syntax (Event):"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"        Event \u003cDescription of Event\u003e /by \u003cDD/MM/YYYY\u003e \u003cHHMM\u003e"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        "},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        Note: If the \u003cHHMM\u003e portion of the command is ommitted, Duke will automatically set the HHMM to 2359"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"Syntax (Deadline):"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"        Deadline \u003cDescription of deadline\u003e /by \u003cDD/MM/YYYY\u003e \u003cHHMM\u003e"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"        "},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"        Note: If the \u003cHHMM\u003e portion of the command is ommitted, Duke will automatically set the HHMM to 2359"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"Example of usage: "},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"        event abc /at 12/12/2020 2100"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"        deadline homework /by 1/12/2020"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"Expected outcome:"},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"        Got it. I\u0027ve added the task:"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"        [E][âœ˜]  (At: 12 december 2020 2100 hrs)"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"        Now you have 2 tasks in the list."},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"        Got it. I\u0027ve added the task:"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":"        [D][âœ˜] homework (By: 1 december 2020 2359 hrs)"},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"        Now you have 3 tasks in the list."},{"lineNumber":67,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":68,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":69,"author":{"gitId":"xnmng"},"content":"### `list` - view all tasks"},{"lineNumber":70,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":71,"author":{"gitId":"xnmng"},"content":"Lists out all tasks that are added in the task list."},{"lineNumber":72,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":73,"author":{"gitId":"xnmng"},"content":"Example of usage: "},{"lineNumber":74,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":75,"author":{"gitId":"xnmng"},"content":"        list"},{"lineNumber":76,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":77,"author":{"gitId":"xnmng"},"content":"Expected outcome (if you have no tasks):"},{"lineNumber":78,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":79,"author":{"gitId":"xnmng"},"content":"        Currently, you have no tasks!"},{"lineNumber":80,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":81,"author":{"gitId":"xnmng"},"content":"Expected outcome (if you have tasks):"},{"lineNumber":82,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":83,"author":{"gitId":"xnmng"},"content":"        These are your tasks:"},{"lineNumber":84,"author":{"gitId":"xnmng"},"content":"        1.   [T][âœ˜] dishes"},{"lineNumber":85,"author":{"gitId":"xnmng"},"content":"        2.   [E][âœ˜]  (At: 12 december 2020 2100 hrs)"},{"lineNumber":86,"author":{"gitId":"xnmng"},"content":"        3.   [D][âœ˜] homework (By: 1 december 2020 2359 hrs)"},{"lineNumber":87,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":88,"author":{"gitId":"xnmng"},"content":"### `done` - mark a task as done"},{"lineNumber":89,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":90,"author":{"gitId":"xnmng"},"content":"Marks a task from the list as \"done\" using its index from the `list` command."},{"lineNumber":91,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":92,"author":{"gitId":"xnmng"},"content":"Example of usage: "},{"lineNumber":93,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":94,"author":{"gitId":"xnmng"},"content":"        done 2"},{"lineNumber":95,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":96,"author":{"gitId":"xnmng"},"content":"Expected outcome:"},{"lineNumber":97,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":98,"author":{"gitId":"xnmng"},"content":"        Nice! I\u0027ve marked this task as done: "},{"lineNumber":99,"author":{"gitId":"xnmng"},"content":"        2.   [E][âœ“]  (At: 12 december 2020 2100 hrs)"},{"lineNumber":100,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":101,"author":{"gitId":"xnmng"},"content":"### `delete` - delete a task"},{"lineNumber":102,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":103,"author":{"gitId":"xnmng"},"content":"Deletes a task from the list using its index from the `list` command."},{"lineNumber":104,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":105,"author":{"gitId":"xnmng"},"content":"Example of usage: "},{"lineNumber":106,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":107,"author":{"gitId":"xnmng"},"content":"        delete 3"},{"lineNumber":108,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":109,"author":{"gitId":"xnmng"},"content":"Expected outcome:"},{"lineNumber":110,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":111,"author":{"gitId":"xnmng"},"content":"        Noted. I\u0027ve removed this task: "},{"lineNumber":112,"author":{"gitId":"xnmng"},"content":"        3.   [D][âœ˜] homework (By: 1 december 2020 2359 hrs)"},{"lineNumber":113,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":114,"author":{"gitId":"xnmng"},"content":"### `find` - find tasks with keyword"},{"lineNumber":115,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":116,"author":{"gitId":"xnmng"},"content":"Finds all tasks that contain a given keyword. The keyword should appear in the description of the task. "},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"xnmng"},"content":"        find dishes"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"xnmng"},"content":"        Here\u0027s what I found: "},{"lineNumber":125,"author":{"gitId":"xnmng"},"content":"        [T][âœ˜] dishes"}],"authorContributionMap":{"-":14,"xnmng":111}},{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the bye command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class ByeCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Executes the bye command, causing Duke to stop running."},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     *  @param taskList Used by Duke to keep track of tasks."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        String result \u003d ui.showLine() + \"\\n\" + ui.printGoodbyeMessage() + ui.showLine();"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":27}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"public interface Command {"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    boolean isExit();"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":7}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"// partial solution copied from iP"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    protected LocalDate date;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    protected LocalTime time;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"     * Executes the deadline command, causing add a task of type Deadline to the taskList,"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"     * provided that the command input is valid."},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"     * @param description String describing the Deadline task."},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"     * @param dateBy String indicating the deadline of the Deadline task."},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * @param isDone Boolean indicating if the Deadline task is done."},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"    public Deadline(String description, String dateBy, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"        super(description.trim(), isDone);"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        String[] dateAndTime \u003d dateBy.trim().split(\" \");"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"        String[] date \u003d dateAndTime[0].split(\"/\");"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"        String time;"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"        if (dateAndTime.length \u003d\u003d 1) {"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"            time \u003d \"2359\";"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"            time \u003d String.format(\"%04d\", Integer.parseInt(dateAndTime[1]));"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"        String day \u003d date[0];"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"        String month \u003d date[1];"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"        String year \u003d date[2];"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        this.date \u003d LocalDate.of(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"        String hour \u003d time.substring(0, 2);"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"        String minute \u003d time.substring(2, 4);"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        if (Integer.parseInt(hour) \u003c\u003d 23 \u0026\u0026 Integer.parseInt(minute) \u003c\u003d 59) {"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"            this.time \u003d LocalTime.of(Integer.parseInt(hour), Integer.parseInt(minute));"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"            this.time \u003d LocalTime.of(23, 59);"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"        String formattedTime \u003d String.format(\"%02d\", time.getHour()) + String.format(\"%02d\", time.getMinute());"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"        return \"  [D]\" + super.toString() + \" (By: \" + date.getDayOfMonth() + \" \""},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"                + date.getMonth().toString().toLowerCase() + \" \" + date.getYear()"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"                + (time \u003d\u003d null ? \")\" : \" \" + formattedTime + \" hrs)\");"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":57}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the deadline command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class DeadlineCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    protected final String COMMAND;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public DeadlineCommand(String command) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.COMMAND \u003d command;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * Executes the deadline command, causing add a task of type Deadline to the taskList,"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * provided that the command input is valid."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param taskList Used by Duke to keep track of tasks."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @throws MissingDescriptionException If the deadline command is missing a description."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     * @throws MissingTagException If the deadline command is missing a \"/by\" tag."},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"     * @throws MissingDateTimeException If the deadline command is missing a valid Date and Time."},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        String[] commandArgs \u003d COMMAND.split(\" \");"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        if (commandArgs.length \u003d\u003d 1 || commandArgs[1].equals(\"/by\")) {"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"            throw new MissingDescriptionException();"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"        } else if (!COMMAND.contains(\"/by\")) {"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"            throw new MissingTagException();"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"        } else if (COMMAND.split(\"/by\").length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"            throw new MissingDateTimeException();"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"            String subCommand \u003d COMMAND;"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"            if (COMMAND.split(\" \")[0].length() \u003d\u003d 8) {"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"                subCommand \u003d subCommand.substring(8).trim();"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"                subCommand \u003d subCommand.substring(1).trim();"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"            String[] subCommandArgs \u003d subCommand.split(\"/by\");"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"            System.out.println(subCommandArgs[0]);"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"            System.out.println(subCommandArgs[1]);"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"            Deadline d \u003d new Deadline(subCommandArgs[0], subCommandArgs[1], false);"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"            taskList.addTask(d);"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"            storage.write(taskList.TASKS);"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"            String result \u003d ui.showLine() + \"\\n\" + ui.createDeadlineSuccessMessage(d, taskList.TASKS.size())"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"                    + ui.showLine();"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":66}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the delete command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    protected final int TASK_NUMBER;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.TASK_NUMBER \u003d taskNumber;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * Executes the delete command, causing Duke to delete a numbered task from the taskList,"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * provided that the number provided is valid."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *  @param taskList Used by Duke to keep track of tasks."},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @throws MissingNumberFromCommandException If the done command is missing a number."},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @throws InvalidNumberFromCommandException If the number provided with the done command is invalid."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"        int taskLength \u003d taskList.TASKS.size();"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        if (TASK_NUMBER \u003c 0 || TASK_NUMBER \u003e\u003d taskLength) {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"            throw new InvalidNumberFromCommandException();"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"            Task t \u003d taskList.TASKS.get(TASK_NUMBER);"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"            taskList.deleteTask(TASK_NUMBER);"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"            storage.write(taskList.TASKS);"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"            String result \u003d ui.showLine() + \"\\n\" + ui.deleteCommandSuccessMessage(TASK_NUMBER + 1, t)"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"                    + ui.showLine();"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":48}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the done command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class DoneCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    protected final int TASK_NUMBER;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.TASK_NUMBER \u003d taskNumber;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * Executes the done command, causing Duke to mark the numbered task as done,"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * provided that the number provided with the done command is valid."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param taskList Used by Duke to keep track of tasks."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @throws MissingNumberFromCommandException If the done command is missing a number."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     * @throws InvalidNumberFromCommandException If the number provided with the done command is invalid."},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        int taskLength \u003d taskList.TASKS.size();"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"        if (TASK_NUMBER \u003c 0 || TASK_NUMBER \u003e\u003d taskLength) {"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"            throw new InvalidNumberFromCommandException();"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"            Task t \u003d taskList.TASKS.get(TASK_NUMBER);"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"            taskList.markAsDone(TASK_NUMBER);"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"            storage.write(taskList.TASKS);"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"            String result \u003d ui.showLine() + \"\\n\" + ui.doneCommandSuccessMessage(TASK_NUMBER + 1, t)"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"                    + ui.showLine();"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":49}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import javafx.application.Platform;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"import java.io.File;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"import java.time.DateTimeException;"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"public class Duke extends Application{"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    private static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"    private static final String DEFAULT_FILE_PATH \u003d PROJECT_ROOT + File.separator + \"src\" + File.separator + \"main\""},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"            + File.separator + \"java\" + File.separator + \"tasks.txt\";"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    private static final String DEFAULT_DIRECTORY \u003d PROJECT_ROOT + File.separator + \"src\" + File.separator + \"main\""},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"            + File.separator + \"java\";"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    private Storage storage;"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    private TaskList tasks;"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"    private Ui ui;"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"    private VBox dialogContainer;"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"    private TextField userInput;"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"    private Button sendButton;"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"    private Scene scene;"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"    // empty constructor"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"    public Duke() {"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        ui \u003d new Ui();"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        storage \u003d new Storage(DEFAULT_FILE_PATH, DEFAULT_DIRECTORY);"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        tasks \u003d new TaskList(storage.loadTasks());"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"        System.out.println(ui.printGreetingMessage(storage.createResult));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"    public void start(Stage stage) {"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"        //Step 1. Setting up required components"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"        userInput \u003d new TextField();"},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"        stage.setScene(scene);"},{"lineNumber":67,"author":{"gitId":"xnmng"},"content":"        stage.show();"},{"lineNumber":68,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":69,"author":{"gitId":"xnmng"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":70,"author":{"gitId":"xnmng"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":71,"author":{"gitId":"xnmng"},"content":"        stage.setResizable(false);"},{"lineNumber":72,"author":{"gitId":"xnmng"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":73,"author":{"gitId":"xnmng"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":74,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":75,"author":{"gitId":"xnmng"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":76,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":77,"author":{"gitId":"xnmng"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":78,"author":{"gitId":"xnmng"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":79,"author":{"gitId":"xnmng"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":80,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":81,"author":{"gitId":"xnmng"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":82,"author":{"gitId":"xnmng"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":83,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":84,"author":{"gitId":"xnmng"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":85,"author":{"gitId":"xnmng"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":86,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":87,"author":{"gitId":"xnmng"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":88,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":89,"author":{"gitId":"xnmng"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":90,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":91,"author":{"gitId":"xnmng"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":92,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":93,"author":{"gitId":"xnmng"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":94,"author":{"gitId":"xnmng"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":95,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":96,"author":{"gitId":"xnmng"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":97,"author":{"gitId":"xnmng"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":98,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":99,"author":{"gitId":"xnmng"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":100,"author":{"gitId":"xnmng"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":101,"author":{"gitId":"xnmng"},"content":"            handleUserInput();"},{"lineNumber":102,"author":{"gitId":"xnmng"},"content":"        });"},{"lineNumber":103,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":104,"author":{"gitId":"xnmng"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":105,"author":{"gitId":"xnmng"},"content":"            handleUserInput();"},{"lineNumber":106,"author":{"gitId":"xnmng"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":108,"author":{"gitId":"xnmng"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":109,"author":{"gitId":"xnmng"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":110,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":112,"author":{"gitId":"xnmng"},"content":"    public void run() {"},{"lineNumber":113,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":114,"author":{"gitId":"xnmng"},"content":"        ui.printGreetingMessage(storage.createResult);"},{"lineNumber":115,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":116,"author":{"gitId":"xnmng"},"content":"        boolean isExit \u003d false;"},{"lineNumber":117,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":118,"author":{"gitId":"xnmng"},"content":"        while (!isExit) {"},{"lineNumber":119,"author":{"gitId":"xnmng"},"content":"            try {"},{"lineNumber":120,"author":{"gitId":"xnmng"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":121,"author":{"gitId":"xnmng"},"content":"                Command c \u003d Parser.interpret(fullCommand);"},{"lineNumber":122,"author":{"gitId":"xnmng"},"content":"                String result \u003d c.execute(tasks, ui, storage);"},{"lineNumber":123,"author":{"gitId":"xnmng"},"content":"                System.out.println(result);"},{"lineNumber":124,"author":{"gitId":"xnmng"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":125,"author":{"gitId":"xnmng"},"content":"            } catch (DukeException e) {"},{"lineNumber":126,"author":{"gitId":"xnmng"},"content":"                String errorMessage \u003d ui.showLine() + \"\\n\" + ui.showErrorMessage(e.getMessage())"},{"lineNumber":127,"author":{"gitId":"xnmng"},"content":"                        + \"\\n\" + ui.showLine();"},{"lineNumber":128,"author":{"gitId":"xnmng"},"content":"                System.out.println(errorMessage);"},{"lineNumber":129,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":133,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"xnmng"},"content":"     * Iteration 1:"},{"lineNumber":135,"author":{"gitId":"xnmng"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":136,"author":{"gitId":"xnmng"},"content":"     * @param text String containing text to add"},{"lineNumber":137,"author":{"gitId":"xnmng"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":138,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"xnmng"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":140,"author":{"gitId":"xnmng"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":141,"author":{"gitId":"xnmng"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":142,"author":{"gitId":"xnmng"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":143,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":144,"author":{"gitId":"xnmng"},"content":"        return textToAdd;"},{"lineNumber":145,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":147,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"xnmng"},"content":"     * Iteration 2:"},{"lineNumber":149,"author":{"gitId":"xnmng"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":150,"author":{"gitId":"xnmng"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":151,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"xnmng"},"content":"    private void handleUserInput() {"},{"lineNumber":153,"author":{"gitId":"xnmng"},"content":"//        Label userText \u003d new Label(userInput.getText());"},{"lineNumber":154,"author":{"gitId":"xnmng"},"content":"//        Label dukeText \u003d new Label(getResponse(userInput.getText()));"},{"lineNumber":155,"author":{"gitId":"xnmng"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":156,"author":{"gitId":"xnmng"},"content":"                DialogBox.getUserDialog(userInput.getText(), user),"},{"lineNumber":157,"author":{"gitId":"xnmng"},"content":"                DialogBox.getDukeDialog(getResponse(userInput.getText()), duke)"},{"lineNumber":158,"author":{"gitId":"xnmng"},"content":"        );"},{"lineNumber":159,"author":{"gitId":"xnmng"},"content":"        userInput.clear();"},{"lineNumber":160,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":162,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"xnmng"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":164,"author":{"gitId":"xnmng"},"content":"     * Replace this stub with your completed method."},{"lineNumber":165,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"xnmng"},"content":"     * Generates a response according to the user command."},{"lineNumber":168,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"xnmng"},"content":"     * @param input User command."},{"lineNumber":170,"author":{"gitId":"xnmng"},"content":"     * @return Response string."},{"lineNumber":171,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"xnmng"},"content":"    protected String getResponse(String input) {"},{"lineNumber":173,"author":{"gitId":"xnmng"},"content":"        // return \"Duke heard: \" + input;"},{"lineNumber":174,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":175,"author":{"gitId":"xnmng"},"content":"            Command c \u003d Parser.interpret(input);"},{"lineNumber":176,"author":{"gitId":"xnmng"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":177,"author":{"gitId":"xnmng"},"content":"        } catch (DukeException e) {"},{"lineNumber":178,"author":{"gitId":"xnmng"},"content":"            return e.getMessage();"},{"lineNumber":179,"author":{"gitId":"xnmng"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":180,"author":{"gitId":"xnmng"},"content":"            return Ui.LINE + \"OOPS!!! You have entered an invalid Date!\\n\" + e.getMessage() + Ui.LINE;"},{"lineNumber":181,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":184,"author":{"gitId":"xnmng"},"content":"    public Storage getStorage() {"},{"lineNumber":185,"author":{"gitId":"xnmng"},"content":"        return this.storage;"},{"lineNumber":186,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":188,"author":{"gitId":"xnmng"},"content":"    public Ui getUi() {"},{"lineNumber":189,"author":{"gitId":"xnmng"},"content":"        return this.ui;"},{"lineNumber":190,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":192,"author":{"gitId":"xnmng"},"content":"    //public static void main(String[] args) {"},{"lineNumber":193,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":194,"author":{"gitId":"xnmng"},"content":"        // the argument to the constructor is the file path (relative) where Duke will read and write tasks given to it"},{"lineNumber":195,"author":{"gitId":"xnmng"},"content":"    //    new Duke(\"src/main/java/tasks.txt\").run();"},{"lineNumber":196,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":197,"author":{"gitId":"xnmng"},"content":"    //}"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"xnmng":196}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the Exception message of a DukeException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class DukeException extends Throwable {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":6}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"// partial solution copied from iP"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    protected LocalDate date;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    protected LocalTime time;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    public Event(String description, String at, boolean isDone) {"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        super(description.trim(), isDone);"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        String[] dateAndTime \u003d at.trim().split(\" \");"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"        String[] date \u003d dateAndTime[0].split(\"/\");"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"        String time;"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"        if (dateAndTime.length \u003d\u003d 1) {"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"            time \u003d \"2359\";"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"            time \u003d String.format(\"%04d\", Integer.parseInt(dateAndTime[1]));"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        String day \u003d date[0];"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"        String month \u003d date[1];"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        String year \u003d date[2];"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        this.date \u003d LocalDate.of(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        String hour \u003d time.substring(0, 2);"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"        String minute \u003d time.substring(2, 4);"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"        if (Integer.parseInt(hour) \u003c\u003d 23 \u0026\u0026 Integer.parseInt(minute) \u003c\u003d 59) {"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"            this.time \u003d LocalTime.of(Integer.parseInt(hour), Integer.parseInt(minute));"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"            this.time \u003d LocalTime.of(23, 59);"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        String formattedTime \u003d String.format(\"%02d\", time.getHour()) + String.format(\"%02d\", time.getMinute());"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        return \"  [E]\" + super.toString() + \" (At: \" + date.getDayOfMonth() + \" \""},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"                + date.getMonth().toString().toLowerCase() + \" \" + date.getYear() + (time \u003d\u003d null ? \")\" : \" \""},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"                + formattedTime + \" hrs)\");"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":48}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the event command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class EventCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    protected final String COMMAND;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public EventCommand(String command) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.COMMAND \u003d command;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * Executes the event command, causing add a task of type Event to the taskList,"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * provided that the command input is valid."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param taskList Used by Duke to keep track of tasks."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @throws MissingDescriptionException If the event command is missing a description."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     * @throws MissingTagException If the event command is missing a \"/at\" tag."},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"     * @throws MissingDateTimeException If the event command is missing a valid Date and Time."},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        String[] commandArgs \u003d COMMAND.split(\" \");"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        if (commandArgs.length \u003d\u003d 1 || commandArgs[1].equals(\"/at\")) {"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"            throw new MissingDescriptionException();"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"        } else if (!COMMAND.contains(\"/at\")) {"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"            throw new MissingTagException();"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"        } else if (COMMAND.split(\"/at\").length \u003d\u003d 1) {"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"            throw new MissingDateTimeException();"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"            String subCommand \u003d COMMAND;"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"            if (COMMAND.split(\" \")[0].length() \u003d\u003d 5) {"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"                subCommand \u003d subCommand.substring(5).trim();"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"                subCommand \u003d subCommand.substring(1).trim();"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"            String[] subCommandArgs \u003d subCommand.trim().split(\"/at\");"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"            Event e \u003d new Event(subCommandArgs[0], subCommandArgs[1], false);"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"            taskList.addTask(e);"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"            storage.write(taskList.TASKS);"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"            String result \u003d ui.showLine() + \"\\n\" + ui.createEventSuccessMessage(e, taskList.TASKS.size())"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"                    + ui.showLine();"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":63}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"public class FindCommand implements Command {"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    protected final String DESCRIPTION;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    public FindCommand(String description) {"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"        this.DESCRIPTION \u003d description.trim();"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"        for (Task t : taskList.TASKS) {"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"            if (t.description.matches(\"(.*)\" + DESCRIPTION + \"(.*)\")) {"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"                tasks.add(t);"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"        String result \u003d ui.showLine() + \"\\n\" + ui.findResultMessage(tasks, DESCRIPTION) + ui.showLine();"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":25}},{"path":"src/main/java/InvalidNumberFromCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the InvalidNumberFromDoneCommandException message of a InvalidNumberFromDoneCommandException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class InvalidNumberFromCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a InvalidNumberFromDoneCommandException, reminding the user to type in a valid number"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * for a done command."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! The done command must be followed by a valid task number. :-(\""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"                + Ui.LINE;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":15}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"        assert Main.class !\u003d null;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":11}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the list command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class ListCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Executes the list command, causing Duke to print the tasks it is currently tracking."},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     *  @param taskList Used by Duke to keep track of tasks."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        String result \u003d ui.showLine() + \"\\n\" + ui.printTasks(taskList.TASKS) + ui.showLine();"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":27}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    public void initialize() {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"        String intro \u003d Ui.LINE + \"     Hello! I\u0027m Duke and I was designed by \\n     Xuan Ming!\" + Ui.LINE;"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        DialogBox box \u003d DialogBox.getDukeDialog(intro, dukeImage);"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        dialogContainer.getChildren().add(box);"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"    private void handleUserInput() {"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        String input \u003d Ui.LINE + userInput.getText() + Ui.LINE;"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        String response \u003d duke.getResponse(userInput.getText());"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"        if (userInput.getText().equals(\"bye\")) {"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"            System.exit(0);"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":55}},{"path":"src/main/java/MissingDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the MissingDateTimeException message of a MissingDateTimeException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class MissingDateTimeException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a MissingDateTimeException, reminding the user to type in a valid Date and Time format as"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * described by this message."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! The command you keyed in needs to have a timing!\\n\""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"                + \"     The timing should be typed in after the tag, in the format \\\"DD/MM/YYYY\\\" HHMM!\""},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"                + Ui.LINE;"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":16}},{"path":"src/main/java/MissingDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the MissingDescriptionException message of a MissingDescriptionException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class MissingDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a MissingDescriptionException, reminding the user to type in a valid description with their"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * command."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! Your command needs to have a description. :-(\" + Ui.LINE;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":14}},{"path":"src/main/java/MissingInfoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the MissingInfoException message of a MissingInfoException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class MissingInfoException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a MissingInfoException, reminding the user to type in a valid description with their"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * command."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! Your command needs to be followed by a description. :-(\" + Ui.LINE;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":14}},{"path":"src/main/java/MissingNumberFromCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the MissingNumberFromCommandException message of a MissingNumberFromCommandException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class MissingNumberFromCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a MissingNumberFromCommandException, reminding the user to type in a valid number with their"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * command."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! Please type in the done command followed by a valid task number. :-(\""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"                + Ui.LINE;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":15}},{"path":"src/main/java/MissingTagException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the MissingTagException message of a MissingTagException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class MissingTagException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"     * Custom message of a MissingTagException, reminding the user to type in a valid tag with their event/deadline"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"     * command."},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        return Ui.LINE + \"     OOPS!!! Your command needs to be followed by a valid tag. :-(\\n\""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"                + \"     For the event command, this tag is /at\\n\""},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"                + \"     For the deadline command, this tag is /by\" + Ui.LINE;"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":16}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"public class Parser {"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"    public static Command interpret(String userCommand) throws DukeException{"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"        String[] commandArgs \u003d userCommand.split(\" \");"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"        switch (commandArgs[0]) {"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"        case (\"b\"):"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"        case (\"bye\") :"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"            return new ByeCommand();"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"        case (\"l\"):"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        case (\"list\") :"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"            return new ListCommand();"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        case (\"done\") :"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"            if (commandArgs.length \u003c 2) {"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"                throw new MissingNumberFromCommandException();"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"                try {"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"                    int taskNumber \u003d Integer.parseInt(commandArgs[1]) - 1;"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"                    return new DoneCommand(taskNumber);"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"                    throw new InvalidNumberFromCommandException();"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        case (\"del\"):"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"        case (\"delete\") :"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"            if (commandArgs.length \u003c 2) {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"                throw new MissingNumberFromCommandException();"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"                try {"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"                    int taskNumber \u003d Integer.parseInt(commandArgs[1]) - 1;"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"                    return new DeleteCommand(taskNumber);"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"                    throw new InvalidNumberFromCommandException();"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        case (\"e\"):"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        case (\"event\") :"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"            return new EventCommand(userCommand);"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"        case(\"d\"):"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"        case (\"deadline\") :"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"            return new DeadlineCommand(userCommand);"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        case (\"t\"):"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        case (\"todo\") :"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        case (\"f\"):"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"        case (\"find\") :"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"            if (commandArgs.length \u003d\u003d 1) {"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"                throw new MissingDescriptionException();"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"                String description \u003d \"\";"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"                for (int i \u003d 1; i \u003c commandArgs.length; i++) {"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"                    description +\u003d commandArgs[i] + \" \";"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"                description.trim();"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"                if (commandArgs[0].equals(\"t\") || commandArgs[0].equals(\"todo\")) {"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"                    return new ToDoCommand(description);"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"                } else {"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"                    return new FindCommand(description);"},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"        default :"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"            return new UnknownCommand(userCommand);"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":66}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"public class Storage {"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"    protected final File TASKFILE;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    protected String createResult \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    private String dirPath;"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    // Constructor"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"    public Storage(String filePath, String dirPath) {"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"        this.TASKFILE \u003d new File(filePath);"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"            if (TASKFILE.createNewFile()) {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"                // if a tasks.txt file does not exist, we create a file so that we can read from it in the future"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"                this.createResult \u003d \"     Duke has noticed that you do not have a text file to store your tasks!\\n\""},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"                        + \"     As such, Duke has created an empty file, ready to store your tasks!\\n\""},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"                        + \"     This text file can be found at: \" + TASKFILE.getAbsolutePath();"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"                this.createResult \u003d \"     Duke has noticed that you have a text file to store your tasks!\\n\""},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"                        + \"     Duke is currently reading the file from: \" + TASKFILE.getAbsolutePath();"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"    // writes the list of tasks into the file"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"    public void write(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"            // create a FileWriter object used by Duke to write to the taskFile"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"            FileWriter writeTaskFile \u003d new FileWriter(this.TASKFILE);"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"            for (Task task : tasks) {"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"                if (task instanceof Event) {"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"                    String day \u003d String.format(\"%02d\", ((Event) task).date.getDayOfMonth()) + \"/\""},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Event) task).date.getMonthValue()) + \"/\""},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Event) task).date.getYear());"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"                    String time \u003d String.format(\"%02d\", ((Event) task).time.getHour())"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Event) task).time.getMinute());"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"                    writeTaskFile.write(\"event\" + \" \" + task.description + \" \" + \"/at\" + \" \" + day + \" \" + time"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"                            + \" \" + task.isDone + System.lineSeparator());"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"                } else if (task instanceof Deadline) {"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"                    String day \u003d String.format(\"%02d\", ((Deadline) task).date.getDayOfMonth()) + \"/\""},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Deadline) task).date.getMonthValue()) + \"/\""},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Deadline) task).date.getYear());"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"                    String time \u003d String.format(\"%02d\", ((Deadline) task).time.getHour())"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"                            + String.format(\"%02d\", ((Deadline) task).time.getMinute());"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"                    writeTaskFile.write(\"deadline\" + \" \" + task.description + \" \" + \"/by\" + \" \" + day + \" \" + time"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":"                            + \" \" + task.isDone + System.lineSeparator());"},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"                } else if (task instanceof ToDo) {"},{"lineNumber":67,"author":{"gitId":"xnmng"},"content":"                    writeTaskFile.write(\"todo\" + \" \" + task.description + \" \" + task.isDone"},{"lineNumber":68,"author":{"gitId":"xnmng"},"content":"                            + System.lineSeparator());"},{"lineNumber":69,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":70,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":71,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"xnmng"},"content":"            writeTaskFile.close();"},{"lineNumber":73,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":74,"author":{"gitId":"xnmng"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitId":"xnmng"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":79,"author":{"gitId":"xnmng"},"content":"    // reads the file contents into the provided list of tasks"},{"lineNumber":80,"author":{"gitId":"xnmng"},"content":"    public void read(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":81,"author":{"gitId":"xnmng"},"content":"        Path filePath \u003d Paths.get(TASKFILE.getAbsolutePath());"},{"lineNumber":82,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":83,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"xnmng"},"content":"            List\u003cString\u003e taskList \u003d Files.readAllLines(filePath);"},{"lineNumber":85,"author":{"gitId":"xnmng"},"content":"            if (taskList.size() !\u003d 0) {"},{"lineNumber":86,"author":{"gitId":"xnmng"},"content":"                for (String task : taskList) {"},{"lineNumber":87,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":88,"author":{"gitId":"xnmng"},"content":"                    String[] params \u003d task.split(\" \");"},{"lineNumber":89,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":90,"author":{"gitId":"xnmng"},"content":"                    switch (params[0]) {"},{"lineNumber":91,"author":{"gitId":"xnmng"},"content":"                    case (\"event\"):"},{"lineNumber":92,"author":{"gitId":"xnmng"},"content":"                        String[] subTask \u003d task.substring(5).trim().split(\"/at\");"},{"lineNumber":93,"author":{"gitId":"xnmng"},"content":"                        assert subTask.length \u003d\u003d 2;"},{"lineNumber":94,"author":{"gitId":"xnmng"},"content":"                        String[] dateTime \u003d subTask[1].split(\" \");"},{"lineNumber":95,"author":{"gitId":"xnmng"},"content":"                        tasks.add(new Event(subTask[0].trim(), dateTime[0] + \" \" + dateTime[1] + \" \" + dateTime[2],"},{"lineNumber":96,"author":{"gitId":"xnmng"},"content":"                                Boolean.parseBoolean(dateTime[2])));"},{"lineNumber":97,"author":{"gitId":"xnmng"},"content":"                        break;"},{"lineNumber":98,"author":{"gitId":"xnmng"},"content":"                    case (\"deadline\"):"},{"lineNumber":99,"author":{"gitId":"xnmng"},"content":"                        subTask \u003d task.substring(5).trim().split(\"/by\");"},{"lineNumber":100,"author":{"gitId":"xnmng"},"content":"                        assert subTask.length \u003d\u003d 2;"},{"lineNumber":101,"author":{"gitId":"xnmng"},"content":"                        dateTime \u003d subTask[1].split(\" \");"},{"lineNumber":102,"author":{"gitId":"xnmng"},"content":"                        tasks.add(new Event(subTask[0].trim(), dateTime[0] + \" \" + dateTime[1] + \" \" + dateTime[2],"},{"lineNumber":103,"author":{"gitId":"xnmng"},"content":"                                Boolean.parseBoolean(dateTime[2])));"},{"lineNumber":104,"author":{"gitId":"xnmng"},"content":"                        break;"},{"lineNumber":105,"author":{"gitId":"xnmng"},"content":"                    case (\"todo\"):"},{"lineNumber":106,"author":{"gitId":"xnmng"},"content":"                        tasks.add(new ToDo(task.substring(4, task.length() - 5).trim(),"},{"lineNumber":107,"author":{"gitId":"xnmng"},"content":"                                Boolean.parseBoolean(params[params.length - 1])));"},{"lineNumber":108,"author":{"gitId":"xnmng"},"content":"                        break;"},{"lineNumber":109,"author":{"gitId":"xnmng"},"content":"                    }"},{"lineNumber":110,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":111,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"xnmng"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitId":"xnmng"},"content":"            e.printStackTrace();"},{"lineNumber":114,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":117,"author":{"gitId":"xnmng"},"content":"    // loads the file contents and returns them in a list format"},{"lineNumber":118,"author":{"gitId":"xnmng"},"content":"    public ArrayList\u003cTask\u003e loadTasks() {"},{"lineNumber":119,"author":{"gitId":"xnmng"},"content":"        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"xnmng"},"content":"        read(resultList);"},{"lineNumber":121,"author":{"gitId":"xnmng"},"content":"        return resultList;"},{"lineNumber":122,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":123}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"// partial solution template copied from Extension: A-Classes"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"        assert description.trim() !\u003d \"\" : \"The description of a task cannot be empty!\";"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"        this.description \u003d description.trim();"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    public String getStatusIcon() {"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"    public void markAsDone() {"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"        this.isDone \u003d true;"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":25}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    protected final ArrayList\u003cTask\u003e TASKS;"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    // constructor"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"        this.TASKS \u003d tasks;"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"    /*"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"     this function takes in the input from the user and adds it to the list of tasks Duke is tracking"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"     helper function"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    */"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    public void addTask(Task t) {"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"        this.TASKS.add(t);"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"    // this function deletes the task per requested by the user"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    public void deleteTask(int taskNumber) {"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"        Task t \u003d this.TASKS.get(taskNumber);"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        this.TASKS.remove(taskNumber);"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"        System.out.println(\"       \" + t.toString());"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"    // this function prints the task that is completed"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    public void markAsDone(int taskNumber) {"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        Task t \u003d this.TASKS.get(taskNumber);"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        t.markAsDone();"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"}"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":""}],"authorContributionMap":{"xnmng":34}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"// partial solution copied from iP"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"public class ToDo extends Task {"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"        super(description.trim(), isDone);"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"        return \"  [T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":12}},{"path":"src/main/java/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run the todo command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class ToDoCommand implements Command {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    public final String DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public ToDoCommand(String description) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.DESCRIPTION \u003d description;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"     * Executes the todo command, causing add a task of type todo to the taskList,"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * provided that the command input is valid."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *  @param taskList Used by Duke to keep track of tasks."},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"            ToDo t \u003d new ToDo(DESCRIPTION, false);"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"            taskList.addTask(t);"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"            storage.write(taskList.TASKS);"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"            String result \u003d ui.showLine();"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n\" + ui.createToDoSuccessMessage(t, taskList.TASKS.size());"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"            result +\u003d ui.showLine();"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":42}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class Ui {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"    // this field is used when output requires a horizontal line"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    public static final String LINE \u003d \"    ________________________________________________________\";"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    // this function greets the user when Duke is started"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    public String printGreetingMessage(String createResult) {"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"        String logo \u003d \"      ____        _        \\n\""},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"                + \"     |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"                + \"     | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"                + \"     | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"        String result \u003d \"     Hello from\\n\" + logo;"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n\" + LINE;"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n\" + \"     Hello! I\u0027m Duke and I was designed by Xuan Ming!\\n\";"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n\" + createResult;"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n\" + LINE;"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    // this function says bye to the user when Duke receives the input \"bye\""},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    public String printGoodbyeMessage() {"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        return \"     Bye. Hope to see you again soon!\";"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    /*"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"     calling this function will cause Duke to echo what the user inputs to Duke"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"     this method is only used in Level-1 of iP"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"    */"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"    public String echo(String s) {"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"        return s;"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"    // this method prompts the user for a command"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"    public String readCommand() {"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"        System.out.println(\"     Give me a command! \");"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"        return sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"    public String showLine() {"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        return LINE;"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":"    public String printUnknownCommandMessage(String command) {"},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"        return \"     OOPS!!! I\u0027m sorry, but I don\u0027t know what \\n    \\\"\" + command + \"\\\" means :-(\";"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"    public String createToDoSuccessMessage(ToDo t, int numOfTasks) {"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"        return \"     Got it. I\u0027ve added this task: \" + \"\\n\" + \"     \" + t.toString() + \"\\n\""},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"                + \"     Now you have \" + numOfTasks + \" tasks in the list.\";"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"    public String printTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":"            return \"     Currently, you have no tasks!\";"},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"            assert tasks.size() \u003e 0 : \"Tasks should be greater than 0!\";"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"            String result \u003d \"     These are your tasks:\";"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"            int counter \u003d 1;"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":"            for (Task task : tasks) {"},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"                if (task instanceof Deadline) {"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":"                    result +\u003d \"\\n     \" + counter + \". \" + ((Deadline) task).toString();"},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"                    counter++;"},{"lineNumber":67,"author":{"gitId":"xnmng"},"content":"                } else if (task instanceof Event) {"},{"lineNumber":68,"author":{"gitId":"xnmng"},"content":"                    result +\u003d \"\\n     \" + counter + \". \" + ((Event) task).toString();"},{"lineNumber":69,"author":{"gitId":"xnmng"},"content":"                    counter++;"},{"lineNumber":70,"author":{"gitId":"xnmng"},"content":"                } else if (task instanceof ToDo) {"},{"lineNumber":71,"author":{"gitId":"xnmng"},"content":"                    result +\u003d \"\\n     \" + counter + \". \" + ((ToDo) task).toString();"},{"lineNumber":72,"author":{"gitId":"xnmng"},"content":"                    counter++;"},{"lineNumber":73,"author":{"gitId":"xnmng"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":76,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":79,"author":{"gitId":"xnmng"},"content":"    public String doneCommandSuccessMessage(int taskNumber, Task t) {"},{"lineNumber":80,"author":{"gitId":"xnmng"},"content":"        String result \u003d \"     Nice! I\u0027ve marked this task as done: \";"},{"lineNumber":81,"author":{"gitId":"xnmng"},"content":"        if (t instanceof Event) {"},{"lineNumber":82,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((Event) t).toString();"},{"lineNumber":83,"author":{"gitId":"xnmng"},"content":"        } else if (t instanceof Deadline) {"},{"lineNumber":84,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((Deadline) t).toString();"},{"lineNumber":85,"author":{"gitId":"xnmng"},"content":"        } else if (t instanceof ToDo) {"},{"lineNumber":86,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((ToDo) t).toString();"},{"lineNumber":87,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":89,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":91,"author":{"gitId":"xnmng"},"content":"    public String createDeadlineSuccessMessage(Deadline d, int numOfTasks) {"},{"lineNumber":92,"author":{"gitId":"xnmng"},"content":"        String result \u003d \"     Got it. I\u0027ve added this task: \";"},{"lineNumber":93,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n     \" + d.toString();"},{"lineNumber":94,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n     Now you have \" + numOfTasks + \" tasks in the list.\";"},{"lineNumber":95,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":96,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":98,"author":{"gitId":"xnmng"},"content":"    public String createEventSuccessMessage(Event e, int numOfTasks) {"},{"lineNumber":99,"author":{"gitId":"xnmng"},"content":"        String result \u003d \"     Got it. I\u0027ve added this task: \";"},{"lineNumber":100,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n     \" + e.toString();"},{"lineNumber":101,"author":{"gitId":"xnmng"},"content":"        result +\u003d \"\\n     Now you have \" + numOfTasks + \" tasks in the list.\";"},{"lineNumber":102,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":103,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":105,"author":{"gitId":"xnmng"},"content":"    public String showErrorMessage(String message) {"},{"lineNumber":106,"author":{"gitId":"xnmng"},"content":"        return \"     \" + message;"},{"lineNumber":107,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":109,"author":{"gitId":"xnmng"},"content":"    public String deleteCommandSuccessMessage(int taskNumber, Task t) {"},{"lineNumber":110,"author":{"gitId":"xnmng"},"content":"        String result \u003d \"     Noted. I\u0027ve removed this task: \";"},{"lineNumber":111,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":112,"author":{"gitId":"xnmng"},"content":"        if (t instanceof Event) {"},{"lineNumber":113,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((Event) t).toString();"},{"lineNumber":114,"author":{"gitId":"xnmng"},"content":"        } else if (t instanceof Deadline) {"},{"lineNumber":115,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((Deadline) t).toString();"},{"lineNumber":116,"author":{"gitId":"xnmng"},"content":"        } else if (t instanceof ToDo) {"},{"lineNumber":117,"author":{"gitId":"xnmng"},"content":"            result +\u003d \"\\n       \" + taskNumber + \". \" + ((ToDo) t).toString();"},{"lineNumber":118,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":120,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":122,"author":{"gitId":"xnmng"},"content":"    public String findResultMessage(ArrayList\u003cTask\u003e results, String query) {"},{"lineNumber":123,"author":{"gitId":"xnmng"},"content":"        if (results.size() \u003d\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"xnmng"},"content":"            return \"     OOPS!!! I\u0027m sorry, but I didn\u0027t find anything that matches \\\"\" + query"},{"lineNumber":125,"author":{"gitId":"xnmng"},"content":"                    + \"\\\" :-(\";"},{"lineNumber":126,"author":{"gitId":"xnmng"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"xnmng"},"content":"            String result \u003d \"     Here\u0027s what I found: \";"},{"lineNumber":128,"author":{"gitId":"xnmng"},"content":"            int counter \u003d 1;"},{"lineNumber":129,"author":{"gitId":"xnmng"},"content":"            for (Task t : results) {"},{"lineNumber":130,"author":{"gitId":"xnmng"},"content":"                result +\u003d \"\\n     \" + counter + \".\" + t.toString();"},{"lineNumber":131,"author":{"gitId":"xnmng"},"content":"                counter++;"},{"lineNumber":132,"author":{"gitId":"xnmng"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"xnmng"},"content":"            return result;"},{"lineNumber":134,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":136}},{"path":"src/main/java/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to run any other unspecified command."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" * The type of a command is defined as the first word in the command string."},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"public class UnknownCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    protected final String COMMAND;"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     * constructor"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"    public UnknownCommand(String command) {"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"        this.COMMAND \u003d command;"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"     * Executes the unknown command, causing Duke to echo whatever command the user inputs as it is not a valid command."},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"     *  @param taskList Used by Duke to keep track of tasks."},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"     * @param ui Responsible for printing to console after execution."},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"     * @param storage Stores tasks in a text format."},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"     * @return"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"        String result \u003d ui.showLine() + \"\\n\" + ui.printUnknownCommandMessage(COMMAND) + ui.showLine();"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"        return result;"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"     * Returns true if a bye command is called."},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"     * Returns False otherwise."},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"     * @return boolean indicating whether Duke is to stop running."},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"    public boolean isExit() {"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"        return false;"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":37}},{"path":"src/main/java/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":" * Class to hold the UnknownCommandException message of a UnknownCommandException."},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":" */"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    protected String command;"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"     * Constructor."},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"    public UnknownCommandException(String s) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        this.command \u003d s;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":15}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"xnmng":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"xnmng":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"public class DukeTest {"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"    public DukeException testEventMethod(String command) {"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"            new EventCommand(command).execute(null, null, null);"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"        } catch (DukeException e) {"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"            return e;"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"        return new DukeException();"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"    public DukeException testDeadlineMethod(String command) {"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"            new DeadlineCommand(command).execute(null, null, null);"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"        } catch (DukeException e) {"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"            return e;"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"        return new DukeException();"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"    public DukeException testToDoMethod(String command) {"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"            new ToDoCommand(command).execute(null, null, null);"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"            return e;"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"        return new DukeException();"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"    public void ParserTest1(){"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"/at\") instanceof UnknownCommand);"},{"lineNumber":38,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"/by\") instanceof UnknownCommand);"},{"lineNumber":39,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"123\") instanceof UnknownCommand);"},{"lineNumber":40,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"abc\") instanceof UnknownCommand);"},{"lineNumber":41,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"list\") instanceof ListCommand);"},{"lineNumber":42,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"bye\") instanceof ByeCommand);"},{"lineNumber":43,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"event\") instanceof EventCommand);"},{"lineNumber":44,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"deadline\") instanceof DeadlineCommand);"},{"lineNumber":45,"author":{"gitId":"xnmng"},"content":"        assertTrue(Parser.interpret(\"todo\") instanceof ToDoCommand);"},{"lineNumber":46,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":48,"author":{"gitId":"xnmng"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"xnmng"},"content":"    public void EventTest() {"},{"lineNumber":50,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event\") instanceof MissingDescriptionException);"},{"lineNumber":51,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event /at\") instanceof MissingDescriptionException);"},{"lineNumber":52,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event e /at\") instanceof MissingDateTimeException);"},{"lineNumber":53,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event at\") instanceof MissingTagException);"},{"lineNumber":54,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event e /at 12/12/2020\") instanceof MissingDateTimeException);"},{"lineNumber":55,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event e /at\") instanceof MissingDateTimeException);"},{"lineNumber":56,"author":{"gitId":"xnmng"},"content":"        assertTrue(testEventMethod(\"event e /at 1230\") instanceof MissingDateTimeException);"},{"lineNumber":57,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":59,"author":{"gitId":"xnmng"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"xnmng"},"content":"    public void DeadlineTest() {"},{"lineNumber":61,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline\") instanceof MissingDescriptionException);"},{"lineNumber":62,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline /by\") instanceof MissingDescriptionException);"},{"lineNumber":63,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline d /by\") instanceof MissingDateTimeException);"},{"lineNumber":64,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline by\") instanceof MissingTagException);"},{"lineNumber":65,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline d /by 12/12/2020\") instanceof MissingDateTimeException);"},{"lineNumber":66,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline d /by\") instanceof MissingDateTimeException);"},{"lineNumber":67,"author":{"gitId":"xnmng"},"content":"        assertTrue(testDeadlineMethod(\"deadline d /by 1230\") instanceof MissingDateTimeException);"},{"lineNumber":68,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":70,"author":{"gitId":"xnmng"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"xnmng"},"content":"    public void ToDoTest() {"},{"lineNumber":72,"author":{"gitId":"xnmng"},"content":"        assertTrue(testToDoMethod(\"todo\") instanceof MissingDescriptionException);"},{"lineNumber":73,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":75,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":75}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"public class ToDoTest {"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"    public void dummyTest(){"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"}"}],"authorContributionMap":{"xnmng":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xnmng"},"content":"list"},{"lineNumber":2,"author":{"gitId":"xnmng"},"content":"done 1"},{"lineNumber":3,"author":{"gitId":"xnmng"},"content":"done 0"},{"lineNumber":4,"author":{"gitId":"xnmng"},"content":"done -1"},{"lineNumber":5,"author":{"gitId":"xnmng"},"content":"done a"},{"lineNumber":6,"author":{"gitId":"xnmng"},"content":"event"},{"lineNumber":7,"author":{"gitId":"xnmng"},"content":"event 1"},{"lineNumber":8,"author":{"gitId":"xnmng"},"content":"event a"},{"lineNumber":9,"author":{"gitId":"xnmng"},"content":"event 1 /at"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"event a /at"},{"lineNumber":11,"author":{"gitId":"xnmng"},"content":"event 1 /at 1"},{"lineNumber":12,"author":{"gitId":"xnmng"},"content":"event a /at a"},{"lineNumber":13,"author":{"gitId":"xnmng"},"content":"done 0"},{"lineNumber":14,"author":{"gitId":"xnmng"},"content":"done -1"},{"lineNumber":15,"author":{"gitId":"xnmng"},"content":"done 3"},{"lineNumber":16,"author":{"gitId":"xnmng"},"content":"done 2"},{"lineNumber":17,"author":{"gitId":"xnmng"},"content":"done 1"},{"lineNumber":18,"author":{"gitId":"xnmng"},"content":"delete -1"},{"lineNumber":19,"author":{"gitId":"xnmng"},"content":"delete 0"},{"lineNumber":20,"author":{"gitId":"xnmng"},"content":"delete 3"},{"lineNumber":21,"author":{"gitId":"xnmng"},"content":"delete 2"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":"delete 1"},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"delete a"},{"lineNumber":24,"author":{"gitId":"xnmng"},"content":"deadline"},{"lineNumber":25,"author":{"gitId":"xnmng"},"content":"deadline a"},{"lineNumber":26,"author":{"gitId":"xnmng"},"content":"deadline 1"},{"lineNumber":27,"author":{"gitId":"xnmng"},"content":"deadline a /by"},{"lineNumber":28,"author":{"gitId":"xnmng"},"content":"deadline a /by a"},{"lineNumber":29,"author":{"gitId":"xnmng"},"content":"deadline 1 /by"},{"lineNumber":30,"author":{"gitId":"xnmng"},"content":"deadline 1 /by 1"},{"lineNumber":31,"author":{"gitId":"xnmng"},"content":"todo"},{"lineNumber":32,"author":{"gitId":"xnmng"},"content":"todo a"},{"lineNumber":33,"author":{"gitId":"xnmng"},"content":"abc"},{"lineNumber":34,"author":{"gitId":"xnmng"},"content":"123"},{"lineNumber":35,"author":{"gitId":"xnmng"},"content":"hi"},{"lineNumber":36,"author":{"gitId":"xnmng"},"content":"list"},{"lineNumber":37,"author":{"gitId":"xnmng"},"content":"bye"}],"authorContributionMap":{"xnmng":37}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"xnmng"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003cinput.txt \u003eACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"xnmng"},"content":""},{"lineNumber":23,"author":{"gitId":"xnmng"},"content":"pause"}],"authorContributionMap":{"-":20,"xnmng":3}}]
