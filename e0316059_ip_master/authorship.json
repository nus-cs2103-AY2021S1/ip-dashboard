[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public Deadline(String command, LocalDateTime time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 21
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            readFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                handleCommand(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void greet() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\n What can I do for you?\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void exit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void echo(String command) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"\" + command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void add(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + task.toString()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                + \"\\n Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void done(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void delete(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + tasks.get(index-1).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        tasks.remove(index-1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void printList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (tasks.get(i) !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println((i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * this method handles two types of error: invalid input (does not contain todo/deadline/event)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * and empty task (if the input starts with todo/deadline/event and the content is not empty,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     * it is assumed that the input has correct structure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0316059"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void handleCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            printList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            int index \u003d Integer.parseInt(command.split(\" \")[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            done(tasks.get(index - 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                writeToFile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            delete(Integer.parseInt(command.split(\" \")[1]));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                writeToFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            String taskcommand \u003d command.replace(\"todo\", \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (!taskcommand.equals(\"\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(new ToDo(taskcommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                throw new DukeException(\"EmptyToDo\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                writeToFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            String taskcommand \u003d command.split(\"/\")[0].replace(\"deadline\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (!taskcommand.equals(\"\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                String time \u003d command.split(\"/\")[1].replace(\"by \", \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(new Deadline(taskcommand, LocalDateTime.parse(time, formatter)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                throw new DukeException(\"EmptyDeadline\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                writeToFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else if (command.split(\" \")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            String taskcommand \u003d command.split(\"/\")[0].replace(\"event\", \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (!taskcommand.equals(\"\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                String time \u003d command.split(\"/\")[1].replace(\"at \", \"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(new Deadline(taskcommand, LocalDateTime.parse(time, formatter)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                throw new DukeException(\"EmptyEvent\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                writeToFile();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                System.out.println(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            throw new DukeException(\"invalid\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void readFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        File file \u003d new File(\"C:\\\\Users\\\\e0316059\\\\Desktop\\\\cs2103 ip\\\\src\\\\main\\\\java\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            String[] data \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (data[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                ToDo todo \u003d new ToDo(data[2]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(todo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                if (data[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                    todo.setDone();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else if (data[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(data[3], formatter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                Deadline deadline \u003d new Deadline(data[2], time);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(deadline);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                if (data[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                    deadline.setDone();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else if (data[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                LocalDateTime time \u003d LocalDateTime.parse(data[3], formatter);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                Event event \u003d new Event(data[2], time);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                add(event);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                if (data[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                    event.setDone();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private static void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(\"C:\\\\Users\\\\e0316059\\\\Desktop\\\\cs2103 ip\\\\src\\\\main\\\\java\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++)  {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                String text \u003d \"T | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                fileWriter.write(text + System.lineSeparator());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                String text \u003d \"D | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                        + \" | \" + ((Deadline) task).getTime();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                fileWriter.write(text + System.lineSeparator());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                String text \u003d \"E | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getCommand()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                        + \" | \" + ((Event) task).getTime();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                fileWriter.write(text + System.lineSeparator());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 190,
      "-": 10
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public DukeException (String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (type.equals(\"EmptyToDo\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (type.equals(\"EmptyDeadline\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return \"OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (type.equals(\"EmptyEvent\")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return \"OOPS!!! The description of a event cannot be empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 20
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public Event(String command, LocalDateTime time) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "                time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 21
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public Task(String command){"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return \"[\\u2713]\" + this.command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0316059"
        },
        "content": "            return \"[\\u2718]\" + this.command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 30
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public ToDo(String command){"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0316059"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0316059": 11
    }
  },
  {
    "path": "src/main/java/data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "T | 0 | return book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "D | 0 |  meeting  | 2020-08-31T12:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "D | 0 |  homework  | 2020-08-31T23:59"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "T | 0 |  quiz"
      }
    ],
    "authorContributionMap": {
      "e0316059": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0316059"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "event meeting /at 1200"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "e0316059": 4
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0316059"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0316059"
        },
        "content": "if not exist C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin mkdir C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0316059"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0316059"
        },
        "content": "javac  -cp C:\\Users\\e0316059\\Desktop\\cs2103 ip\\src\\main\\java -Xlint:none -d C:\\Users\\e0316059\\Desktop\\cs2103 ip\\bin C:\\Users\\e0316059\\Desktop\\cs2103 ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0316059"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0316059"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0316059"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0316059"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0316059"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0316059"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "e0316059": 16,
      "-": 6
    }
  }
]
