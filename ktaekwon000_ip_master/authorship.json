[
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates a single command for the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected Integer index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates an invalid command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskType \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either LIST/BYE."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(\"You need to provide an index or description.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        description \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either DELETE or DONE."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index index of TaskList the action is to be applied to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, Integer index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(\"A description parameter is required for this kind of TaskType\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        description \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of TODO."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, String description) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(\"A date parameter is required for this kind of TaskType\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either a DEADLINE or EVENT."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date the date of the task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, String description, LocalDate date) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(\"A date parameter is irrelevant to the TaskType.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the TaskType of the Command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the TaskType of the command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the respective date of the Command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the date of the command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if the Command object is valid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return true if the command is valid"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType !\u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static String addToList(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"Sure, I\u0027ve added this task to your list:\\n \" + task"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \"\\nYou now have \" + taskList.size() + \" task(s) in the list!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Executes the Command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param list the TaskList this command is to be applied to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void execute(TaskList list) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!isValid()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (list.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    print +\u003d \"\\nYour list is empty. How about adding some tasks?\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        print +\u003d \"\\n \" + (i + 1) + \": \" + list.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Task deleted \u003d list.remove(index - 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Sure, I\u0027ve deleted this task from your list:\\n \" + deleted"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"\\nYou now have \" + list.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Task doneTask \u003d list.markTaskAsDone(index - 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Great! I\u0027ve marked this task as done:\\n \" + doneTask;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Todo(description));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Deadline(description, date));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Event(description, date));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                TaskList foundList \u003d list.find(description);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Here are your search results:\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (foundList.isEmpty()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    print +\u003d \"\\nWe didn\u0027t find any tasks relevant to your search term.\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    for (int i \u003d 0; i \u003c foundList.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        print +\u003d \"\\n \" + (i + 1) + \": \" + foundList.get(i);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(taskType + \" is not supported as a TaskType.\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"Contact the developer if you see this message.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            print \u003d \"The index you provided was out of bounds.\\nRun list to see your list of tasks.\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Ui.print(print);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command \u003d (Command) o;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType \u003d\u003d command.taskType"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(index, command.index)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(description, command.description)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(date, command.date);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(taskType, index, description, date);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 214
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Deadline, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date the date of the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        by \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \" (by: \" + by.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 28
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the main entry point of the duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a Duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param filePath path to locate/save the save file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        list \u003d storage.loadFile();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        while (command.getTaskType() !\u003d TaskType.BYE) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            command.execute(list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            input \u003d ui.getInput();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storage.saveFile(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Entry point for the Duke program"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        new Duke(\".//data//duke.data\").run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 41,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents an Event, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the decription of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date the date of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        at \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \" (at: \" + at.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 28
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the parsing method of the Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Parses the input into a Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param input the input command from the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return a command that can be executed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            TaskType taskType \u003d TaskType.of(splitInput[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                return new Command(taskType);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (splitInput.length \u003c 2 || !splitInput[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    throw new IllegalArgumentException(\"The index of the task must be provided.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                int index \u003d Integer.parseInt(splitInput[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                return new Command(taskType, index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (input.length() \u003c\u003d 5 || input.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    throw new IllegalArgumentException(\"The description of this TaskType cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                return new Command(taskType, input.substring(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                int indexOfBy \u003d input.indexOf(taskType \u003d\u003d TaskType.EVENT ? \" /at \" : \" /by \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (input.length() \u003c\u003d (taskType \u003d\u003d TaskType.EVENT ? 6 : 9) || splitInput.length \u003c 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    throw new IllegalArgumentException(\"The description of this kind of task cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                String dateString \u003d input.substring(indexOfBy + 5);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (indexOfBy \u003c 0 || dateString.split(\" \").length \u003c\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    throw new IllegalArgumentException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        \"A date needs to be provided with /by or /at.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                            + \"Usage: deadline return book /by 2020-12-30 OR event library renewal /at 2020-12-29\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                return new Command(taskType, input.substring((taskType \u003d\u003d TaskType.EVENT ? 6 : 9), indexOfBy), date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(\"Your input must start with one of the following:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"\\\"todo\\\", \\\"deadline\\\", \\\"event\\\", \\\"list\\\", \\\"done\\\" or \\\"delete\\\".\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Ui.print(\"There was an error parsing your command.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new Command();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 63
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the storage feature of the Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a Storage instantiation with a specific file path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param filePath The path of the file to store the save file at"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private TaskList makeDataFile() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        File file \u003d path.toFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        oos.writeObject(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Attempts to load the save file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return a TaskList from the saved file, if one exists. If not, a new TaskList is returned."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList loadFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList list \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            File file \u003d path.toFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author ktaekwon000-reused"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            //Reused from https://stackoverflow.com/a/16111797 with minor modifications"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            list \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException | ClassNotFoundException e1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                list \u003d makeDataFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            } catch (FileNotFoundException e2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    list \u003d makeDataFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    Ui.print(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Ui.print(\"There was an error initialising your save file.\\n\" + e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (list \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Ui.print(\"Running program without initializing a save.\\nThis may cause errors when closing the program.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Attempts to save the TaskList to the respective path."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param list the TaskList to be saved"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void saveFile(TaskList list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            File file \u003d path.toFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author ktaekwon000-reused"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            //Reused from https://stackoverflow.com/a/16111797 with minor modifications"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            oos.writeObject(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Ui.print(\"There was an error saving your data.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 81,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Task in the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Task with a specific description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the description of this task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the description of this task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Sets the done-ness of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param isDone the done-ness to be applied on the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the status icon of the task, to identify whether it has been done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return Y if the task has been done, X otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return (isDone ? \"Y\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return isDone \u003d\u003d task.isDone \u0026\u0026 Objects.equals(description, task.description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(description, isDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 68
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a list of Tasks for the Duke program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a TaskList with a specific List."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param tasks the list to instantiate the TaskList with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a TaskList with no existing tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Marks a certain task in the TaskList as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be marked as done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task that was marked as done"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the task at a certain 0-based index of the TaskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be returned"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task at the 0-based index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Removes a task at the 0-based index of the TaskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be removed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task that was removed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a TaskList where all the terms\u0027 descriptions contain the search term"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param term the String to search for"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the filtered TaskList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList find(String term) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        newList.removeIf((task -\u003e !task.getDescription().contains(term)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return new TaskList(newList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the size of the TaskList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the size of the TaskList"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if the TaskList is empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return true if the TaskList is empty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskList \u003d (TaskList) o;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.equals(tasks, taskList.tasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(tasks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 110
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a specific task type of the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, BYE, FIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a relevant TaskType when given a String input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param str the String representation of the TaskType"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the TaskType relevant to the String parameter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static TaskType of(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        str \u003d str.toLowerCase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch(str) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DEADLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return EVENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return LIST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DELETE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return BYE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return FIND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(str + \" is not a valid TaskType.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 37
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Todo, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the Todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 19
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the various methods and constants relevant to the UI of the Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello, I\u0027m Duke, your personal assistant!\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        + \"What can I do for you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static final String GOODBYE_MESSAGE \u003d \"Bye. Hope to see you again soon! :)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a Ui instance."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the next input of the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the next input of the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Prints a String wrapped with lines on the top and bottom."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param txt the text to be printed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static void print(String txt) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        System.out.println(LINE + \"\\n\" + txt + \"\\n\" + LINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Prints a hardcoded greeting to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        print(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Prints a hardcoded Goodbye to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        print(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 52
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A test class wrapping around the test methods for the class Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void addToList_simpleTodo_Success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskListExpected \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskListExpected.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskListActual \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command \u003d new Command(TaskType.TODO, \"read book\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        command.execute(taskListActual);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(taskListExpected, taskListActual);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A test class wrapping around the test methods for the class Parser."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void simpleTodo_todoReadBook_Success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(new Command(TaskType.TODO, \"read book\"), Parser.parse(\"todo read book\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void deadlineWithDate_Success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(new Command(TaskType.DEADLINE, \"return book\", LocalDate.of(2020,12,25))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            , Parser.parse(\"deadline return book /by 2020-12-25\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "todo     "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "deadline return book /by 2020-12-25"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "event library renewal"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "event library renewal /at 2020-12-26"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "todo do homework"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "delete"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "delete -1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "find"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "find libbbbb"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "find library"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "find book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "blahblah"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 30
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 5,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Command.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Deadline.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Event.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Parser.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Storage.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Task.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\TaskList.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\TaskType.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Todo.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "C:\\Users\\Kimmie\\Documents\\git\\ip\\src\\main\\java\\duke\\Ui.java"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 11
    }
  }
]
