[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 14,
      "-": 46
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * represents a deadline task that has a description, a date, and a state of whether it has been done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description the description of the deadline task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param by the date by when the task should have been finished"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"D \" + super.toSave() + \"/\" + by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 31
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * is the main class of the individual project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            storage.loadTasks(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            ui.printLoadingError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        while(!parser.isFinished()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                parser.parse(ui.read());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            } catch(DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                ui.printException(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            ui.printSavingError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        new Duke(\"duke.txt\").run();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //Step 1. Formatting the window to look as expected. Setting up required components"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        });"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        );"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 172,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * handles errors in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * represents a event task that has a description, a date, and a state of whether it has been done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description the description of the event task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param at the date when the task should take place"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"E \" + super.toSave() + \"/\" + at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 31
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Duke duke \u003d new Duke(\"duke.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * deals with making sense of the user command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected int location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected LocalDate time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected boolean isFinished;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new parser and initialized the state to false."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param tasks the task list that will be implemented"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Parser(TaskList tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        ui \u003d new Ui(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        isFinished \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * interprets the command from user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param command a string array of length 2. Command[1] represents type and command[2] represents description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws DukeException possible exception when executing the commands"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void parse(String[] command) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        type \u003d command[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        description \u003d command[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if (type.equals(\"list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            ui.list();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } else if(type.equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            ui.showEnd();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        tasks.addTask(new Todo(description.substring(1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.printPart(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"  \" + tasks.get(tasks.count() - 1).toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"\\nNow you have \" + (tasks.count()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        location \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        date \u003d description.substring(location + 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        time \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        description \u003d description.substring(1, location - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        tasks.addTask(new Deadline(description, time));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.printPart(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"  \" + tasks.get(tasks.count() - 1).toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"\\nNow you have \" + (tasks.count()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        location \u003d description.indexOf(\"/\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        date \u003d description.substring(location + 4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        time \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        description \u003d description.substring(1, location - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        tasks.addTask(new Event(description, time));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.printPart(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"  \" + tasks.get(tasks.count() - 1).toString()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"\\nNow you have \" + (tasks.count()) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The key word cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        TaskList matchingTasks \u003d tasks.findTasks(description.substring(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.find(matchingTasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The number to be marked done cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        int n \u003d Integer.parseInt(description.substring(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        tasks.get(n - 1).markAsDone();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.printPart(\"Nice! I\u0027ve marked this task as done:\\n\" + \"  \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + tasks.get(n - 1).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (!(description.length() \u003e 1)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        throw new DukeException(\"OOPS!!! The number to be deleted cannot be empty.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        int selected \u003d Integer.parseInt(description.substring(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        ui.printPart(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"  \" + tasks.get(selected - 1).toString()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                                + \"\\nNow you have \" + (tasks.count() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        tasks.deleteTask(selected - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 124
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected File file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected boolean isCreated;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     *  creates a new storage with a file path."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param path file path to the storage file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            this.path \u003d path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            file \u003d new File(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * saves all of the tasks in the task list into the storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param tasks list of tasks to be saved"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws java.io.IOException possible exception when creating the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void saveTasks(TaskList tasks) throws java.io.IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        isCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PrintWriter pw \u003d new PrintWriter(path);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        pw.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        PrintWriter writer \u003d new PrintWriter(path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.count(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            writer.write(tasks.get(i).toSave() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * loads all of the tasks stored in the file to a task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param tasks the list that tasks will be loaded to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @throws java.io.IOException possible exception when creating the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void loadTasks(TaskList tasks) throws java.io.IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        isCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        int location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        LocalDate time;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        Scanner reader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        while(reader.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            String line \u003d reader.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \u0027T\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    task \u003d new Todo(line.substring(4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (line.charAt(2) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    tasks.addTask(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \u0027D\u0027:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    location \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d line.substring(location + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    time \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    description \u003d line.substring(4, location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    task \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (line.charAt(2) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    tasks.addTask(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                case \u0027E\u0027:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    location \u003d line.indexOf(\"/\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    date \u003d line.substring(location + 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    time \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    description \u003d line.substring(4, location);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    task \u003d new Event(description, time);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    if (line.charAt(2) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                    tasks.addTask(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 92
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * represents a task that has a description and a state of whether it has been done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new task with the state of not being done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * gets the status icon for this task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return tick if it has been done and cross if it has not been done yet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * returns the description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return description of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * marks the task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return String.format(\"[%s] \", getStatusIcon()) + description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * converts the task to string to store in the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return string to write into the storage file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return (isDone? \"1 \" : \"0 \") + description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 52
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * contains the task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * counts the number of tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return number of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public int count() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * returns the task at the specific position."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param index the position of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return the specified task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * add a task to the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * delete a task from the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param number the index of the task to be removed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void deleteTask(int number) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        tasks.remove(number);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * finds all of the tasks that contain the keyword."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param word the keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return a list of matching tasks"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public TaskList findTasks(String word) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for(Task task: tasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            if(task.getDescription().contains(word)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                matchingTasks.addTask(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 65
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * represents a todo task that has a description, and a state of whether it has been done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new todo task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param description the description of the todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return \"T \" + super.toSave();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 23
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " * deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public static String LINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected String[] command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    protected Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * creates a new ui with a task list and initiates the scanner and command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param tasks the task list to be implemented"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public Ui(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        command \u003d new String[2];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        printPart(\"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void showEnd() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        printPart(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * reads the command from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @return a string array command[2]. command[0] represents type and command[1] represents description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public String[] read() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        command[0] \u003d scanner.next();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        if(command[0].equals(\"list\") || command[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            command[1] \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            command[1] \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * lists out all the tasks in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.count(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            System.out.println(String.format(\"  %d. \", i + 1) + tasks.get(i).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * lists out all the tasks in the matching task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     * @param taskList a task list that contains all the matching tasks."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void find(TaskList taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.count(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            System.out.println(String.format(\"  %d. \", i + 1) + taskList.get(i).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void printException(DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        printPart(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void printPart(String str) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(str);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(LINE + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void printLoadingError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(\"Some error occurred when loading.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    public void printSavingError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        System.out.println(\"Some error occurred when saving.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 87
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"[T][\\u2718] return book\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Todo(\"return book\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testDeadlineToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"[D][\\u2718] return book (by: Dec 30 2020)\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-12-30\")).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testEventToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"[E][\\u2718] return book (at: Dec 30 2020)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Event(\"return book\", LocalDate.parse(\"2020-12-30\")).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testTodoToSave() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"T 0 return book\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Todo(\"return book\").toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testDeadlineToSave() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"D 0 return book/Dec 30 2020\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Deadline(\"return book\", LocalDate.parse(\"2020-12-30\")).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    void testEventToSave() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "        assertEquals(\"E 0 return book/Dec 30 2020\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "                new Event(\"return book\", LocalDate.parse(\"2020-12-30\")).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Liu-2001"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Liu-2001": 3,
      "-": 20
    }
  }
]
