[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.lang.reflect.Method;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String gap \u003d \"        \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String init \u003d \"        ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        What can I do for you?\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(init);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String temp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        DukeCommand.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        while(!(temp \u003d sc.nextLine()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        ____________________________________________________________\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String comm \u003d temp.split(\" \")[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            for(DukeCommand command: DukeCommand.values()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if(comm.equals(command.getCommand())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                if(flag) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    Method[] methods \u003d DukeCommand.class.getMethods();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    for(Method method: methods) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        if(method.getName().equals(comm+\"Comm\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                            method.invoke(null, temp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! Unknown command!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"        \" + e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (IllegalAccessException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } catch (InvocationTargetException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"        \" + e.getTargetException().getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        ____________________________________________________________\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        String exit \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        ____________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        Bye. Hope to see you again soon!\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                \"        ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(exit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 57,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.security.DigestException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public enum DukeCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    LIST(\"list\", 100),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    TODO(\"todo\", 200),DEADLINE(\"deadline\", 201),EVENT(\"event\", 201),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DONE(\"done\", 300),DELETE(\"delete\", 301),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    BYE(\"bye\", 400);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static String gap \u003d \"        \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    private DukeCommand(String command, int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getCommand() { return command; }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setCommand(String command) { this.command \u003d command; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public int getIndex() { return index; }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setIndex(int index) { this.index \u003d index; }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void executeCommand(String command, String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void listComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(input.split(\" \").length !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027list\u0027 command parameters!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        System.out.println(\"        Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        int ctr \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        StringBuilder sb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        for(Task task: tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            sb.append(gap).append(ctr).append(\".\").append(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(sb.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            ctr++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void todoComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"todo ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(input).matches()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027todo\u0027 command format!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Todo todo \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks.add(todo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"          \" + todo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void deadlineComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"deadline ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /by ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(input).matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027deadline\u0027 command format!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] s \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Deadline deadline \u003d new Deadline(s[0], s[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks.add(deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"          \" + deadline);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void eventComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"event ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*) /at ([a-zA-z0-9_-]+)((?: [a-zA-z0-9_-]+)*)\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(input).matches()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027event\u0027 command format!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            String[] s \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            Event event \u003d new Event(s[0], s[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            tasks.add(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"          \" + event);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            System.out.println(\"        Now you have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void doneComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"done [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(input).matches()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027done\u0027 command format!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\"+input.charAt(5)) - 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(tasks.size() \u003e\u003d index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task tas \u003d tasks.get(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                tas.markAsDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"        Nice! I\u0027ve marked this task as done: \\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"          \" + tas);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void deleteComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"delete [1-9][0-9]{0,}\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        if(!pattern.matcher(input).matches()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Wrong \u0027delete\u0027 command format!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            int index \u003d Integer.parseInt(\"\"+input.charAt(7)) - 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            if(tasks.size() \u003e index \u0026\u0026 index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                Task tas \u003d tasks.get(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                tasks.remove(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"        Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                System.out.println(\"          \" + tas);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! There isn\u0027t a task with that index!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public static void byeComm(String input) throws DukeException{"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 143
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 14
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String getDescription() { return description; }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDescription(String description) { this.description \u003d description; }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public boolean isDone() { return isDone; }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public void setDone(boolean done) { isDone \u003d done; }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 31
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline return book /by tonight"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event play games /at tomorrow 9-11pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "wrongcommand"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo things /at that time"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "deadline eat food"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "event shower /by next year"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "todo illegal stuff Kappa"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 17
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuunoKun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "YuunoKun": 3,
      "-": 20
    }
  }
]
