[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    mainClassName \u003d \"core.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "    toolVersion \u003d \u00278.36\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Enumerates the types of possible commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "    EXIT_CMD(\"bye\", true),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "    LIST_CMD(\"list\", true),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "    DONE_CMD(\"done\", false),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "    TODO_CMD(\"todo\", false),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "    EVENT_CMD(\"event\", false),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "    DEADLINE_CMD(\"deadline\", false),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "    DELETE_CMD(\"delete\", false),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    FIND_CMD(\"find\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String cmdString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final boolean hasNoArgs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    Command(String cmdString, boolean hasNoArgs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.cmdString \u003d cmdString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.hasNoArgs \u003d hasNoArgs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Returns the command string that triggers this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return a command string keyword e.g. {@code list}, {@code done}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String getCmdString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return cmdString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Checks if the command is standalone and has no arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return {@code true} if the command has no arguments"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public boolean isHasNoArgs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return hasNoArgs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return cmdString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Strips the first few characters of the given String,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * depending on the length of the command string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * This is used to obtain arguments from a command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param input the String to strip"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return the stripped input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String strip(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return input.substring(cmdString.length()).strip();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 56
    }
  },
  {
    "path": "src/main/java/command/CommandHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import core.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import core.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.IpException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": " * A function that accepts and processes lines of user commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": " * When used as a Function, {@code apply} returns output generated by iPbot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": " * When used as a Consumer, {@code accept} discards the output (silent)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class CommandHandler implements Consumer\u003cString\u003e, Function\u003cString, String\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void accept(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // discard output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        String output \u003d apply(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String apply(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // input string should no longer be blank"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assert !input.isBlank();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "            final String output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "            final Command cmd \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "            final String stripped \u003d cmd.strip(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "            final String[] split;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case EXIT_CMD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d \"Goodbye!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case LIST_CMD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d listTasks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case DONE_CMD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    final int id \u003d Integer.parseInt(stripped);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    output \u003d completeTask(TaskList.get(id - 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input, \"Could not read the task ID\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wltan"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input, \"Task ID does not exist\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case TODO_CMD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d addTask(new Todo(stripped));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case EVENT_CMD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wltan"
        },
        "content": "                split \u003d stripped.split(\"/at\", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wltan"
        },
        "content": "                if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wltan"
        },
        "content": "                            \"Events should have a time specified with /at\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d addTask(new Event(split[0].strip(), split[1].strip()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case DEADLINE_CMD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wltan"
        },
        "content": "                split \u003d stripped.split(\"/by\", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wltan"
        },
        "content": "                if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wltan"
        },
        "content": "                            \"Deadlines should have a time due specified with /by\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d addTask(new Deadline(split[0].strip(), split[1].strip()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case DELETE_CMD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wltan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    final int id \u003d Integer.parseInt(stripped);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    output \u003d deleteTask(id - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wltan"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input, \"Could not read the task ID\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wltan"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    throw new CommandException(input, \"Task ID does not exist\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wltan"
        },
        "content": "            case FIND_CMD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output \u003d findTasks(stripped);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wltan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wltan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wltan"
        },
        "content": "                throw new IllegalStateException(\"Unexpected state\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wltan"
        },
        "content": "            Storage.save();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (IpException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Adds a task to the list of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param toAdd the task to be added"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return String containing output generated from iPbot"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static String addTask(Task toAdd) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wltan"
        },
        "content": "        TaskList.add(toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"added: %s\\nThere are now %d task(s).\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wltan"
        },
        "content": "                toAdd.toString(), TaskList.size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Queries the list of tasks and displays them."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return String containing output generated from iPbot"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static String listTasks() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return TaskList.size() \u003d\u003d 0"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wltan"
        },
        "content": "                ? \"No tasks added.\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wltan"
        },
        "content": "                : TaskList.stream()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    .map(new Function\u003cTask, String\u003e() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        private int id \u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        public String apply(Task t) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wltan"
        },
        "content": "                            return String.format(\"%d. %s\", id++, t.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    })"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param toComplete the task to be marked as done"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return String containing output generated from iPbot"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static String completeTask(Task toComplete) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (toComplete.getDoneStatus()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wltan"
        },
        "content": "            // already done"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return \"Task already done:\\n\" + toComplete;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wltan"
        },
        "content": "            // mark as done"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wltan"
        },
        "content": "            toComplete.markAsDone();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return \"Task done:\\n\" + toComplete;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param id the ID of the task to be deleted"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return String containing output generated from iPbot"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static String deleteTask(int id) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"Task deleted: %s\\n%d task(s) left.\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wltan"
        },
        "content": "                TaskList.remove(id).toString(), TaskList.size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Finds a subset of the task list based on a given substring, and lists that subset."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param queryString the substring to match against"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return String containing output generated from iPbot"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static String findTasks(String queryString) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final List\u003cTask\u003e results \u003d TaskList.stream()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .filter(x -\u003e x.toString().contains(queryString))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (results.isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wltan"
        },
        "content": "            return \"No matches found.\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return results.size() + \" match(es) found.\\n\" + IntStream.rangeClosed(1, results.size())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .boxed()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .map(i -\u003e String.format(\"%d. %s\", i, results.get(i - 1)))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 180
    }
  },
  {
    "path": "src/main/java/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Parses an input command to determine what command it is."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param input the input command as a String"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return the {@code Command} that this string corresponds to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws CommandException if the input does not match any known commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static Command parseCommand(String input) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return Stream.of(Command.values())"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .filter(cmd -\u003e cmd.isHasNoArgs()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        ? input.equals(cmd.getCmdString())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "                        : input.startsWith(cmd.getCmdString()))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .orElseThrow(() -\u003e new CommandException(input, \"Unknown command\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 23
    }
  },
  {
    "path": "src/main/java/core/IpBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Contains the iPbot GUI logic."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class IpBot extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "        URL url \u003d IpBot.class.getResource(\"/view/MainWindow.fxml\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        BorderPane root \u003d FXMLLoader.load(url);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "        primaryStage.setScene(new Scene(root));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 25
    }
  },
  {
    "path": "src/main/java/core/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Main class containing the entry point of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Entry point of the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // task list should be empty on startup (before load)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assert TaskList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "            Storage.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        Application.launch(IpBot.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 27
    }
  },
  {
    "path": "src/main/java/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import command.CommandHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Saves the task list to a file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws IOException if there was an error writing to the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static void save() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final File saveFile \u003d new File(\"./data/saved.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "        saveFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "        saveFile.createNewFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final FileWriter fw \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "        fw.write(IntStream.rangeClosed(1, TaskList.size())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .boxed()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .map(i -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    Task t \u003d TaskList.get(i - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    return t.getParentCommand()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "                            + (t.getDoneStatus() ? \"\\ndone \" + i : \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "                })"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "                .collect(Collectors.joining(\"\\n\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Loads the task list from a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws IOException if there was an error reading from the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static void load() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final File saveFile \u003d new File(\"./data/saved.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (saveFile.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "            Files.lines(saveFile.toPath())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "                    .forEach(new CommandHandler());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 45
    }
  },
  {
    "path": "src/main/java/core/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Controls the current list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Adds a {@code Task}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param t the {@code Task} to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static void add(Task t) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Retrieves the {@code Task} at the given index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param id the index of the {@code Task} to find"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return the {@code Task} at index {@code id}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static Task get(int id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return tasks.get(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Removes the {@code Task} at the given index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param id the index of the {@code Task} to remove"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return the {@code Task} at index {@code id} that was removed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static Task remove(int id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return tasks.remove(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Retrieves the size of the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return the size of the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static int size() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Retrieves a {@code Stream} representation of the task list for iteration purposes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return a {@code Stream} whose elements are {@code Task}s in the task list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public static Stream\u003cTask\u003e stream() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return tasks.stream();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 57
    }
  },
  {
    "path": "src/main/java/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Exception representing an error parsing the command strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class CommandException extends IpException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String reason;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Creates a new exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param command the command that could not be parsed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param reason the reason why the command could not be parsed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public CommandException(String command, String reason) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(reason);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \"Sorry, I can\u0027t process this command: \" + command + \"\\nReason: \" + reason;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 26
    }
  },
  {
    "path": "src/main/java/exceptions/DataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Exception representing an error in data validation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class DataException extends IpException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String field;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String reason;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Creates a new exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param field the fields with invalid data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param reason the reason why the data is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public DataException(String field, String reason) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(reason);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \"Sorry, this field is invalid: \" + field + \"\\nReason: \" + reason;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 26
    }
  },
  {
    "path": "src/main/java/exceptions/IpException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Parent class of all exceptions generated by iPbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class IpException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public IpException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 10
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.DataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Deadlines have an additional time due (a {@code LocalDate} specified with /by)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    // task must be done by this time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final LocalDate by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Constructs a new Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param desc description of the deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param by time due - task must be done by this time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws DataException @throws DataException if the time due or description is blank or invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public Deadline(String desc, String by) throws DataException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (by.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new DataException(\"Time Due\", \"Cannot be blank\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "            this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new DataException(\"Time Due\", \"Parse error - \" + e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    protected char getTaskType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \u0027D\u0027;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "                by.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String getParentCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \"deadline \" + getDescription() + \" /by \" + by;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 50
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.DataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Events have an additional event time (a {@code LocalDate} specified with /at)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    // event held at this time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final LocalDate at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Constructs a new Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param desc description of the event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param at event time - event is held at this time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws DataException if the event time or description is blank or invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public Event(String desc, String at) throws DataException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (at.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new DataException(\"Event Time\", \"Cannot be blank\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "            this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new DataException(\"Event Time\", \"Parse error - \" + e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    protected char getTaskType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \u0027E\u0027;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"%s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "                at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String getParentCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \"event \" + getDescription() + \" /at \" + at;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 50
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.DataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": " * An abstract task. All tasks have a description and completion status."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": " * They start as incomplete, and can be marked as complete later."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "    // task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "    // indicates whether the task is done or not"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Constructs a new Task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param description the task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws DataException if the task description is blank"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public Task(String description) throws DataException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "            throw new DataException(\"Task Description\", \"Cannot be blank\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Retrieves a character representing the task type. This should be unique to each subclass."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @return a character representing the task type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "    protected abstract char getTaskType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private char getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // returns tick or X symbols"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return isDone ? \u0027\\u2713\u0027 : \u0027\\u2718\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public abstract String getParentCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return String.format(\"[%c][%c] %s\", getTaskType(), getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 60
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.DataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Todos have no additional information other than their description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": " * They are basically nothing more than a concrete implementation of a {@code Task}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * Constructs a new Todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @param desc the task description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "     * @throws DataException if the task description is blank"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public Todo(String desc) throws DataException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    protected char getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \u0027T\u0027;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public String getParentCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "        return \"todo \" + getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 34
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import command.CommandHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class MainWindow extends BorderPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private TextField input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private TextArea output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "        output(\"Hello from iPbot, what can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private void handleUserInput(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": "        if (keyEvent.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "            // get the input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wltan"
        },
        "content": "            String cmdString \u003d input.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wltan"
        },
        "content": "            input.clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wltan"
        },
        "content": "            if (!cmdString.isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wltan"
        },
        "content": "                // echo the input to output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wltan"
        },
        "content": "                echoInput(cmdString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wltan"
        },
        "content": "                // send the input to iPbot"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wltan"
        },
        "content": "                String output \u003d new CommandHandler().apply(cmdString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wltan"
        },
        "content": "                output(output);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private void echoInput(String inputString) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wltan"
        },
        "content": "        output.appendText(inputString + \"\\n\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wltan"
        },
        "content": "    private void output(String... outputStrings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wltan"
        },
        "content": "        final String outputString \u003d String.join(\"\\n\", outputStrings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wltan"
        },
        "content": "        output.appendText(HORIZONTAL_LINE + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wltan"
        },
        "content": "        output.appendText(outputString + \"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wltan"
        },
        "content": "        output.appendText(HORIZONTAL_LINE + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 58
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "      \u003cTextField fx:id\u003d\"input\" promptText\u003d\"Enter Command...\" BorderPane.alignment\u003d\"CENTER\" onKeyPressed\u003d\"#handleUserInput\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "      \u003cTextArea fx:id\u003d\"output\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wltan": 14
    }
  },
  {
    "path": "src/test/java/command/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testList() throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(Parser.parseCommand(\"list\"), Command.LIST_CMD);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testTodo() throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(Parser.parseCommand(\"todo foo\"), Command.TODO_CMD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testExit() throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(Parser.parseCommand(\"bye\"), Command.EXIT_CMD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testInvalidCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e Parser.parseCommand(\"blah blah\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 32
    }
  },
  {
    "path": "src/test/java/core/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "import exceptions.DataException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": "        // clear all tasks in TaskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "        IntStream.range(0, TaskList.size()).forEach(i -\u003e TaskList.remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testAdd() throws DataException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wltan"
        },
        "content": "        TaskList.add(new Todo(\"foo\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(TaskList.size(), 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wltan"
        },
        "content": "    public void testEmpty() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wltan"
        },
        "content": "        assertEquals(TaskList.size(), 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wltan": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wltan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wltan"
        },
        "content": "deadline return book /by 2020-09-23"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wltan"
        },
        "content": "event project meeting /at 2020-08-24"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wltan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wltan"
        },
        "content": "event return book /by 2020-08-23"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wltan"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wltan"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wltan"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wltan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "wltan": 14
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wltan"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\core\\IPbot.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wltan"
        },
        "content": "java -classpath ..\\bin core.IpBot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wltan"
        },
        "content": "REM clean up stored data"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wltan"
        },
        "content": "rmdir /Q /S data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "wltan": 4,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wltan"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/core/IPbot.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wltan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wltan"
        },
        "content": "java -classpath ../bin core.IPbot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wltan"
        },
        "content": "# clean up stored data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wltan"
        },
        "content": "rm -r data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wltan": 5,
      "-": 37
    }
  }
]
