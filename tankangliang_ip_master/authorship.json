[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "# duck.Duck project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duck.Duck.java` file, right-click it, and choose `Run duck.Duck.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    mainClassName \u003d \"duck.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    archiveBaseName \u003d \"duck\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 61
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 104
    }
  },
  {
    "path": "src/main/java/duck/Duck.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.storage.LocalStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.task.TaskFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Duck is the bot that handles all user input and calls the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * respective classes needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Duck {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Storage storage \u003d new LocalStorage(\"data/data.ser\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final List\u003cString\u003e responses;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes the components needed by the bot."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Loads the existing data from storage if present."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Duck() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            taskList \u003d storage.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String getNumberOfTasks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return \"Now you have \" + taskList.getLength() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns default greetings when user first sees the bot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String[] greet() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        List\u003cString\u003e welcomeMessage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        welcomeMessage.add(\"Hello! I\u0027m Duck\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        welcomeMessage.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return welcomeMessage.toArray(String[]::new);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Saves the existing tasks into storage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            storage.save(this.taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Runs when the user exits the application or when the bot closes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * This will send a message as well as save the existing data via storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void shutdown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Gets statuses of all tasks in TaskList and adds to response."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void listTasks() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Here are the tasks in your list\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] statuses \u003d taskList.getStatuses();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.addAll(Arrays.asList(statuses));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Lists all the tasks with dates in ascending date order."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Triggered by \"due\" with optional date term \"due /by 2020-12-12\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void listByDueDate(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Optional\u003cLocalDate\u003e optionalDate;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            optionalDate \u003d Optional.ofNullable(Parser.parseDate(input));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            responses.add(\"Here are the tasks up to the date: \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    + optionalDate.get().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            optionalDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            responses.add(\"Here are the tasks sorted by date\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            responses.add(\"You can filter up to a date by using \\\"due [/at | /by] yyyy-mm-dd\\\"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] statusesByDueDate \u003d taskList.getStatusesByDate(optionalDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.addAll(Arrays.asList(statusesByDueDate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Gets the list of statuses from TaskList and displays them."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from User."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If description field is empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void listByFind(String input) throws DuckException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        input \u003d input.substring(4);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] statusesByFind \u003d taskList.getStatusesByFind(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Collections.addAll(responses, statusesByFind);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Marks the task as done and displays the done task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If index obtained is less than 1 or greater than number of tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void markTaskAsDone(String input) throws DuckException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        int taskNumber \u003d Parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Task task \u003d taskList.markDone(taskNumber);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Nice! I\u0027ve marked this as done\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"  \" + task.getStatus());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Deletes the task and displays the deleted task."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If index obtained is less than 1 or greater than number of tasks."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void deleteTask(String input) throws DuckException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        int taskNumber \u003d Parser.parseTaskNumber(input);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Task task \u003d taskList.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Noted. I\u0027ve removed this task\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"  \" + task.getStatus());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(getNumberOfTasks());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Obtains a task from TaskFactory and adds it to the TaskList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If input is unable to be parsed into any Task."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void createNewTask(String input) throws DuckException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Task newTask \u003d TaskFactory.createTaskFromInput(input);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        taskList.addTask(newTask);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"Got it. I\u0027ve added this task\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(\"  \" + newTask.getStatus());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.add(getNumberOfTasks());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Handles input from user and returns responses in the form of an"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * array of String. Each entry in the String array corresponds to a"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * new line of response."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Responses in the form of String[]."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String[] handleInput(String input) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        responses.clear();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Option option \u003d Parser.parseOption(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            switch (option) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                shutdown();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                listTasks();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                markTaskAsDone(input);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                deleteTask(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case DUE:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                listByDueDate(input);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                listByFind(input);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                createNewTask(input);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            case UNRECOGNIZED:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                throw new DuckException(\"Instruction not recognized\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            responses.add(e.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return responses.toArray(String[]::new);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tankangliang": 218,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duck/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 12
    }
  },
  {
    "path": "src/main/java/duck/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Duck duck \u003d new Duck();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.setController(mainWindow);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            scene.getStylesheets().add(\"view/styles.css\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuck(duck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 33
    }
  },
  {
    "path": "src/main/java/duck/Option.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Enumerators for different commands for clarity and consistent reference."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Solution adapted from Effective Java by Joshua Bloch."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * https://stackoverflow.com/questions/604424/how-to-get-an-enum-value-from-a-string-value-in-java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public enum Option {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    BYE(\"bye\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    DUE(\"due\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    FIND(\"find\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    UNRECOGNIZED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final Map\u003cString, Option\u003e mappings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Option() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    Option(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Map\u003cString, Option\u003e map \u003d new HashMap\u003cString, Option\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (Option option : Option.values()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            map.put(option.getName(), option);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        mappings \u003d map;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Parses the string passed in to determine what type of option it is."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param option String representation of the option."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Option enumerator type."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Option from (String option) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (mappings.containsKey(option.toLowerCase())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return mappings.get(option.toLowerCase());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return Option.UNRECOGNIZED;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 60
    }
  },
  {
    "path": "src/main/java/duck/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Parser is a helper class that contains static methods for"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * parsing the various components from the user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static final String[] DATE_SEPARATORS \u003d {\"/at\", \"/by\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the Option enumerator based on the first word separated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * by whitespace."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Option enumerator."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Option parseOption(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputSplit \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Option option \u003d Option.from(inputSplit[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return option;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the description portion of the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * The first check is for the presence of any date and strips the date portion away."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * The second check is for a valid description length."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Description portion of user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If input is empty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static String parseDescription(String input) throws DuckException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        input \u003d input.strip();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (String separator : Parser.DATE_SEPARATORS) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (input.contains(separator)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                input \u003d input.substring(0, input.indexOf(separator)).strip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"The description field cannot be empty!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the date portion of the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Strips away the input before the separators including the separator."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Checks for a valid date length before parsing with LocalDate."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * If no valid date is obtained, an exception is thrown."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Date of LocalDate class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If date field is empty or not in the correct format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static LocalDate parseDate(String input) throws DuckException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (String separator : Parser.DATE_SEPARATORS) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            if (input.contains(separator)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                date \u003d input.substring(input.indexOf(separator) + separator.length()).strip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (date.length() \u003c 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Please specify a date\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return parsedDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Date format not supported. Use \\\"yyyy-mm-dd\\\", E.g. 2020-02-02\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the task number portion of the user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Task number should be the second portion delimited by whitespace."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * A valid input with a task number should only have 2 words, the option and task number."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Task number of type int"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If input is invalid or task number portion is not a number."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static int parseTaskNumber(String input) throws DuckException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputSplit \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (inputSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Please provide a task number!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputSplit[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return taskNumber;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Invalid number provided\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 104
    }
  },
  {
    "path": "src/main/java/duck/exception/DuckException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Default exception thrown by Duck program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class DuckException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public DuckException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return this.getMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 16
    }
  },
  {
    "path": "src/main/java/duck/storage/LocalStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * LocalStorage makes use of Serializable objects to write to a local file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class LocalStorage implements Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes file location."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param filePath Location that storage file will be."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public LocalStorage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void ensureFileExists() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            File directories \u003d new File(file.getParentFile().getAbsolutePath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            directories.mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Serializes the TaskList object and stores in a file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param taskList List of tasks to be saved."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If file is unable to be saved due to corruption."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void save(TaskList taskList) throws DuckException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            ensureFileExists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            FileOutputStream file \u003d new FileOutputStream(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            ObjectOutputStream out \u003d new ObjectOutputStream(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            out.writeObject(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Failed to save file\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Loads the serialized data into a TaskList object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Object of instance TaskList with previously saved tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If file is not found or error occured in loading."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TaskList load() throws DuckException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            ObjectInputStream in \u003d new ObjectInputStream(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            TaskList taskList \u003d (TaskList) in.readObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Failed to load file\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 74
    }
  },
  {
    "path": "src/main/java/duck/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Storage interface to be implemented to store TaskList data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    void save(TaskList task) throws DuckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    TaskList load() throws DuckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 12
    }
  },
  {
    "path": "src/main/java/duck/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Deadline class for representing the deadline type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Deadline extends TaskWithDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return \"[D]\" + super.getStatus() + \" (by: \" + super.getDateAsString() + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 18
    }
  },
  {
    "path": "src/main/java/duck/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Event class for representing the event type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Event extends TaskWithDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return \"[E]\" + super.getStatus() + \" (at: \" + super.getDateAsString() + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 18
    }
  },
  {
    "path": "src/main/java/duck/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * A general Task class to be extended by other classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Provides the necessary default implementations of a Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes the description and sets done to false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param description Description of Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Gets the status of a Task which displays information about"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * whether the task is done and its description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Status of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String check \u003d isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String status \u003d \"[\" + check + \"] \" + getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 46
    }
  },
  {
    "path": "src/main/java/duck/task/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.Option;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Factory class to create Tasks based on user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Referenced from: https://www.tutorialspoint.com/design_pattern/factory_pattern.htm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Utilizes Parser class to parse the user input and create the correct Task object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Newly created Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If input from user is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static Task createTaskFromInput(String input) throws DuckException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Option option \u003d Parser.parseOption(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String inputWithoutOption;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        switch (option) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            inputWithoutOption \u003d input.substring(4).strip();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return createTodo(inputWithoutOption);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            inputWithoutOption \u003d input.substring(8).strip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return createDeadline(inputWithoutOption);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            inputWithoutOption \u003d input.substring(5).strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return createEvent(inputWithoutOption);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"Invalid task type!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static Todo createTodo(String inputWithoutOption) throws DuckException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String description \u003d Parser.parseDescription(inputWithoutOption);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static Deadline createDeadline(String inputWithoutOption) throws DuckException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String description \u003d Parser.parseDescription(inputWithoutOption);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate date \u003d Parser.parseDate(inputWithoutOption);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Deadline(description, date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private static Event createEvent(String inputWithoutOption) throws DuckException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String description \u003d Parser.parseDescription(inputWithoutOption);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate date \u003d Parser.parseDate(inputWithoutOption);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new Event(description, date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 57
    }
  },
  {
    "path": "src/main/java/duck/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Class to handle all operations regarding the current list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Implements Serializable to be easily stored in a file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Loops through the tasks and extracts their statuses,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * while prepending their index in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return String array of statuses."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String[] getStatuses() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] statuses \u003d new String[tasks.size()];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            statuses[i] \u003d \"\" + (i + 1) + \". \" + tasks.get(i).getStatus();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return statuses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public int getLength() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Checks the index to ensure that it is correct before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * marking the Task as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the Task recently marked done to display to user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param index Index of the task to be marked as done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Task that is marked done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If invalid index is given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Task markDone(int index) throws DuckException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"No such task with that number!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Checks the index to ensure that it is correct before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * deleting the Task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the Task recently deleted to display to user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param index Index of the task to be deleted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Task that is deleted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If invalid index is given."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Task deleteTask(int index) throws DuckException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        if (index \u003e tasks.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            throw new DuckException(\"No such task with that number!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            tasks.remove(index - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Filters the current list of tasks for tasks that have a date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * The tasks are then sorted by due date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Optionally sets a maximum date where all tasks with due dates"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * earlier than the maximum date will be returned."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param optionalDate Maximum date to query for tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return String array of statuses of tasks matching the filters."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String[] getStatusesByDate(Optional\u003cLocalDate\u003e optionalDate) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .filter(TaskWithDate.class::isInstance)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .map(TaskWithDate.class::cast)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .sorted(Comparator.comparing(TaskWithDate::getDate))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .filter((task) -\u003e optionalDate.map(localDate -\u003e task.getDate().isBefore(localDate)).orElse(true))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .map(Task::getStatus)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Takes in a search input and parses for the description to filter by."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Filters the list of Tasks based on their description and returns the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * statuses of those that match."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return String array containing statuses of tasks that match."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @throws DuckException If description field is empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String[] getStatusesByFind(String input) throws DuckException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String description \u003d Parser.parseDescription(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .filter((task) -\u003e task.getDescription().contains(description))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .map(Task::getStatus)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 124
    }
  },
  {
    "path": "src/main/java/duck/task/TaskWithDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * A more specific class of Task that has a date to specify a due date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public abstract class TaskWithDate extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes with an additional date on top of the Task initialization."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param date Due date of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public TaskWithDate(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Returns the formatted date as a string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Formatted date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getDateAsString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 36
    }
  },
  {
    "path": "src/main/java/duck/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Todo class for representing the todo type."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return \"[T]\" + super.getStatus();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 15
    }
  },
  {
    "path": "src/main/java/duck/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public static DialogBox getDuckDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 61
    }
  },
  {
    "path": "src/main/java/duck/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.Duck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private Duck duck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private final Image duckImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duck.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Initializes JavaFX and binds scrollPane to dialogContainer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void setDuck(Duck d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        duck \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                DialogBox.getDuckDialog(concatResponseLines(duck.greet()), duckImage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String response \u003d getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                DialogBox.getDuckDialog(response, duckImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Sends user input to the bot which will return an array of responses."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param input Input from user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Responses concatenated into a single string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] responses \u003d this.duck.handleInput(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return concatResponseLines(responses);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * Concatenates multiple strings into a single string with newline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @param response Variable number of strings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     * @return Single string as a result of concatenation."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    private String concatResponseLines(String... response) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (String s : response) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cfx:root fx:id\u003d\"dialogField\" styleClass\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"label-text\" text\u003d\"Label\" wrapText\u003d\"true\" prefWidth\u003d\"400.0\" minHeight\u003d\"-Infinity\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"120.0\" fitWidth\u003d\"120.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.AnchorPane\" styleClass\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"720.0\" prefWidth\u003d\"480.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" styleClass\u003d\"user-input\" layoutY\u003d\"669.6\" onAction\u003d\"#handleUserInput\" minHeight\u003d\"49.2\" minWidth\u003d\"388.8\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" styleClass\u003d\"button\" layoutX\u003d\"388.8\" layoutY\u003d\"669.6\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                prefHeight\u003d\"49.2\" prefWidth\u003d\"91.2\" text\u003d\"SEND\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"scroll-bar\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"668.0\" prefWidth\u003d\"480.0\" vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                    fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" styleClass\u003d\"dialog-container\" prefHeight\u003d\"662.0\" prefWidth\u003d\"465.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 22
    }
  },
  {
    "path": "src/test/java/duck/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseOptionCorrectly() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputs \u003d {\"bye\", \"list\", \"done 2\", \"deadline abc /by 2020-12-12\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \"todo something\", \"event abc /at 2020-12-12\", \"due\", \":(\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Option[] expected \u003d {Option.BYE, Option.LIST, Option.DONE, Option.DEADLINE, Option.TODO,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                Option.EVENT, Option.DUE, Option.UNRECOGNIZED};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(expected[i], Parser.parseOption(inputs[i]));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseDescriptionCorrectly() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputs \u003d {\" read book\", \" finish cs /by 2020-12-12\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \" what event /at 2020-12-12\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] expected \u003d {\"read book\", \"finish cs\", \"what event\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                assertEquals(expected[i], Parser.parseDescription(inputs[i]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            } catch (DuckException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseDateCorrectly() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputs \u003d {\" finish cs /by 2020-12-12\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                \" what event /at 2020-12-12\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate expected \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                assertEquals(expected, Parser.parseDate(inputs[i]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            } catch (DuckException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void parseTaskNumberCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String[] inputs \u003d {\"done 3\", \"delete 5\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        int[] expected \u003d {3, 5};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                assertEquals(expected[i], Parser.parseTaskNumber(inputs[i]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            } catch (DuckException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 64
    }
  },
  {
    "path": "src/test/java/duck/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void deadlineCreated() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedFormattedDate \u003d fixedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", fixedDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, deadline.getDone());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"read book\", deadline.getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(fixedDate, deadline.getDate());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedFormattedDate, deadline.getDateAsString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"[D]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \"[\\u2718] read book\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \" (by: \" + expectedFormattedDate + \")\", deadline.getStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void deadlineCanMarkDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", fixedDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, deadline.getDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        deadline.markDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(true, deadline.getDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 33
    }
  },
  {
    "path": "src/test/java/duck/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void eventCreated() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String expectedFormattedDate \u003d fixedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Event event \u003d new Event(\"read book\", fixedDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, event.getDone());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"read book\", event.getDescription());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(fixedDate, event.getDate());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(expectedFormattedDate, event.getDateAsString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"[E]\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \"[\\u2718] read book\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "                + \" (at: \" + expectedFormattedDate + \")\", event.getStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void deadlineCanMarkDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Event event \u003d new Event(\"read book\", fixedDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, event.getDone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        event.markDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(true, event.getDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 33
    }
  },
  {
    "path": "src/test/java/duck/task/TaskFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import duck.exception.DuckException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TaskFactoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void createTodo() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String input \u003d \"todo read book\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Task task \u003d TaskFactory.createTaskFromInput(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(true, task instanceof Todo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(false, task.getDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"read book\", task.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"[T][\\u2718] read book\", task.getStatus());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void createDeadline() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String input \u003d \"deadline read book /by 2020-12-12\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Task task \u003d TaskFactory.createTaskFromInput(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            String expectedFormattedDate \u003d fixedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(true, task instanceof Deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"[D][\\u2718] read book (by: \" + expectedFormattedDate + \")\", task.getStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(false, task.getDone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"read book\", task.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(fixedDate, deadline.getDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(expectedFormattedDate, deadline.getDateAsString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void createEvent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        String input \u003d \"event read book /at 2020-12-12\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        LocalDate fixedDate \u003d LocalDate.parse(\"2020-12-12\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Task task \u003d TaskFactory.createTaskFromInput(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            String expectedFormattedDate \u003d fixedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(true, task instanceof Event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"[E][\\u2718] read book (at: \" + expectedFormattedDate + \")\", task.getStatus());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(false, task.getDone());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(\"read book\", task.getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(fixedDate, event.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            assertEquals(expectedFormattedDate, event.getDateAsString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        } catch (DuckException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 69
    }
  },
  {
    "path": "src/test/java/duck/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "package duck.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void todoCreated() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, todo.getDone());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"read book\", todo.getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(\"[T][\\u2718] read book\", todo.getStatus());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    public void todoCanMarkDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        Todo todo \u003d new Todo(\"mark as done\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(false, todo.getDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        todo.markDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "        assertEquals(true, todo.getDone());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "deadline return book /by 2020-05-24"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "event project meeting /at 2020-09-11"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "if exist ACTUAL.TXT del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tankangliang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tankangliang"
        },
        "content": "del /Q .\\data"
      }
    ],
    "authorContributionMap": {
      "tankangliang": 7,
      "-": 17
    }
  }
]
