[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation \u0027org.testng:testng:6.9.6\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    testCompile \u0027junit:junit:4.13\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    compile \u0027junit:junit:4.13\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dutf-8\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showStandardStreams \u003d true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    version \u003d \"11\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    modules \u003d [ \u0027javafx.base\u0027, \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.graphics\u0027 ]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    mainClassName \u003d \"bot.Launcher\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    archiveBaseName \u003d \"bot\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    toolVersion \u003d \u00278.36\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 35,
      "-": 43
    }
  },
  {
    "path": "src/main/java/bot/Bot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Encompasses the UI, logic, model and all other factors that make up the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Bot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String dateFormatPath \u003d \"./src/main/resources/dateFormats/dateFormats.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructor for bot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name name of the bot"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the relative path where user\u0027s data is stored"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Bot(String name, String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ui \u003d new Ui(this.name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.taskList \u003d new TaskList(storage.loadFileContents());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Deadline.loadDateFormats(dateFormatPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Command cmd \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String response \u003d cmd.run(this.taskList, this.storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Start the bot\u0027s interaction with user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void init(Scanner scanner) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        boolean isEnded \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        while (!isEnded) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Command cmd \u003d parser.parseInput(scanner.nextLine());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                String response \u003d cmd.run(this.taskList, this.storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                ui.showMessage(response);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                isEnded \u003d cmd.isExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 68
    }
  },
  {
    "path": "src/main/java/bot/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 9
    }
  },
  {
    "path": "src/main/java/bot/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * The type Main."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Bot bot \u003d new Bot(\"Straw Bot\", \"./assets/userData.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        bot.init(new Scanner(System.in));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            stage.setTitle(\"STRAW BOT :)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(\"Straw Bot\", \"./assets/userData.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 36
    }
  },
  {
    "path": "src/main/java/bot/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.util.DialogBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.BackgroundImage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Bot duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Momoa.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Keanu.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Image bgImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/bg2.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Background bg \u003d new Background(new BackgroundImage(bgImage, null, null , null , null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.dialogContainer.setBackground(bg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setDuke(String botName, String filePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ByteArrayOutputStream newConsole \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.setOut(new PrintStream(newConsole));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String greeting \u003d String.format(\"Good day, I\u0027m %s. What can I do for you?\", botName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        duke \u003d new Bot(botName, filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                DialogBox.getDukeDialog(newConsole.toString(), dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 69
    }
  },
  {
    "path": "src/main/java/bot/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.util.InvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.util.InvalidInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the command based on the first character of user\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If the command given is invalid, InvalidInputException is thrown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Command enum class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidInputException command\u0027s argument is invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidCommandException command is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Command parseInput(String input) throws InvalidInputException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            InvalidCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new InvalidInputException(\"Please input something\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String[] args \u003d new String[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            switch(words[0]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new ListCommand(\"list\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new AddCommand(\"todo\", parseSingleArg(input));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                args \u003d parseDeadline(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new AddCommand(\"deadline\", args[0], args[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                args \u003d parseEvent(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new AddCommand(\"event\", args[0], args[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new DoneCommand(\"done\", parseIndex(input));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new DeleteCommand(\"delete\", parseIndex(input));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new FindCommand(\"find\", parseSingleArg(input));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return new ExitCommand(\"exit\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new InvalidCommandException(\"What\u0027s that again? I can\u0027t understand.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (InvalidCommandException | InvalidInputException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the one and only argument assuming the the input is the command with only 1 arg."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return user\u0027s argument"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidInputException command\u0027s argument is invalid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String parseSingleArg(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d 1; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            name.append(words[i]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (i !\u003d words.length - 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                name.append(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the name and date assuming the the input is the command for Deadline."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param input user\u0027s input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return an array of 2 String, first String is the name of deadline."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * while second is the deadline\u0027s date."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidInputException command\u0027s argument is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String[] parseDeadline(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] output \u003d new String[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder deadline \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int indexDateDelimiter \u003d -1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (words[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                indexDateDelimiter \u003d i;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int i \u003d 1; i \u003c indexDateDelimiter; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                name.append(words[i]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                name.append(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int i \u003d indexDateDelimiter + 1; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                deadline.append(words[i]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                deadline.append(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (indexDateDelimiter \u003d\u003d -1 || name.length() \u003d\u003d 0 || deadline.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + \" Thank you.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name.deleteCharAt(name.length() - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        deadline.deleteCharAt(deadline.length() - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        output[0] \u003d name.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        output[1] \u003d deadline.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    * Returns the name and date assuming the the input is the command for Event."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    * @param input user\u0027s input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    * @return an array of 2 String, first String is the name of event * while second is the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    *     event\u0027s date"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    * @throws InvalidInputException command\u0027s arugument is invalid"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String[] parseEvent(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] output \u003d new String[2];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder name \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder deadline \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int indexDateDelimiter \u003d -1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (words[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                indexDateDelimiter \u003d i;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int i \u003d 1; i \u003c indexDateDelimiter; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                name.append(words[i]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                name.append(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (int i \u003d indexDateDelimiter + 1; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                deadline.append(words[i]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                deadline.append(\" \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (indexDateDelimiter \u003d\u003d -1 || name.length() \u003d\u003d 0 || deadline.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + \" Thank you.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name.deleteCharAt(name.length() - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        deadline.deleteCharAt(deadline.length() - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        output[0] \u003d name.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        output[1] \u003d deadline.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the index assuming the input is for remove/delete command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidInputException command\u0027s argument is invalid"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int parseIndex(String input) throws InvalidInputException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new InvalidInputException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 186
    }
  },
  {
    "path": "src/main/java/bot/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Processes the text file and returns it as an ArrayList of Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return ArrayList of Tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFileContents() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        File dir \u003d new File(f.toPath().getParent().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            String response \u003d \"Hey, you new user eh? I\u0027ve got your profile created. No worries.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            System.out.println(responseWrapper(response));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert f.exists();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String content \u003d Files.readString(Paths.get(filePath), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] items \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (String item : items) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (item.length() !\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                taskList.add(lineToObj(item));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the user\u0027s test file with the taskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUserData(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fw.write(task.toFileFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Task lineToObj(String line) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] words \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert words.length !\u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        char firstChar \u003d line.charAt(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        switch (firstChar) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new Deadline(words[2], words[3],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    words[1].equals(\"1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new Event(words[2], words[3],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    words[1].equals(\"1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new Todo(words[2], words[1].equals(\"1\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String responseWrapper(String str) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final String TEXT_LINE \u003d \"_________________________________________________________\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                + \"_________________________________________\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return TEXT_LINE + \"\\n    \" + str + \"\\n\" + TEXT_LINE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 89
    }
  },
  {
    "path": "src/main/java/bot/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Encapsulates the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds newtask to list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param newTask the task to be added to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.list.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the Task at userIndex - 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If no Task is found, throw IllegalArgumentException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param index the index of the task assuming 0-index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return the task associated with the given index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalArgumentException the index given is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Task get(int index) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return list.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Removes the Task at userIndex - 1."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param index the index of the task assuming 0-index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalArgumentException the index given is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Task remove(int index) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Task task \u003d this.list.get(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.list.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a new ArrayList where the tasks contain the keyword name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return new ArrayList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        newList.addAll(this.list);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        newList.removeIf(x -\u003e (!x.getName().contains(name)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the length of the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return length of list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 95
    }
  },
  {
    "path": "src/main/java/bot/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Deals with interactions with the user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ui(String name) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String greeting \u003d String.format(\"Good day, I\u0027m %s. What can I do for you?\", name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(responseWrapper(greeting));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void showMessage(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(responseWrapper(input));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.out.println(responseWrapper(\"Unable to load user file\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String responseWrapper(String str) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final String TEXT_LINE \u003d \"________________________________________________________________\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return TEXT_LINE + \"\\n    \" + str + \"\\n\" + TEXT_LINE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 31
    }
  },
  {
    "path": "src/main/java/bot/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.util.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A class that differentiates the different subtypes of Task and increments TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public AddCommand(String cmd, String... args) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.name \u003d args[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else if (args.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.name \u003d args[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.date \u003d args[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A different subtype of Task is created depending on the command given."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * This newly created Task is then added to taskList and updated in the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList The TaskList to be incremented."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage The storage to store the new TaskLIst."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Response that the user will see."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws InvalidInputException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            switch(super.cmd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(this.name, this.date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                taskList.add(newDeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                storage.saveUserData(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return \"Got it. I\u0027ve added this task:\\n    \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + newDeadline + \"\\n    \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Todo newTodo \u003d new Todo(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                taskList.add(newTodo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                storage.saveUserData(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return \"Got it. I\u0027ve added this task:\\n    \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + newTodo + \"\\n    \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Event newEvent \u003d new Event(this.name, this.date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                taskList.add(newEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                storage.saveUserData(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return \"Got it. I\u0027ve added this task:\\n    \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + newEvent + \"\\n    \" + \"Now you have \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new InvalidInputException(\"Sorry, I can\u0027t seem to save it.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IOException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 74
    }
  },
  {
    "path": "src/main/java/bot/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.util.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * An abstract class that deals with logic associated with commands given by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected String cmd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Command(String cmd) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract String run(TaskList taskList, Storage storage) throws"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            InvalidInputException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 25
    }
  },
  {
    "path": "src/main/java/bot/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A type of command that removes Task from TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private int itemIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DeleteCommand(String cmd, int ind) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        itemIndex \u003d ind - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The task of the index, itemIndex, is removed from the taskList and its storage is updated accordingly."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList taskList where the task is removed from."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage storage associated with the taskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Response shown to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) throws IllegalArgumentException, IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Task task \u003d taskList.remove(itemIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            storage.saveUserData(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return \"Noted. I\u0027ve removed this task: \\n    \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + task + \"\\n    \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IOException(\"Sorry, I can\u0027t seem to save it.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 44
    }
  },
  {
    "path": "src/main/java/bot/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A type of command that mark the given Task at certain index as Done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private int itemIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DoneCommand(String cmd, int ind) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        itemIndex \u003d ind - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The task of the index, itemIndex, has its attribute isDone marked as True"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * from the taskList and its storage is updated accordingly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList taskList where the task is amended."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage storage associated with the taskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Response shown to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) throws IllegalArgumentException, IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Task task \u003d taskList.get(itemIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            storage.saveUserData(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done: \\n    \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + task + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IOException(\"Sorry, I can\u0027t seem to save it.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 45
    }
  },
  {
    "path": "src/main/java/bot/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A type of command that indicates the termination of the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ExitCommand(String cmd) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isExitCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Bids farewell to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList taskList of the bot to be terminated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage storeage of the bot to be terminated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Farewell message to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Have a good day, mate!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 30
    }
  },
  {
    "path": "src/main/java/bot/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A type of command that lists out all Task that contains the item."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public FindCommand(String cmd, String item) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Displays a list of tasks where the name of the tasks contains the item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * The item can be a substring of the task\u0027s name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList the TaskList to be filter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage the storage associated with tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return Response shown to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ArrayList\u003cTask\u003e currList \u003d taskList.filter(item);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            StringBuilder string \u003d new StringBuilder(\"Here are the tasks in your list:\\n    \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (Task item : currList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                string.append(index).append(\".\").append(item).append(\"\\n    \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return \"Nothing in the list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            string.delete(string.length() - 5, string.length());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return string.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalArgumentException(\"Sorry, do what? Please give me a valid input.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    + \" Thank you.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 49
    }
  },
  {
    "path": "src/main/java/bot/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A type of command that shows every tasks in the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ListCommand(String cmd) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(cmd);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Displays all tasks in tasklist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param taskList taskLIst where the items are to be shown."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param storage storage associated with taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return A string of all Tasks in tasklist."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String run(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        StringBuilder string \u003d new StringBuilder(\"Here are the tasks in your list:\\n    \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Task item : taskList.getList()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            string.append(index).append(\".\").append(item).append(\"\\n    \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return \"Nothing in the list\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        string.delete(string.length() - 5, string.length());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 36
    }
  },
  {
    "path": "src/main/java/bot/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A special type of task characterised by the input \"/by\" which implies the importance of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Map\u003cString, String\u003e DATE_FORMAT_REGEXPS \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static void loadDateFormats(String filePath) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String content \u003d Files.readString(Paths.get(filePath), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String[] items \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (String item : items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (item.length() !\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                String[] words \u003d item.split(\" \\\\| \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                DATE_FORMAT_REGEXPS.put(words[0], words[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String determineDateFormat(String dateString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (String regexp : DATE_FORMAT_REGEXPS.keySet()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (dateString.strip().toLowerCase().matches(regexp)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return DATE_FORMAT_REGEXPS.get(regexp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return null; // Unknown format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String dateFormat \u003d determineDateFormat(deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormat.strip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Deadline(String name, String deadline, boolean done) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Serialises the object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return A string that is formatted to be read and stored in Storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"D\" + \" | \" + super.toFileFormat() + \" | \" + this.deadline.format(formatter)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 69
    }
  },
  {
    "path": "src/main/java/bot/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A special type of Task characterised by the input \"/at\" which indicates the date and time of which the task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * should start."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private LocalDateTime timePeriod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Event(String name, String timePeriod) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.timePeriod \u003d LocalDateTime.parse(timePeriod, formatter);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Event(String name, String timePeriod, boolean done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.timePeriod \u003d LocalDateTime.parse(timePeriod, formatter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Serialises the object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return A string that is formatted to be read and stored in Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"E\" + \" | \" + super.toFileFormat() + \" | \" + this.timePeriod.format(formatter)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                timePeriod.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, h:mm a\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 42
    }
  },
  {
    "path": "src/main/java/bot/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Encapsulates the task to be done by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Task(String name, boolean done) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Changes the state of done to true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Changes the state of done to false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the class in a String form that is suitable to be written to txt file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return String to be written to user\u0027s txt file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String isDone \u003d this.isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return isDone + \" | \" + name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String symbol \u003d this.isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"[\" + symbol + \"] \" + this.name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 53
    }
  },
  {
    "path": "src/main/java/bot/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * The most basic form of task without date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Todo(String name, boolean done) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Serialises the object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return A string that is formatted to be read and stored in Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"T\" + \" | \" + super.toFileFormat() + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 29
    }
  },
  {
    "path": "src/main/java/bot/util/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 63
    }
  },
  {
    "path": "src/main/java/bot/util/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 7
    }
  },
  {
    "path": "src/main/java/bot/util/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package bot.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 7
    }
  },
  {
    "path": "src/main/resources/dateFormats/dateFormats.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "^\\d{12}$ | yyyyMMddHHmm"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$ | yyyy-MM-dd HH:mm"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 2
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"12\" minWidth\u003d\"48\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "           style\u003d\"-fx-border-width:1; -fx-background-color:rgb(0, 202, 255); ; -fx-padding:10, 10, 10, 10; -fx-border-radius: 2; -fx-background-radius: 4; -fx-border-width:4px; -fx-border-color:rgb(0, 0, 0);\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"bot.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @org.junit.Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deadlineTest_correctDateFormat_success() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Deadline dl \u003d new Deadline(\"Name\", \"2020-05-01 19:30\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(dl.toString(), \"[D][✘] Name (by: May 1 2020, 7:30 PM)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @org.junit.Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deadlineTest_wrongDateFormat_success() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Deadline dl \u003d new Deadline(\"Name\", \"2020-05-01 19:330\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 23
    }
  },
  {
    "path": "src/test/java/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.Bot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * JUnit test for Main."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class MainTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Test is passed with there is no difference between the actual output and expected output."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws Exception Error loading files required to run the test."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @org.junit.Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void mainTest_givenInputs_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedOutput \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        File file;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String inputFilePath \u003d \"text-ui-test/input.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String assetFilePath \u003d \"text-ui-test/test_assets.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedOutputFilePath \u003d \"text-ui-test/EXPECTED-UNIX.txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            file \u003d new File(inputFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            File outputFile \u003d new File(assetFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (outputFile.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                outputFile.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            expectedOutput \u003d Files.readString(Path.of(expectedOutputFilePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Bot testBot \u003d new Bot(\"Straw Bot\", assetFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testBot.init(new Scanner(file));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(expectedOutput,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                outContent.toString().strip().replace(\"\\r\",\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 68
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import bot.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @org.junit.Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void todoTest_doneTodo_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Todo todo \u003d new Todo(\"Name\", true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✓] Name\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "todo task1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "todo task1 2 3 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "wrong command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "event event1 /at 2020-02-01 15:30"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "event event2 /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "event event3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "deadline dl1 /by 2020-02-01 05:30"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "deadline dl2 /by"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "deadline dl3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "done 12"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "done 12 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "delete 12"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 22
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Main.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Main.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 4,
      "-": 33
    }
  }
]
