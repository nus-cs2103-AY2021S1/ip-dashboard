[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 1,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\tString javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\tenableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 17,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeSaveDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.InputHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.OutputHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/** Contains main software logic loop and initialization logic.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** TaskManager object that contains all the tasks in Duke\u0027s memory */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Ui object that handles all display and input from user */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Path object that contains the relative directory path to the save file */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** SaveManager object that handles all saving and loading of save data on load or on exit */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private SaveManager saveManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs new Duke object with default save file directory and default \u003ccode\u003eOutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Defaults save file directory to \"/data/data.txt\"."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Defaults \u003ccode\u003eOutputHandler\u003c/code\u003e displays to \u003ccode\u003eSystem.out\u003c/code\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Attempts to load the save file from the default directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this(Path.of(\"/data\", \"data.txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs new Duke object with given save file directory and default \u003ccode\u003eOutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Default \u003ccode\u003eOutputHandler\u003c/code\u003e displays to \u003ccode\u003eSystem.out\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Attempts to load the save file from the given directory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param filePath Save file directory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Duke(Path filePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this(filePath, new OutputHandler());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs new Duke object with custom \u003ccode\u003eOutputHandler\u003c/code\u003e and default save file directory."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Defaults save file directory to \"/data/data.txt\"."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Attempts to load the save file from the default directory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param outputHandler Custom \u003ccode\u003eOutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Duke(OutputHandler outputHandler) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this(Path.of(\"/data\", \"data.txt\"), outputHandler);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs new Duke object with custom save file directory and custom \u003ccode\u003eOutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Attempts to load the save file from the given directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param filePath Path object representing save file directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param outputHandler Custom \u003ccode\u003eOutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Duke(Path filePath, OutputHandler outputHandler) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Initialise properties"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.ui \u003d new Ui(new InputHandler(), outputHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.saveManager \u003d new SaveManager(this.filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Attempts to load save file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // If fails, initialises Duke without save data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.taskManager \u003d saveManager.load();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeSaveDataException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.ui.displayException(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Activates main software loop, accepting and processing commands."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parser parses inputs to commands which are then executed by Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Exceptions trigger an error message for users without ending the program."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Main loop only ends on parsing a \"bye\" command from user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If unable to save, Duke will exit without saving."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                Command command \u003d Parser.parse(this.ui.readCommand());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                command.execute(this.ui, this.taskManager, this.saveManager);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                this.ui.displayQueuedMessages();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                // Terminate loop on Bye Command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                if (command.isByeCommand()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                assert !command.isByeCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                ui.displayException(e);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Executes a command parsed from a given user input."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This method is meant to be used with the GUI version of Duke where input and outputs are handled differently."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param userInput Given user input processed by other modules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Boolean representing if the command has been parsed as a \"bye\" command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean processOneCommand(String userInput) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Parse user input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Execute user command"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            command.execute(this.ui, this.taskManager, this.saveManager);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Send messages from app"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.ui.displayQueuedMessages();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return command.isByeCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Runs through processes to be done after loading data."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Currently just asks UI to send greeting to user."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.ui.displayGreet();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Initializes the CLI version of the app."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param args CLI arguments. None required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Duke duke \u003d new Duke(Path.of(\"data/data.txt\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        duke.initialize();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 160,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.gui.DukeGui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class from which to launch the application in its GUI form."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Launches the GUI version of the Duke app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param args CLI arguments. None required."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Application.launch(DukeGui.class, args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 20
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/** Contains functions for parsing user inputs to software commands */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses given input String into commands with parameters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param userCommand Input string, typically from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Command object that represents the user command and contains execution functionality."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws DukeInputException Thrown when input cannot be cleanly parsed into an available command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static Command parse(String userCommand) throws DukeInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Separates user input into command and parameters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String[] inputs \u003d userCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String command \u003d inputs[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String additionalInformation \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (inputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Determine which simple command with no parameters is being requested"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else if (inputs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Only fill in parameters if they exist"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            additionalInformation \u003d inputs[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Determine which complex command is being requested"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new DoneCommand(additionalInformation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new ToDoCommand(additionalInformation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new DeadlineCommand(additionalInformation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new EventCommand(additionalInformation);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new DeleteCommand(additionalInformation);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new FindCommand(additionalInformation);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Throw DukeInputException if invalid command is given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        throw new DukeInputException(\"Invalid command \u003c\" + userCommand + \"\u003e given.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 69
    }
  },
  {
    "path": "src/main/java/duke/SaveManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.nio.file.NoSuchFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeSaveDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/** Contains functions for saving into and loading from save file */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class SaveManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Represents save file directory */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Path saveFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eSaveManager\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveFilePath save file directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public SaveManager(Path saveFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.saveFilePath \u003d saveFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Loads save data from save file at \u003ccode\u003esaveFilePath\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If unable to load, returns an empty \u003ccode\u003eTaskManager\u003c/code\u003e and attempts to create a new save data file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return \u003ccode\u003eTaskManager\u003c/code\u003e containing tasks loaded from save file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws DukeSaveDataException Unable to load save data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TaskManager load() throws DukeSaveDataException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Initialise variables"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Loop for reading line by line (i.e. task by task) from save file to taskManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            BufferedReader br \u003d Files.newBufferedReader(this.saveFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            String currLine \u003d br.readLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            while (currLine !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                taskManager.storeTask(this.loadTaskFromSave(currLine));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                currLine \u003d br.readLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return taskManager;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (NoSuchFileException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // If unable to load file, attempts to create the file directory and a new, blank save file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                Files.createDirectories(this.saveFilePath.getParent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                Files.createFile(this.saveFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } catch (IOException e2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                // Throw DukeSaveDataException if unable to create a new save file"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                throw new DukeSaveDataException(\"Unable to load from save file or create new save file\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Throw DukeSaveDataException for not being able to load from save file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeSaveDataException(\"Unable to load from save file - \" + e.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeSaveDataException(\"Unable to load from save file - \" + e.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Saves data from given \u003ccode\u003eTaskManager\u003c/code\u003e to save file in \u003ccode\u003esaveFilePath\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager Contains task data to save."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws DukeSaveDataException If unable to save data."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void save(TaskManager taskManager) throws DukeSaveDataException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Initialise save data storage variable"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Currently implemented as a String[] for use with taskManager.forEach()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        final String[] saveData \u003d {\"\"};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Convert Tasks in taskManager to save data format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        taskManager.forEach(task -\u003e saveData[0] +\u003d this.toSaveFormat(task.convertToHashMap()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert saveData.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Attempts to write to save file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            BufferedWriter bw \u003d Files.newBufferedWriter(this.saveFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            bw.write(saveData[0]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Throw DukeSaveDataException if unable to save"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeSaveDataException(\"Unable to save to file at \u003c\" + this.saveFilePath + \"\u003e\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String keyValueToString(String key, String value) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"{\\\"\" + key + \"\\\":\\\"\" + value + \"\\\"}\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String toSaveFormat(HashMap\u003cString, String\u003e objectData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Initialise variables"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e copyData \u003d new HashMap\u003c\u003e(objectData);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ArrayList\u003cString\u003e saveStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Add type data to save string as first variable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        saveStrings.add(this.keyValueToString(\"type\", copyData.get(\"type\")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Remove \"type\" and iterate through the other key,value pairs in input HashMap data"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        copyData.remove(\"type\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        copyData.forEach((key, value) -\u003e saveStrings.add(this.keyValueToString(key, value)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Convert ArrayList to String and output"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return saveStrings.toString() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private HashMap\u003cString, String\u003e loadMapFromSave(String objectData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Convert save data to a list of parameters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String copyData \u003d objectData.substring(2, objectData.length() - 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String[] paramsList \u003d copyData.split(\"}, \\\\{\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Convert list of parameters to HashMap form"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e paramsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (String s : paramsList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            String[] keyValPair \u003d s"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    .substring(1, s.length() - 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    .split(\"\\\":\\\"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            paramsMap.put(keyValPair[0], keyValPair[1]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return paramsMap;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Task loadTaskFromMap(HashMap\u003cString, String\u003e params) throws DukeSaveDataException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Determine Task type from params"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String type \u003d params.get(\"type\").toLowerCase();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String name \u003d params.get(\"name\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        boolean isDone \u003d params.get(\"done\").equals(\"true\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Create new Task based on type"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (TaskType.TASK.toSaveString().equals(type)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new Task(name, isDone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else if (TaskType.TODO.toSaveString().equals(type)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new ToDo(name, isDone);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else if (TaskType.DEADLINE.toSaveString().equals(type)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new Deadline(name, params.get(\"deadline\"), isDone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else if (TaskType.EVENT.toSaveString().equals(type)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new Event(name, params.get(\"when\"), isDone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Throw DukeSaveDataException if unable to parse task save string."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeSaveDataException(\"Save Data Error: \" + params.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Task loadTaskFromSave(String objectData) throws DukeSaveDataException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.loadTaskFromMap(this.loadMapFromSave(objectData));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 171
    }
  },
  {
    "path": "src/main/java/duke/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Provides a container for storing \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** List for storing objects in order. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private List\u003cTask\u003e taskStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new empty \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.taskStorage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eTaskManager\u003c/code\u003e with \u003ccode\u003eTask\u003c/code\u003e objects from \u003ccode\u003efromSaveData\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param tasksFromSaveData List of tasks to initialise \u003ccode\u003eTaskManager\u003c/code\u003e with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TaskManager(List\u003cTask\u003e tasksFromSaveData) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.taskStorage \u003d new ArrayList\u003c\u003e(tasksFromSaveData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns an \u003ccode\u003eArrayList\u003c/code\u003e filled with \u003ccode\u003eTask\u003c/code\u003es from this \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * A new list is provided and can be mutated without affecting \u003ccode\u003eTaskManager\u003c/code\u003e,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * but any mutations to \u003ccode\u003eTask\u003c/code\u003es will persist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return \u003ccode\u003eList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003es in \u003ccode\u003eTaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public List\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new ArrayList\u003c\u003e(this.taskStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Adds a given \u003ccode\u003eTask\u003c/code\u003e to the end of \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param t New \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void storeTask(Task t) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.taskStorage.add(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Gets a \u003ccode\u003eTask\u003c/code\u003e at a given \u003ccode\u003eindex\u003c/code\u003e of \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Please note that this getter works with 0-based indexing, and is unable to handle OutOfIndexExceptions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Functions relying on 1-based index should correct the index before calling \u003ccode\u003egetTask()\u003c/code\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Index verification should also be performed before calling \u003ccode\u003egetTask()\u003c/code\u003e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param index Position of desired \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Desired \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.taskStorage.get(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Deletes and returns a \u003ccode\u003eTask\u003c/code\u003e at a given \u003ccode\u003eindex\u003c/code\u003e of \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Please note that this getter works with 0-based indexing, and is unable to handle OutOfIndexExceptions."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Functions relying on 1-based index should correct the index before calling \u003ccode\u003eremoveTask()\u003c/code\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Index verification should also be performed before calling \u003ccode\u003eremoveTask()\u003c/code\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param index Position of \u003ccode\u003eTask\u003c/code\u003e to delete."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Deleted \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.taskStorage.remove(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Performs \u003ccode\u003eaction\u003c/code\u003e on each \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param action \u003ccode\u003eConsumer\u003c/code\u003e to be performed on each \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void forEach(Consumer\u003c? super Task\u003e action) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.taskStorage.forEach(action);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns the number of \u003ccode\u003eTask\u003c/code\u003es in \u003ccode\u003estorage\u003c/code\u003e."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Number of \u003ccode\u003eTask\u003c/code\u003es."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.taskStorage.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** Filters \u003ccode\u003estorage\u003c/code\u003e and returns a new \u003ccode\u003eTaskManager\u003c/code\u003e with the filtered \u003ccode\u003eTask\u003c/code\u003es."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The returned \u003ccode\u003eTaskManager\u003c/code\u003e can be mutated with no effect on this object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * However, all \u003ccode\u003eTask\u003c/code\u003es are still linked and any effects such as \u003ccode\u003eTask.doTask()\u003c/code\u003e will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * be lasting."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param predicate Filtering criteria."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return \u003ccode\u003eTaskManager\u003c/code\u003e containing all filtered out \u003ccode\u003eTask\u003c/code\u003es."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TaskManager filter(Predicate\u003c? super Task\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new TaskManager(this.taskStorage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String formatted for display of \u003ccode\u003eTaskManager\u003c/code\u003e contents neatly."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        StringBuilder printString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            printString.append(i + 1).append(\". \").append(this.getTask(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return printString.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 132
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.InputHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.OutputHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/** Handles IO between Duke and user */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** \u003ccode\u003eInputHandler\u003c/code\u003e object manages inputs from user */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private InputHandler inputHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /** \u003ccode\u003eOutputHandler\u003c/code\u003e object manages outputs to display */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private OutputHandler outputHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructs \u003ccode\u003eUi\u003c/code\u003e object given an \u003ccode\u003eInputHandler\u003c/code\u003e and an \u003ccode\u003eOutputHandler\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param inputHandler \u003ccode\u003eInputHandler\u003c/code\u003e for receiving inputs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param outputHandler \u003ccode\u003eOutputHandler\u003c/code\u003e for displaying outputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Ui(InputHandler inputHandler, OutputHandler outputHandler) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.inputHandler \u003d inputHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.outputHandler \u003d outputHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Prints welcome message to display."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayGreet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.displayNow(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Prints farewell message to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayGoodbye() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.displayNow(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Passes a string to \u003ccode\u003eoutputHandler\u003c/code\u003e, to be printed when flushed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param output String to be printed by \u003ccode\u003einputHandler\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void queueMessageToDisplay(String output) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.outputHandler.storeOutput(output);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Prints all messages stored in \u003ccode\u003eoutputHandler\u003c/code\u003e buffer."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Does nothing if no messages in buffer."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayQueuedMessages() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (!this.outputHandler.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.outputHandler.flush();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert this.outputHandler.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Immediately prints a given string using \u003ccode\u003eoutputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Buffer of \u003ccode\u003eoutputHandler\u003c/code\u003e does not change."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param output String to be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayNow(String output) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.outputHandler.printNow(output);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Prints error message of \u003ccode\u003eException\u003c/code\u003e using \u003ccode\u003eException.getMessage()\u003c/code\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param e \u003ccode\u003eException\u003c/code\u003e whose error message is to be printed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayException(Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.displayNow(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Prints status message after adding new task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param task \u003ccode\u003eTask\u003c/code\u003e that was just added into Duke."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManagerSize Number of tasks already in Duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayAfterAddTaskMessage(Task task, int taskManagerSize) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.queueMessageToDisplay(\"Successfully added a new task:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.queueMessageToDisplay(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.queueMessageToDisplay(\"Now you have \" + taskManagerSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Reads input by user from \u003ccode\u003einputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return user input as \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.inputHandler.input();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 106
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeSaveDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a command by the user to exit Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eByeCommand\u003c/code\u003e that signals software loop termination."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isByeCommand \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Executes steps required to exit the app safely."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays a farewell message and attempts to save data to save file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ui.displayGoodbye();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            saveManager.save(taskManager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeSaveDataException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert this.isByeCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Abstract class for representing user commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Signals if command should terminate function loop."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected boolean isByeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a default \u003ccode\u003eCommand\u003c/code\u003e that is not a \u003ccode\u003eByeCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isByeCommand \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Executes the steps necessary for the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public abstract void execute(Ui ui, TaskManager taskManager, SaveManager saveManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Signals if this command should terminate the software loop."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Whether command is a \u003ccode\u003eByeCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isByeCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.isByeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns a String representation of the class which includes the class name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String representation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.getClass().getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 51
    }
  },
  {
    "path": "src/main/java/duke/command/ComplexCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Abstract class for representing user commands with parameters."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public abstract class ComplexCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parameters for the command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected String params;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a complex \u003ccode\u003eCommand\u003c/code\u003e with parameters initialised."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters for the user command of interest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ComplexCommand(String params) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns a String representation of the \u003ccode\u003eComplexCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This includes both the name and the parameters involved."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * The parameters are printed in a simple string with separators (e.g. \"/by\" for \u003ccode\u003eDeadline\u003c/code\u003e) included."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String representation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return super.toString() + \" | \" + this.params;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 33
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to add a new \u003ccode\u003eDeadline\u003c/code\u003e to Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DeadlineCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDeadline\u003c/code\u003e using the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DeadlineCommand(String params) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDeadline\u003c/code\u003e and adds it to \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses the command and displays an error message without terminating software loop if parameters invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            String[] splitParams \u003d this.parseParams(); //throws DukeInputException on bad inputs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(splitParams[0], splitParams[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            taskManager.storeTask(newDeadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayAfterAddTaskMessage(newDeadline, taskManager.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String[] parseParams() throws DukeInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if parameters are empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027deadline\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: deadline \u003cname\u003e /by \u003cdeadline\u003e\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if required second parameter is given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String[] splitParams \u003d this.params.split(\"/by \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (splitParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u003c\" + this.params + \"\u003e is not valid for the \u0027deadline\u0027 command.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Please add a /by deadline to the task.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert splitParams.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return splitParams;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 67
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to delete a class from Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DeleteCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDeleteCommand\u003c/code\u003e with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DeleteCommand(String params) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Deletes \u003ccode\u003eTask\u003c/code\u003e based on given index and displays information about it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays an error message without terminating software loop if parameters are invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            int index \u003d this.parseParams(taskManager.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Task temp \u003d taskManager.removeTask(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"Alright. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"\\t\" + temp.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"Now you have \" + taskManager.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private int parseParams(int taskManagerSize) throws DukeInputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if parameters are empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027delete\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: delete \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if given parameter is numerical"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            index \u003d Integer.parseInt(params);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"Please input number instead of \u003c\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + this.params + \"\u003e after a \u0027delete\u0027 command!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if given index is valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index \u003c 1 || index \u003e taskManagerSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"Index input out of range\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskManagerSize;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 75
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents user command to mark a \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DoneCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDoneCommand\u003c/code\u003e with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DoneCommand(String params) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Finds and marks \u003ccode\u003eTask\u003c/code\u003e at given index in \u003ccode\u003etaskManager\u003c/code\u003e as done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays an error message without terminating software loop if parameters are invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            int index \u003d this.parseParams(taskManager.size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Task temp \u003d taskManager.getTask(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            temp.doTask();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"\\t\" + temp.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private int parseParams(int taskManagerSize) throws DukeInputException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if parameters are empty"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027done\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if numerical parameter is given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            index \u003d Integer.parseInt(params);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"Please input number instead of \u003c\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + this.params + \"\u003e after a \u0027done\u0027 command!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if index is valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (index \u003c 1 || index \u003e taskManagerSize) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"Index input out of range\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskManagerSize;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 77
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to create a new \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class EventCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eEventCommand\u003c/code\u003e with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public EventCommand(String params) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eEvent\u003c/code\u003e and stores it to \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays an error message without terminating software loop if parameters are invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            String[] splitParams \u003d this.parseParams();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Event newEvent \u003d new Event(splitParams[0], splitParams[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            taskManager.storeTask(newEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayAfterAddTaskMessage(newEvent, taskManager.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String[] parseParams() throws DukeInputException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if params is empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027event\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: event \u003cname\u003e /at \u003cwhen\u003e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String[] splitParams \u003d this.params.split(\"/at \", 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if second parameter exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (splitParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u003c\" + this.params + \"\u003e is not valid for the \u0027event\u0027 command.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Please add a /at timing to the task.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert splitParams.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return splitParams;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 70
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to find tasks containing input keywords"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class FindCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eFindCommand\u003c/code\u003e with the given parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public FindCommand(String params) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Filters the tasks that match input keywords, then display them to screen."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays error message without terminating software loop if parameters are invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            String keywords \u003d this.parseParams();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            TaskManager filteredTasks \u003d taskManager.filter(task -\u003e task.getName().contains(keywords));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.queueMessageToDisplay(filteredTasks.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String parseParams() throws DukeInputException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if params are empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027find\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: list \u003ckey words\u003e\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert this.params.length() \u003e 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.params;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to display all \u003ccode\u003eTask\u003c/code\u003es stored in Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays all \u003ccode\u003eTask\u003c/code\u003es stores in \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ui.queueMessageToDisplay(taskManager.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.SaveManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Represents a user command to create a new \u003ccode\u003eToDo\u003c/code\u003e."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ToDoCommand extends ComplexCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eToDoCommand\u003c/code\u003e with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param params Parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ToDoCommand(String params) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(params);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eToDo\u003c/code\u003e and stores it in \u003ccode\u003etaskManager\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Displays an error message without terminating software loop if parameters are invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param ui Print-out and display manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param taskManager \u003ccode\u003eTask\u003c/code\u003e manipulation manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param saveManager Handles saving and loading."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void execute(Ui ui, TaskManager taskManager, SaveManager saveManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ToDo newToDo \u003d new ToDo(this.parseParams());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            taskManager.storeTask(newToDo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayAfterAddTaskMessage(newToDo, taskManager.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            ui.displayException(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String parseParams() throws DukeInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Check if params is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.params.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(\"\u0027todo\u0027 requires parameters.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    + \"Use case: todo \u003cname\u003e\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert this.params.length() \u003e 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.params;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 60
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A generic \u003ccode\u003eException\u003c/code\u003e created by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDukeException\u003c/code\u003e with error details encoded within."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param message Error details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String representation of \u003ccode\u003eDukeException\u003c/code\u003e for display to user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatter String representation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"DUKE ERROR - \" + super.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * \u003ccode\u003eException\u003c/code\u003e thrown by Duke related to user input errors."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DukeInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDukeInputException\u003c/code\u003e with the given error details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param message Error details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DukeInputException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeSaveDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * \u003ccode\u003eException\u003c/code\u003e thrown by Duke related to saving or loading from save files."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DukeSaveDataException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDukeSaveDataException\u003c/code\u003e with the given error details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param message Error details."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DukeSaveDataException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 16
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * \u003ccode\u003eNode\u003c/code\u003e that contains an avatar image and output text that represents conversation between Duke and the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Generator for a \u003ccode\u003eDialogBox\u003c/code\u003e. Customizes the text, image and font of the displayed contents."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param text Text for display in \u003ccode\u003edialog\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param img Image for display in \u003ccode\u003edisplayPicture\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param font Font to be used for text."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private DialogBox(String text, Image img, Font font) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Load component from FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dialog.setFont(font);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDialogBox\u003c/code\u003e for a message by the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param text User input text."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param img User avatar image."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param font Font for user text."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Initialized \u003ccode\u003eDialogBox\u003c/code\u003e for user message for display in GUI."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img, Font font) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new DialogBox(text, img, font);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDialogBox\u003c/code\u003e for a message by Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param text Duke output text."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param img Duke avatar image."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param font Font for Duke\u0027s text."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Initialized \u003ccode\u003eDialogBox\u003c/code\u003e for Duke\u0027s messages for display in GUI."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img, Font font) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        var db \u003d new DialogBox(text, img, font);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Flips contents so that avatar image for Duke is on the left."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 93
    }
  },
  {
    "path": "src/main/java/duke/gui/DukeGui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.OutputHandlerForGui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class is responsible for the core Duke logic in the GUI version of the app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DukeGui extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Contained \u003ccode\u003eDuke\u003c/code\u003e object which runs the main logic behind processing user commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Sets up the GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param stage The stage where the application is set on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Initialize GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DukeGui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Initialize Duke with output set to GUI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.duke \u003d new Duke(new OutputHandlerForGui(fxmlLoader.\u003cMainWindow\u003egetController()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Display GUI"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDukeGui(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            this.duke.initialize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Handles user input via \u003ccode\u003eduke\u003c/code\u003e."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Boolean representing if a \"bye\" command was parsed and processed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean handleUserInput(String userInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.duke.processOneCommand(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 60
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Controller for \u003ccode\u003eNode\u003c/code\u003e that represents the frame of the main window of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Reference to \u003ccode\u003eDukeGui\u003c/code\u003e class that manages the main logic."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private DukeGui dukeGui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * User avatar image."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Duke avatar image."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/galaxybrain.jpg\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Default font for user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Font userFont \u003d Font.font(\"Courier New\", 12);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Default font for Duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private Font dukeFont \u003d Font.font(\"Consolas\", 12);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Sets \u003ccode\u003edukeGui\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param d Given \u003ccode\u003eDukeGui\u003c/code\u003e object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setDukeGui(DukeGui d) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dukeGui \u003d d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Initialization of \u003ccode\u003eListener\u003c/code\u003e that sets the window to the latest messages."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDialogBox\u003c/code\u003e containing the user\u0027s input and passes the input for processing."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * User input is then cleared."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * This method is triggered on user entering and sending a new user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If a \"bye\" command is parsed and executed, the program will exit."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Echos user input in GUI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage, userFont)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Close application if exit is detected"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (dukeGui.handleUserInput(input)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a \u003ccode\u003eDialogBox\u003c/code\u003e for a given response from user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param response Generated response from Duke\u0027s command handling modules."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void handleDukeResponse(String response) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage, dukeFont)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 105
    }
  },
  {
    "path": "src/main/java/duke/io/InputHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class for asking for and handling all inputs for user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class InputHandler {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    protected Scanner scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Initializes a new \u003ccode\u003eInputHandler\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public InputHandler() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Requests for next input from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Input line from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String input() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.scanner.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 26
    }
  },
  {
    "path": "src/main/java/duke/io/OutputHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class for handling all output to display instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * A buffering functionality is present to combine messages that should be sent together from various sources."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class OutputHandler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Buffer containing messages to be sent."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ArrayList\u003cString\u003e outputBuffer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Default constructor for \u003ccode\u003eOutputHandler\u003c/code\u003e with a new empty buffer."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public OutputHandler() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        outputBuffer \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Stores desired output to be displayed in \u003ccode\u003eoutputBuffer\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param output String to be display."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void storeOutput(String output) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.outputBuffer.add(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Display a given string immediately, skipping ahead of the buffered items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Uses \u003ccode\u003eSystem.out.println\u003c/code\u003e as a default display method."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param output String to be displayed immediately."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void printNow(String output) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Checks if \u003ccode\u003eoutputBuffer\u003c/code\u003e is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Whether \u003ccode\u003eoutputBuffer\u003c/code\u003e is empty."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.outputBuffer.isEmpty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Concatenates messages in buffer then displays them."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Buffer is then cleared."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * No displaying occurs if buffer is empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void flush() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Concatenate messages in buffer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String stringToPrint \u003d this.outputBuffer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .reduce(\"\", (x, y) -\u003e x + \"\\n\" + y);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        printNow(stringToPrint);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.outputBuffer.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert this.isEmpty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 74
    }
  },
  {
    "path": "src/main/java/duke/io/OutputHandlerForGui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * \u003ccode\u003eOutputHandler\u003c/code\u003e connected for display via GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class OutputHandlerForGui extends OutputHandler {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * GUI main window for buffer contents to be outputted into."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Constructor that initializes and links \u003ccode\u003eOutputHandlerForGui\u003c/code\u003e to the GUI window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param mainWindow GUI main window component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public OutputHandlerForGui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Display a given string immediately via the GUI, skipping ahead of the buffered items."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param output String to be displayed immediately."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void printNow(String output) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        mainWindow.handleDukeResponse(output + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.time.TimePoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class that represents a \u003ccode\u003eTask\u003c/code\u003e with a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Deadline of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private TimePoint deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an initialised \u003ccode\u003eDeadline\u003c/code\u003e with name and deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param deadline Deadline of \u003ccode\u003eDeadline\u003c/code\u003e task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.deadline \u003d TimePoint.parseTime(deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a fully detailed \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * For creating \u003ccode\u003eDeadline\u003c/code\u003e from save file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eDeadline\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param deadline Deadline of \u003ccode\u003eDeadline\u003c/code\u003e task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param isDone Whether \u003ccode\u003eDeadline\u003c/code\u003e has been done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Deadline(String name, String deadline, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.deadline \u003d TimePoint.parseTime(deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String formatted for representation of \u003ccode\u003eDeadline\u003c/code\u003e for display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.deadline.toString() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts \u003ccode\u003eDeadline\u003c/code\u003e to \u003ccode\u003eHashMap\u003c/code\u003e representation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Used for further processing to save file string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return HashMap representation of properties."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public HashMap\u003cString, String\u003e convertToHashMap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e dict \u003d super.convertToHashMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"type\", TaskType.DEADLINE.toSaveString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"deadline\", this.deadline.toSaveString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return dict;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.time.TimePoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class that represents an event that occurs at some time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Represents time at which event occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private TimePoint when;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an initialised \u003ccode\u003eEvent\u003c/code\u003e with name and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param when Time when \u003ccode\u003eEvent\u003c/code\u003e occurs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Event(String name, String when) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.when \u003d TimePoint.parseTime(when);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a fully detailed \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * For creating \u003ccode\u003eEvent\u003c/code\u003e from save file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eEvent\u003c/code\u003e."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param when Time when \u003ccode\u003eEvent\u003c/code\u003e occurs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param isDone Whether \u003ccode\u003eEvent\u003c/code\u003e has been done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Event(String name, String when, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.when \u003d TimePoint.parseTime(when);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String formatted for representation of \u003ccode\u003eEvent\u003c/code\u003e for display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.when.toString() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts \u003ccode\u003eEvent\u003c/code\u003e to \u003ccode\u003eHashMap\u003c/code\u003e representation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Used for further processing to save file string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return HashMap representation of properties."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public HashMap\u003cString, String\u003e convertToHashMap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e dict \u003d super.convertToHashMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"type\", TaskType.EVENT.toSaveString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"when\", this.when.toSaveString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return dict;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Representation of a task stored in the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Name of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Indicates if task is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an empty \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an initialised \u003ccode\u003eTask\u003c/code\u003e with a name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a fully detailed \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * For use to create \u003ccode\u003eTask\u003c/code\u003e from save file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param isDone Whether task is done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Sets \u003ccode\u003eTask\u003c/code\u003e as done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void doTask() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts \u003ccode\u003eTask\u003c/code\u003e to \u003ccode\u003eHashMap\u003c/code\u003e representation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Used for further processing to save file string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return HashMap representation of properties."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public HashMap\u003cString, String\u003e convertToHashMap() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e dict \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"type\", TaskType.TASK.toSaveString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"name\", this.name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"done\", this.isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return dict;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String formatted for representation of task for display."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String checkMark;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            checkMark \u003d \"Y\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            checkMark \u003d \"N\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"[\" + checkMark + \"] \" + this.name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 92
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    TASK,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    DEADLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"duke.task.\" + this.toString().toLowerCase();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 12
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Class that represents a task to be done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an initialized \u003ccode\u003eToDo\u003c/code\u003e with name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eToDo\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a fully detailed \u003ccode\u003eToDo\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * For creating \u003ccode\u003eToDo\u003c/code\u003e from save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param name Name of \u003ccode\u003eToDo\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param isDone Whether \u003ccode\u003eToDo\u003c/code\u003e is done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public ToDo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        super(name, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns String formatted for representation of \u003ccode\u003eToDo\u003c/code\u003e for display."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Converts \u003ccode\u003eToDo\u003c/code\u003e to \u003ccode\u003eHashMap\u003c/code\u003e representation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Used for further processing to save file string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return HashMap representation of properties."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public HashMap\u003cString, String\u003e convertToHashMap() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        HashMap\u003cString, String\u003e dict \u003d super.convertToHashMap();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        dict.put(\"type\", TaskType.TODO.toSaveString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return dict;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 55
    }
  },
  {
    "path": "src/main/java/duke/time/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Representation as a point of time as a \u003ccode\u003eDate\u003c/code\u003e, and if available, \u003ccode\u003eTime\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DateTime extends TimePoint {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Date of point in time represented by \u003ccode\u003eDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Time of point in time represented by \u003ccode\u003eDateTime\u003c/code\u003e. May not be initialised depending on given input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private boolean haveTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDateTime\u003c/code\u003e representing a date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param date \u003ccode\u003eDate\u003c/code\u003e to be represented by the \u003ccode\u003eDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DateTime(LocalDate date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.haveTime \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates a new \u003ccode\u003eDateTime\u003c/code\u003e representing a date and a time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param date \u003ccode\u003eDate\u003c/code\u003e to be represented."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param time \u003ccode\u003eTime\u003c/code\u003e to be represented."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public DateTime(LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.haveTime \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns string representation of this \u003ccode\u003eDateTime\u003c/code\u003e for display in dd MMMM yyyy h:mma."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * See \u003ccode\u003ejava.time.format.DateTimeFormatter\u003c/code\u003e for meaning of the abbreviated time format pattern."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return String representation of date and time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // String format for date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String text \u003d this.date.format(DateTimeFormatter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .ofPattern(\"dd MMMM yyyy\", new Locale(\"en\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // If time data available, add to text string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (haveTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            text +\u003d \" \" + this.time.format(DateTimeFormatter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    .ofPattern(\"h:mma\", new Locale(\"en\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns formatted string for saving in to save file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Note that this string is different from \u003ccode\u003etoString()\u003c/code\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Save String format for data"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String saveString \u003d this.date.format(DateTimeFormatter"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                .ofPattern(\"dd/MM/yyyy\", new Locale(\"en\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // If time data available, add to save string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (haveTime) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            saveString +\u003d \" \" + this.time.format(DateTimeFormatter"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    .ofPattern(\"HH:mm\", new Locale(\"en\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return saveString;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 91
    }
  },
  {
    "path": "src/main/java/duke/time/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Contains a static method for handling parsing string inputs to \u003ccode\u003eDateTime\u003c/code\u003e objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Parses string input, that is a representation of a point in time, into a \u003ccode\u003eDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Input must be format compatible."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * For the string to be compatible, either \"d/M/y\" or \"d/M/y H:m\" formats must be provided."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param text Input to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return \u003ccode\u003eDateTime\u003c/code\u003e representation of date and time in \u003ccode\u003etext\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @throws DukeInputException If input string is poorly formatted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static DateTime parse(String text) throws DukeInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String[] dateTimeSplit \u003d text.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String errorMessage \u003d \"Entry not duke.time.DateTime compatible\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"Use \u003cdd/MM/yyyy hh:mm\u003e such as 12/5/2002 13:14\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // Attempt to create a Date object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            date \u003d LocalDate.parse(dateTimeSplit[0], DateTimeFormatter.ofPattern(\"d/M/y\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new DukeInputException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        //adjust date to within +- 50 years"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (date.getYear() \u003c 100) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            date \u003d date.plusYears(2000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (date.isAfter(LocalDate.now().plusYears(50))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            date \u003d date.minusYears(100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        // If time data available, add time data to resultant DateTime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        if (dateTimeSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                time \u003d LocalTime.parse(dateTimeSplit[1], DateTimeFormatter.ofPattern(\"H:m\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                return new DateTime(date, time);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                //if unable to parse as time, take it that there is no time entry."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assert dateTimeSplit.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return new DateTime(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 65
    }
  },
  {
    "path": "src/main/java/duke/time/TimePoint.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " * Representation for a point in time in text."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class TimePoint {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * String information of time represented by this \u003ccode\u003eTimePoint\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private String timePoint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Creates an empty \u003ccode\u003eTimePoint\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public TimePoint() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.timePoint \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private TimePoint(String timePoint) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        this.timePoint \u003d timePoint;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Factory method for creating \u003ccode\u003eTimePoint\u003c/code\u003es from a given string input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Attempts to create a \u003ccode\u003eDateTime\u003c/code\u003e representation of the time description provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * If unable to parse provided description, a String-based representation is created instead."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @param timeInfoString Time representation input to be parsed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return \u003ccode\u003eTimePoint\u003c/code\u003e object representing inputted time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public static TimePoint parseTime(String timeInfoString) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // Attempt to parse information as date and time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return DateTimeParser.parse(timeInfoString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            // If failed, return a string-based representation of a timing instead"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            return new TimePoint(timeInfoString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns string representation of this \u003ccode\u003eTimePoint\u003c/code\u003e for display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return String representation of point in time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.timePoint;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * Returns formatted string for saving into save file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     * @return Formatted string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return this.timePoint;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 64
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" textOverrun\u003d\"clip\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 19
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 13
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.exception.DukeInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void parse_correctByeCommandInput_byeCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            assertEquals(Parser.parse(\"bye\").toString(), (new ByeCommand()).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void parse_wrongByeCommandInput_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Parser.parse(\"bye bye\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            assertEquals(\"DUKE ERROR - Invalid command \u003cbye bye\u003e given.\", e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void parse_correctListCommandInput_listCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            assertEquals(Parser.parse(\"list\").toString(), (new ListCommand()).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void parse_wrongListCommandInput_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            Parser.parse(\"list 123\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (DukeInputException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            assertEquals(\"DUKE ERROR - Invalid command \u003clist 123\u003e given.\", e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 56
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.InputHandlerStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import duke.io.OutputHandlerStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayGreet_noInput_correctPrint() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        new Ui(new InputHandlerStub(), new OutputHandlerStub()).displayGreet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"Hello from\\n\" + logo, outputStreamCaptor.toString().trim() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayGoodbye_noInput_correctPrint() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        new Ui(new InputHandlerStub(), new OutputHandlerStub()).displayGoodbye();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"Bye. Hope to see you again soon!\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void display_testString_correctPrint() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        new Ui(new InputHandlerStub(), new OutputHandlerStub()).displayNow(\"duke test string.\\\"@#$\\\"\\\\\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"duke test string.\\\"@#$\\\"\\\\\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void displayException_testException_printExceptionMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            throw new Exception(\"duke test string.\\\"@#$\\\"\\\\\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            new Ui(new InputHandlerStub(), new OutputHandlerStub())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                    .displayException(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "            assertEquals(\"duke test string.\\\"@#$\\\"\\\\\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test public void readCommand_testInputString_correctStringOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"test input\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "                new Ui(new InputHandlerStub(), new OutputHandlerStub()).readCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 70
    }
  },
  {
    "path": "src/test/java/duke/io/InputHandlerStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class InputHandlerStub extends InputHandler {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public String input() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        return \"test input\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 10
    }
  },
  {
    "path": "src/test/java/duke/io/InputHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class InputHandlerTest extends InputHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final InputStream standardIn \u003d System.in;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private ByteArrayInputStream inputStreamFeeder \u003d new ByteArrayInputStream(\"duke \\\"test\\\" string\".getBytes());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setIn(inputStreamFeeder);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        inputStreamFeeder \u003d new ByteArrayInputStream(\"duke \\\"test\\\" string\".getBytes());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setIn(standardIn);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void input_readTestInput_returnTestInputString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"duke \\\"test\\\" string\", new InputHandler().input());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 33
    }
  },
  {
    "path": "src/test/java/duke/io/OutputHandlerStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class OutputHandlerStub extends OutputHandler {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void print(String output) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 9
    }
  },
  {
    "path": "src/test/java/duke/io/OutputHandlerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "public class OutputHandlerTest extends OutputHandler {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    public void printNowCommand_testString_correctPrintOutput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        new OutputHandler().printNow(\"duke test string\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "        assertEquals(\"duke test string\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "event book sharing /at Fri 2pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deadline return book /by Saturady all day anytime :D"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "todo find new book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "deadline become rich /by soon"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZijun97"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "WangZijun97": 1,
      "-": 37
    }
  }
]
