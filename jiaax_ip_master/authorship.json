[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "jiaax": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    id \u0027org.jetbrains.kotlin.jvm\u0027 version \u00271.4.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "compileKotlin {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": "compileTestKotlin {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "jiaax": 30
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "jiaax": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "jiaax": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "jiaax": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "jiaax": 11
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public enum Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    PRINT_TASKS,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    ERROR,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    BYE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 13
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Deadline as a subclass of Task that handles a deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private static final DateTimeFormatter MMM_D_YYYY \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Constructor for a deadline event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param by deadline speicified"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Overloaded constructor for a deadline event with a description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param description of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param by deadline specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param isDone of the deadline event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.by \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * convert a Task string to a format that is \"[task] [done/not done] /by [date]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a formatted string to be stored in a file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String inputStyle() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"deadline \" + super.inputStyle()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + \"/by \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + by;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + by.format(MMM_D_YYYY) + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 51
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Duke class that creates a Duke bot to interact with user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/meimei.jpeg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Constructs a duke that read a file from filePath to retrieve previously stored data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param filePath the file path of the stored data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        filePath \u003d \"data\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Main method to get duke to start running and ask for user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assert !input.isEmpty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Command command \u003d p.parse(input);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                storage.updateDatabase(tasks.getTaskList(), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.bye();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                Task todo \u003d TaskList.createTodo(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.addedTask(todo, tasks.getSize());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                Task event \u003d TaskList.createEvent(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.addedTask(event, tasks.getSize());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                Task deadline \u003d TaskList.createDeadline(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.addedTask(deadline, tasks.getSize());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                Task taskToDelete \u003d TaskList.deleteTask(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.deletedTask(taskToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                Task doneTask \u003d TaskList.doneTask(input);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.doneTask(doneTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                input \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                List\u003cTask\u003e tasksFound \u003d TaskList.findTask(input);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.tasksFound(tasksFound);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case PRINT_TASKS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.printTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            case ERROR:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Ui.commandError();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return input;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            //return input;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return Ui.showError(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Main method of an entry point of Duke."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //new Duke(\"data\").run();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //new Duke().run();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        });"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        });"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        });"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        });"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String dukeText \u003d getResponse(userText);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Meimei says: \" + run(input);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 236
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * DukeException is a subclass of Exception that handles all the Duke exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Constructor for a duke exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param msg a text to be printed out"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (msg.equals(\"file not found\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return \"no databse found! pls try again ^__^\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else if (msg.equals(\"command not found\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return \"Meimei doesn\u0027t understand this command!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else if (msg.equals(\"time\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return \"Date format error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return \"☹ OOPS!!! The description of a \" + msg + \" cannot be empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 30
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Event is a subclass of Task that handles all the event tasks by user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private static final DateTimeFormatter MMM_D_YYYY \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Constructor for an event task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param at the specified time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Overloaded constructor for an event task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param at the specified time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param isDone is the event completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.at \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * convert a Task string to a format that is \"[task] [done/not done] /at [date]\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a formatted string to be stored in a file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String inputStyle() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"event \" + super.inputStyle()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + \" /at \" + at;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + at.format(MMM_D_YYYY) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 49
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Duke duke \u003d new Duke(\"data\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 30
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/meimei.jpeg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 51
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A parser object that makes sense of all the user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    Parser() { }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * split up the user input and recognise the executable functions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return command type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Command parse(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (input.contains(\"list\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return Command.PRINT_TASKS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else if (input.contains(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return Command.BYE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String key \u003d input.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String command \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                if (key.contains(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.DONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else if (key.equals(\"find\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.FIND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else if (key.equals(\"delete\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.DELETE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else if (key.equals(\"todo\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.TODO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else if (key.equals(\"event\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.EVENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else if (key.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.DEADLINE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    return Command.ERROR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                return Command.ERROR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 45
    }
  },
  {
    "path": "src/main/java/duke/ReadFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class ReadFile {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    static void printFileContents(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(s.nextLine());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    static void updateContents(String filePath, ArrayList\u003cTask\u003e list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Task.addTaskFromFile(s.nextLine(), list, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * The main method to test out the ReadFile file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            printFileContents(\"data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            LocalDate k \u003d LocalDate.parse(\"2019-12-01\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(k.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 38
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A storage that handles synchronisation of database in a specified filePath given to Duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Reads a file and update the List of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a list of Tasks in recognisable string format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @throws DukeException if file is not found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public List\u003cString\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            List\u003cString\u003e store \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                store.add(s.nextLine());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            throw new DukeException(\"file not found\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Updates the current list in duke against the database"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param store the current list of tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param filePath the file path of the database"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void updateDatabase(List\u003cTask\u003e store, String filePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (store.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                writeToFile(filePath, \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                for (int i \u003d 0; i \u003c store.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                        writeToFile(filePath, store.get(i).inputStyle());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                        appendToFile(filePath, System.lineSeparator() + store.get(i).inputStyle());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(new DukeException(\"empty list\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Writes a given text to file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param filePath of the given file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param textToAdd input text"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Adds on a given text to existing strings in file specified by the filePath"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param filePath of the specified file to run"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param textToAppend the given text"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void appendToFile(String filePath, String textToAppend) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 91
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A general task class that handles the status of any task and methods to add a task to the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Constructor for a task with a name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.description \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Overloaded constructor for a task with a name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param isDone if the task is completed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.description \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public boolean findTask(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return description.contains(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to add tasks from given string format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param task task in a string format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param store the list of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param print should the task be printed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void addTaskFromFile(String task, ArrayList\u003cTask\u003e store, boolean print) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assert task.split(\" \").length \u003e\u003d 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String type \u003d task.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String remain \u003d task.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String isDone \u003d remain.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String title \u003d remain.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            store.add(new Todo(title, Boolean.valueOf(isDone)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String description \u003d title.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String by \u003d title.split(\"/by\", 2)[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                newTask \u003d new Deadline(description, by, Boolean.valueOf(isDone));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                store.add(newTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String at \u003d title.split(\"/at\", 2)[1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                newTask \u003d new Event(description, at, Boolean.valueOf(isDone));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                store.add(newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (print) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\\n\" + store.get(store.size() - 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String inputStyle() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return this.isDone + \" \" + description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * display icon for a done/not done task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return (isDone) ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 90
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * A list of Task object and methods that deal with modification to the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * updating the taskList from the database if file is found"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param listOfTask to be created."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    TaskList(List\u003cString\u003e listOfTask) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTask.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            addTaskFromFile(listOfTask.get(i), tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to mark a task in the list as done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param remain index of the task in list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return task specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static Task doneTask(String remain) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assert Integer.parseInt(remain) \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            int index \u003d Integer.parseInt(remain);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Task task \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            throw new DukeException(\"command not found\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to add a todo item into the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param command description of a todo"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a new todo task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static Task createTodo(String command) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (command.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            throw new DukeException(\"todo\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks.add(new Todo(command));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return new Todo(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to add an Event into the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param command description of an event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a new event task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static Task createEvent(String command) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String description \u003d command.split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String at \u003d command.split(\" /at \", 2)[1].replace(\" \", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks.add(new Event(description, at));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return new Event(description, at);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            throw new DukeException(\"event\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            throw new DukeException(\"time\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to add a deadline into the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param command description of an event"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return a new deadline task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static Task createDeadline(String command) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String description \u003d command.split(\"/by \", 2)[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String by \u003d command.split(\"/by \", 2)[1].replace(\" \", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            tasks.add(new Deadline(description, by));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return new Deadline(description, by);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Ui.dukeException(new DukeException(\"deadline\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (DateTimeParseException e2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Ui.dukeException(new DukeException(\"time\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to recall the list of tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Void method to add a task in string format from file"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param task to be added to arraylist of tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param store the arraylist of tasks stored"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void addTaskFromFile(String task, ArrayList\u003cTask\u003e store) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assert task.split(\" \").length \u003e\u003d 4;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String type \u003d task.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String remain \u003d task.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String done \u003d remain.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String title \u003d remain.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (type.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            store.add(new Todo(title, Boolean.valueOf(done)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String description \u003d title.split(\"/\", 2)[0];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String by \u003d title.split(\"/by \", 2)[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                newTask \u003d new Deadline(description, by, Boolean.valueOf(done));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                store.add(newTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                String at \u003d title.split(\"/at \", 2)[1];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                newTask \u003d new Event(description, at, Boolean.valueOf(done));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                store.add(newTask);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Void method to search for a task with a given keyword"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param name of the keyword"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return list of tasks with specified keyword in string format"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static List\u003cTask\u003e findTask(String name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        List\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            if (tasks.get(i).findTask(name)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                result.add(tasks.get(i));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to delete a specific task at the index of the list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param command the specified index"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static Task deleteTask(String command) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assert Integer.parseInt(command) \u003e 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        int index \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Task k \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        tasks.remove(k);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return k;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Method to get the size of the task list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return size of list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 177
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Todo is a subclass of Task and handles all the todo event created by user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Todo(String description, Boolean done) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String inputStyle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"todo \" + super.inputStyle();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 25
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": " * Ui class prints various response by Duke object, handles user interactions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        //System.out.println(\"Hello! I\u0027m meimei ^_^\\nI could scream at you all day!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Method to return command error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String commandError() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Command not found\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String showError(DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Hello! I\u0027m meimei ^_^\\nI could scream at you all day!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Prints the tasks stated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param tasks to be printed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return tasks in string format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String printTaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        result +\u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            result +\u003d (i + 1) + \".\" + tasks.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Method to return the list of task containing keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return list of task in string format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String tasksFound(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return \"No matching task found\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            String result \u003d \"Meimei found these matching tasks:\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                result +\u003d (i + 1) + \".\" + taskList.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * Method to print exception messages"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param exception type of duke exception"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return exception message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String dukeException(DukeException exception) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * duke asks for new user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @return the user input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String ask() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"File not found \u003ew\u003c\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String bye() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Bye! Meimei will miss u :(\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to print a task that was successfully added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param task the added one"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param size of the list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String addedTask(Task task, int size) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                + \"\\n Now you have \" + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String doneTask(Task task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Nice! This task is marked as done: \\n\" + task;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * method to print a deleted task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param task that was deleted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static String deletedTask(Task task) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        return \"Meimei will forget about this task:\\n\" + task;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 109
    }
  },
  {
    "path": "src/main/java/duke/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    static void appendToFile(String filePath, String textToAppend) throws IOException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.write(textToAppend);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * The main method to run the WriteFile file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        String file2 \u003d \"/Users/ngjiaxin/Desktop/AY2021/CS2103T/Week 2/data\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            writeToFile(file2, \"first line\" + System.lineSeparator() + \"second line\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 32
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jiaax": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send!\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jiaax": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import duke.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import duke.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaax"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaax"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Event e \u003d new Event(\"dance\", \"2020-08-09\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assertEquals(e.inputStyle(), \"event false dance /at 2020-08-09\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaax"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        Task e \u003d new Deadline(\"finish ip \", \"2020-08-25\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaax"
        },
        "content": "        assertEquals(e.inputStyle(), \"deadline false finish ip /by 2020-08-25\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaax"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaax"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaax": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaax"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaax"
        },
        "content": "todo eat"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaax"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaax"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaax"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "jiaax": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaax"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaax"
        },
        "content": "java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jiaax": 2
    }
  }
]
