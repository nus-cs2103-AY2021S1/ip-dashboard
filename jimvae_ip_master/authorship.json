[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "jimvae": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Duke helps you manage tasks through a chatbot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Duke also saves your list of tasks and will load"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * where you left off."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected String inquiry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Duke constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            this.tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            this.tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Executes the chatbot. The chatbot will respond"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * based on specific keywords."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void chat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.intro();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        boolean endLoop \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        while (!endLoop) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                this.inquiry \u003d ui.nextInquiry();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                Command command \u003d Parser.parse(inquiry);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                endLoop \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                ui.reply(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Main method that executes Duke chatbot."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param args String array of arguments."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Duke chatbot \u003d new Duke();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        chatbot.chat();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    //    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 70
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Parser deals with making sense of the user command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String commandLine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Parser constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine The string of text given by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Parser(String commandLine) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.commandLine \u003d commandLine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * The main method that analyse the user input and give an"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * appropriate command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine The user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The command based on the user input. The 5 commands are AddCommand, ListCommand,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DeleteCommand, DoneCommand and ExitCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Throws exceptions that are all sub class of the DukeException."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public static Command parse(String commandLine) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            if (isList(commandLine)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return parseListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else if (isToDo(commandLine)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return parseAddCommandTodo(commandLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else if (isDeadline(commandLine) || isEvent(commandLine)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return parseAddCommandWithDate(commandLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else if (isDone(commandLine) || isDelete(commandLine)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return parseDoneDeleteCommand(commandLine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else if (isFind(commandLine)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return parseFindCommand(commandLine);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else if (commandLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                throw new DukeInvalidTaskException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeEmptyActionException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Parses the keyword from the commandline and use it as an argument for"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * creating the FindCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine The user input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return FindCommand."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeEmptyFindException Checks if the keyword is empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static Command parseFindCommand(String commandLine) throws DukeEmptyFindException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (commandLine.equals(\"todo\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeEmptyFindException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return new FindCommand(commandLine.substring(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Check if the input starts with \u0027find\u0027."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static boolean isFind(String commandLine) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return commandLine.startsWith(\"find\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Convert a string into a LocalDateTime object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine This is part of the user input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A LocalDateTime object, based on the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static LocalDateTime parseDateTime(String commandLine) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String[] dateNumbers \u003d commandLine.split(\"-\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027dd hh:mm\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String[] dayAndTime \u003d dateNumbers[2].split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027yyyy\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        int year \u003d Integer.parseInt(dateNumbers[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027MM\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Integer month \u003d Integer.parseInt(dateNumbers[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027dd\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Integer day \u003d Integer.parseInt(dayAndTime[0]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027hh:mm\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String time \u003d dayAndTime[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String[] timeNumbers \u003d time.split(\":\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027hh\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Integer hour \u003d Integer.parseInt(timeNumbers[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        //Represents \u0027mm\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Integer minutes \u003d Integer.parseInt(timeNumbers[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return LocalDateTime.of(year, month, day, hour, minutes);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input is list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isList(String string) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.equals(\"list\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Creates the ListCommand."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return ListCommand."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static Command parseListCommand() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input starts with \"todo\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isToDo(String string) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.startsWith(\"todo\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Creates a TaskToDo object and use it as a parameter"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * to create an AddCommand"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine The user input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return AddCommand."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeEmptyToDoException Checks if the input includes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * a description."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static Command parseAddCommandTodo(String commandLine) throws DukeEmptyToDoException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (commandLine.equals(\"todo\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeEmptyToDoException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ToDo task \u003d new ToDo(commandLine.substring(5), false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input starts with \"deadline\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isDeadline(String string) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.startsWith(\"deadline\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input starts with \"event\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isEvent(String string) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.startsWith(\"event\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Creates a Deadline or Event object and use it as a parameter"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * to create an AddCommand."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeEmptyDeadlineException Checks if the input for deadline includes a description"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeEmptyEventException Checks if the input for event includes a description"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeDeadlineFormatException Checks if the deadline contains a date and time"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeEventFormatException Checks if event contains a date and time."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeDateTimeParseException Checks if the data and time is correct."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static Command parseAddCommandWithDate(String commandLine) throws DukeEmptyDeadlineException,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            DukeEmptyEventException, DukeDeadlineFormatException,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            DukeEventFormatException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (commandLine.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeEmptyDeadlineException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else if (commandLine.equals(\"event\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeEmptyEventException();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String[] arrOfString;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (isDeadline(commandLine)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            // Removes the command key \u0027deadline\u0027 and split between description and time and date."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            arrOfString \u003d (commandLine.substring(9)).split(\"/by \", 2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            if (arrOfString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                throw new DukeDeadlineFormatException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            // Removes the command key \u0027event\u0027 and split between description and time and date."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            arrOfString \u003d (commandLine.substring(6)).split(\"/at \", 2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            if (arrOfString.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                throw new DukeEventFormatException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (arrOfString.length !\u003d 2 ) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        // Removes extra space at the end"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String description \u003d arrOfString[0].substring(0, arrOfString[0].length() - 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        // Format of LocalDateTime is \"yyyy-MM-dd HH:mm\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        LocalDateTime dateAndTime \u003d parseDateTime(arrOfString[1]);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (isDeadline(commandLine)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            task \u003d new Deadline(description, false, dateAndTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            task \u003d new Event(description, false, dateAndTime);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input starts with \"done\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isDone(String string) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.startsWith(\"done\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Checks if the input starts with \"delete\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string The user input."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Returns a boolean."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    static boolean isDelete(String string) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return string.startsWith(\"delete\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Creates a Done or Delete Command."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param commandLine The user input."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return Done or Delete Command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static Command parseDoneDeleteCommand(String commandLine) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String[] tokens \u003d commandLine.split(\" \");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        // tokens[1] is the index"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        int num \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (isDone(commandLine)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            return new DoneCommand(num - 1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            return new DeleteCommand(num - 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 264
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Storage constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Loads the saved tasks. On the case that the file is not found,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * this will create a directory and a text file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return An ArrayList of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeFileNotFoundException Checks if the file is deleted or corrupted halfway."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    ArrayList\u003cTask\u003e load() throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        // Creates a string path that is universal across multiple operating systems."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String dataPath \u003d java.nio.file.Paths.get(home,\"data\").toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        fileName \u003d java.nio.file.Paths.get(dataPath,\"duke.txt\").toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        // Check and load/create the file accordingly"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        File dataDirectory \u003d new File(dataPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (dataDirectory.mkdir()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            createFile(fileName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            this.file \u003d new File(fileName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            // Scanning the document"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            while(sc.hasNextLine()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String currentLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String[] arrOfString \u003d currentLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                // Represents if a task is done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                Integer num \u003d Integer.parseInt(arrOfString[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                // Converts the num representation to a boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                Boolean isDone \u003d num.equals(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String title \u003d arrOfString[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String description \u003d arrOfString[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                // Creates the tasks accordingly"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                if (title.equals(\"T\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    this.list.add(new ToDo(description, isDone));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                } else if (title.equals(\"D\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    this.list.add(new Deadline(description, isDone, Parser.parseDateTime(arrOfString[3])));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                } else if (title.equals(\"E\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    this.list.add(new Event(description, isDone, Parser.parseDateTime(arrOfString[3])));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            return this.list;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Creates the text file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param path The path where the duke text file will be created."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeFileNotFoundException Checks if there is any error after saving."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    void createFile(String path) throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        File dukeFile \u003d new File(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            if (dukeFile.createNewFile()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                System.out.println(\"     File created: \" + dukeFile.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                this.file \u003d dukeFile;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                System.out.println(\"     File already exists.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Saves the tasks into the text file into a proper format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Checks if the file is deleted or corrupted halfway."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        DateTimeFormatter style \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            FileWriter myWriter \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    myWriter.write(\"T | \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + (task.isDone ? \"1 | \": \"0 | \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + task.description);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    myWriter.write(\"D | \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + (task.isDone ? \"1 | \": \"0 | \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + task.description + \" | \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + ((Deadline) task).date.format(style));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                    myWriter.write(\"E | \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + (task.isDone ? \"1 | \": \"0 | \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + task.description + \" | \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                            + ((Event) task).date.format(style));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                myWriter.write(\"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            myWriter.close();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 138
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Contains the task list and operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * TaskList constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param planner The list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public TaskList(List\u003cTask\u003e planner) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.tasks \u003d planner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Adds a task into the planner."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param task Task object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void addToPlanner(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Gives the number of tasks in the planner."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The number of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Integer getSize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Gives the list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The list of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public List\u003cTask\u003e getPlanner() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param index The index of the task in the list of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The task that is marked as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Task markAsDone(Integer index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.tasks.get(index).done();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Deletes the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param index The index of the task in the list of tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The task deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.tasks.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Gives the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param index The index of the specified task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The task inquired."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Task getTask(Integer index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Filters the list of tasks with the keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param keyword The keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A filtered list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 88
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected final String INDENTATION \u003d \"     \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    protected final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ui constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the introductions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    void intro() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Hello, I\u0027m Ravenloss\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"What can I do for you?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the message with the indentation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param string String to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void reply(String string) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        System.out.println(INDENTATION + string);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Gives the next command line inputted by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return The next inquiry."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String nextInquiry() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the list of tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void list(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            reply(\"You have no pending tasks\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            reply(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String number \u003d (i + 1) + \".\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                reply(number + currentTask.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Display the filtered list with the proper response message to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param filteredTasks The filtered tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void filteredList(List\u003cTask\u003e filteredTasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            reply(\"No tasks found\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            reply(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                String number \u003d (i + 1) + \".\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                Task currentTask \u003d filteredTasks.get(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                reply(number + currentTask.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the message when a task is added to the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param currentTask The task to be added."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param size The size of the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void addMessage(Task currentTask, Integer size) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Got it. I\u0027ve added this duke.task:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(INDENTATION + currentTask.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the message when a task is marked as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param currentTask The tasks that was marked as done."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void doneMessage(Task currentTask) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        currentTask.done();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Good job! I\u0027ve marked this task as done\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(INDENTATION + currentTask.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the farewell message."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void farewell() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the message after deleting a task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param currentTask The task deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param sizeLeft The size of the list after deleting the task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void deleteMessage(Task currentTask, Integer sizeLeft) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Noted. I\u0027ve removed this duke.task: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(INDENTATION + currentTask.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        reply(\"Now you have \" + sizeLeft + \" tasks in the list.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the dotted line to separate the user input and the system generated output."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 129
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles the addition of a task in the chatbot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * AddCommand constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Executes the addition of task and sends the appropriate response to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * It also stores the changes to the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate that it is not the terminating command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Exceptions when executing the different methods of TaskList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ui and Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        tasks.addToPlanner(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.addMessage(task, tasks.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        storage.save(tasks.getPlanner());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return \"Command: Add \" + task.toString() + \" to TaskList\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * The interface of commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * The method to be implemented across all Command subclasses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate the terminating command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Exceptions when executing the different methods of TaskList,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ui and Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    boolean execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles the deletion of a task in the chatbot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Integer index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DeleteCommand constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param index The index of the task in the array to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DeleteCommand(Integer index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Executes the deletion of task and sends the appropriate response to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * It also stores the changes to the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate that it is not the terminating command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Exceptions when executing the different methods of TaskList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ui and Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (index \u003e\u003d tasks.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task currentTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        tasks.deleteTask(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.deleteMessage(currentTask, tasks.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        storage.save(tasks.getPlanner());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeAlreadyDoneException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles the marking of a task as done in the chatbot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Integer index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DoneCommand constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param index The index of the task in the array to be marked as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DoneCommand(Integer index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Executes the marking of task as done and sends the appropriate response to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * It also stores the changes to the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate that it is not the terminating command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @throws DukeException Exceptions when executing the different methods of TaskList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ui and Storage. Also accounts for index errors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (index \u003e\u003d tasks.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task currentTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        if (currentTask.isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            throw new DukeAlreadyDoneException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        tasks.markAsDone(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.doneMessage(currentTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        storage.save(tasks.getPlanner());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles exit command of the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Ends the chatbot and  sends the appropriate response to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to signify the termination of the chatbot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.farewell();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles the filtering of tasks using a keyword in the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * FindCommand constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param keyword The keyword to filter the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Displays the filtered list of tasks with the keyword."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate that it is not the terminating command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.filteredList(tasks.findTasks(keyword));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Handles the listing of tasks stored in the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Lists out all the tasks in the chatbot to the user in  a proper format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param tasks TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to indicate that it is not the terminating command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        ui.list(tasks.getPlanner());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 23
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeAlreadyDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the task is already marked as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeAlreadyDoneException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_ALREADY_DONE \u003d \"⚠⚠⚠ This task is already done!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeAlreadyDoneException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeAlreadyDoneException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_ALREADY_DONE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeDateTimeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the date and time input is not in the proper format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_INVALID_DATE \u003d \"⚠⚠⚠ Please input the proper date in this\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            + \u0027\\n\u0027 + \"     \" + \" format: \u0027yyyy-MM-dd HH:mm\u0027\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeDateTimeParseException constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeDeadlineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the input format for the deadline command is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeDeadlineFormatException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_DEADLINE_FORMAT \u003d \"⚠⚠⚠ The description of \u0027deadline\u0027 should be accompanied\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            + \u0027\\n\u0027 + \"     \" + \"    by \u0027/by\u0027 followed by the date in this format: \u0027yyyy-MM-dd HH:mm\u0027\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeDeadlineFormatException constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeDeadlineFormatException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEmptyActionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the description for the action commands is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEmptyActionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_EMPTY_ACTION_TASK \u003d \"⚠⚠⚠ Add the appropriate number after the command \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            + \"\u0027done/delete\u0027.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeEmptyActionException constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEmptyActionException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_EMPTY_ACTION_TASK);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEmptyDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the description for the deadline command is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEmptyDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_EMPTY_DEADLINE_TASK \u003d \"⚠⚠⚠ The description of a \u0027deadline\u0027 cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeEmptyDeadlineException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEmptyDeadlineException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_EMPTY_DEADLINE_TASK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEmptyEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the description for the event command is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEmptyEventException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_EMPTY_EVENT_TASK \u003d \"⚠⚠⚠ The description of a \u0027event\u0027 cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeEmptyEventException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEmptyEventException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_EMPTY_EVENT_TASK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEmptyFindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the command \u0027find\u0027 does not have a keyword."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEmptyFindException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_ALREADY_DONE \u003d \"⚠⚠⚠ Missing keyword to find!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeEmptyFindException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEmptyFindException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_ALREADY_DONE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEmptyToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the description for the to do command is empty."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEmptyToDoException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_EMPTY_TODO_TASK \u003d \"⚠⚠⚠ The description of a \u0027todo\u0027 cannot be empty.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeEmptyToDoException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEmptyToDoException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_EMPTY_TODO_TASK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeEventFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the input format for the event command is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeEventFormatException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_EVENT_FORMAT \u003d \"⚠⚠⚠ The description of \u0027event\u0027 should be accompanied\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            + \u0027\\n\u0027 + \"     \" + \"    by \u0027/at\u0027 followed by the date in this format: \u0027yyyy-mm-dd\u0027\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeEventFormatException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_EVENT_FORMAT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 13
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * Exceptions specialised to the ip project."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeException constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param description Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 21
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the text file that stores all the task is not found or corrupted."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    private static String ERROR_FILE_NOT_FOUND \u003d \"⚠⚠⚠ File is not found. Rerun program\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeFileNotFoundException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeFileNotFoundException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jimvae": 17
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the index after an action command is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeInvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_INVALID_INDEX \u003d \"⚠⚠⚠ There appears to be a problem with your task number.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeInvalidIndexException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeInvalidIndexException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_INVALID_INDEX);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A subclass of DukeException which handles the case"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * when the user input does not match any commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public final static String ERROR_INVALID_TASK \u003d \"⚠⚠⚠ I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * DukeInvalidTaskException constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public DukeInvalidTaskException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(ERROR_INVALID_TASK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A sub class of Task, which represents any deadlines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public LocalDateTime date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Deadline constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param isDone Progress of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param date Date of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return \"[D]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + super.getStatusIcon()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \" \" + super.toString()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \" (by: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 32
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A sub class of Task, which represents any events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public LocalDateTime date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Event constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param isDone Progress of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param date Date of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return \"[E]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + super.getStatusIcon()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \"(at: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * An abstract class to represent the tasks stored and modified in the chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Task constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param isDone Progress of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Display the progress of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @return A boolean to check the task\u0027s progress."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * Marking the task as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 39
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": " * A sub class of Task, which represents any todo tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * ToDo constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param description Details of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     * @param isDone Progress of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        return \"[T]\" + super.getStatusIcon() + \" \" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 21
    }
  },
  {
    "path": "src/main/java/duke/tests/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.tests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task TODO \u003d new ToDo(\"Todo Testing\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task DEADLINE \u003d new Deadline(\"Deadline Testing\", false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            LocalDateTime.of(2020, 8, 30, 16, 0 ));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task EVENT  \u003d new Deadline(\"Event Testing\", false,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            LocalDateTime.of(2020, 11, 21, 9, 30 ));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_invalidTaskException(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"wrong command words\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeInvalidTaskException.ERROR_INVALID_TASK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_dateTimeParseException(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"deadline Deadline Testing /by 2020-2020-2020 12:00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeDateTimeParseException.ERROR_INVALID_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_alreadyDoneException(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task doneToDo \u003d new ToDo(\"Todo Testing\", true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(doneToDo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Command command \u003d new DoneCommand(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeAlreadyDoneException.ERROR_ALREADY_DONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_invalidIndexException(){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task doneToDo \u003d new ToDo(\"Todo Testing\", true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(doneToDo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Command command \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeInvalidIndexException.ERROR_INVALID_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_deadlineFormatException(){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"deadline Testing without Date\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeDeadlineFormatException.ERROR_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_deadlineEventException(){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"event Testing without Date\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeEventFormatException.ERROR_EVENT_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_emptyDeadlineException(){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"deadline\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeEmptyDeadlineException.ERROR_EMPTY_DEADLINE_TASK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_emptyToDoException(){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"todo\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeEmptyToDoException.ERROR_EMPTY_TODO_TASK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_emptyEventException(){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"event\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeEmptyEventException.ERROR_EMPTY_EVENT_TASK);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_emptyActionException(){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"done\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            Parser.parse(commandLine);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(e.getMessage(), DukeEmptyActionException.ERROR_EMPTY_ACTION_TASK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_parse_addToDo(){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"todo Todo Testing\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Command command \u003d new AddCommand(TODO);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(Parser.parse(commandLine).toString(), command.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_parse_addDeadline(){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"deadline Deadline Testing /by 2020-8-30 16:00\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Command command \u003d new AddCommand(DEADLINE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(Parser.parse(commandLine).toString(), command.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void parser_parse_addEvent(){"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        String commandLine \u003d \"deadline Event Testing /at 2020-11-21 9:30\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Command command \u003d new AddCommand(EVENT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            assertEquals(Parser.parse(commandLine).toString(), command.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 181
    }
  },
  {
    "path": "src/main/java/duke/tests/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "package duke.tests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jimvae"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jimvae"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task TODO \u003d new ToDo(\"Todo Testing\", false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task DEADLINE \u003d new Deadline(\"Deadline Testing\", false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            LocalDateTime.of(2020, 8, 30, 16, 0 ));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    Task EVENT  \u003d new Deadline(\"Event Testing\", false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jimvae"
        },
        "content": "            LocalDateTime.of(2020, 11, 21, 9, 30 ));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void taskList_getTask(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(TODO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(DEADLINE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(EVENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        assertEquals(taskList.getTask(1), DEADLINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void taskList_addToPlanner(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(TODO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(DEADLINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(EVENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        assertEquals(taskList.getTask(2), EVENT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void taskList_getSize(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(TODO);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(DEADLINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(EVENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        assertEquals(taskList.getSize(), 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void taskList_deleteTask(){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(TODO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(DEADLINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(EVENT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.deleteTask(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        assertEquals(taskList.getPlanner().contains(EVENT), false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public void taskList_markAsDone(){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        Task DEADLINE_DONE \u003d new Deadline(\"Deadline Testing\", true,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jimvae"
        },
        "content": "                LocalDateTime.of(2020, 8, 30, 16, 0 ));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(TODO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(DEADLINE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        taskList.addToPlanner(EVENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jimvae"
        },
        "content": "        assertEquals(taskList.markAsDone(1).toString(), DEADLINE_DONE.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jimvae"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jimvae"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jimvae": 84
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jimvae"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jimvae"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jimvae"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jimvae"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jimvae"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jimvae"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jimvae"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jimvae"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jimvae"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jimvae"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jimvae": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jimvae"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jimvae"
        },
        "content": "REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jimvae": 3,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jimvae"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jimvae"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jimvae"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jimvae"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jimvae": 4,
      "-": 36
    }
  }
]
