[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "kaitlynng": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "kaitlynng": 15
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "duke.task.Task list (Last updated Sep 2 2020, 02:56:05 AM):"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "1. [T][✓] hello"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "2. [D][✗] homework (by: Mar 3 2020)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "3. [E][✓] finish (at: Mar 4 2021, 12:00:00 PM)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "4. [T][✗] temp"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 5
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 59
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 51
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String LOG_FILEPATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.storage \u003d new Storage(LOG_FILEPATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ui.showLoadedTasks(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return c.getResponse(tasks, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "kaitlynng": 60
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 7
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.BYE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"OKAIS I IZ GOIN 2 NOM BYEEEEE C U !!!1!1!!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 25
    }
  },
  {
    "path": "src/main/java/duke/command/CMD.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public enum CMD {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    DEFAULT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 12
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected CMD cmd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.DEFAULT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"CAN I HAZ CHEEZBURGER?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Executes the default command, which displays a standard string regardless"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * of input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        ui.display(getResponse(taskList, storage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DeadlineCommand(String taskName, String by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.DEADLINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String msg \u003d \"I PUT NEW TING IN DA LIST\\n  \" + taskList.addDeadline(this.taskName, this.by)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + \"\\nNAO U HAS \" + taskList.getNumberOfTasks() + \" FINGS IN DA LIST LULZIES\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + \": \" + this.taskName + \"(\" + this.by + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DeleteCommand(int idx) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.DONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String msg \u003d \"TASK IZ NAO DELETZ!!!!1!11!\\n\" + \"  \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + taskList.popTask(this.idx)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + \"\\nNAO U HAS \" + taskList.getNumberOfTasks() + \" FINGS IN DA LIST LULZIES\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + \": \" + this.idx;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public DoneCommand(int idx) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.DONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        taskList.markTaskAsDone(this.idx);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"TASK IZ NAO DUNZ!!!!1!11!\\n\" + \"  \" + taskList.getTaskByIdx(this.idx);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + \": \" + this.idx;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 28
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public EventCommand(String taskName, String by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String msg \u003d \"I PUT NEW TING IN DA LIST\\n  \" + taskList.addEvent(this.taskName, this.by)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + \"\\nNAO U HAS \" + taskList.getNumberOfTasks() + \" FINGS IN DA LIST LULZIES\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + \": \" + this.taskName + \"(\" + this.by + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.by \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Overloaded class constructor if a deadline is spceified for filtering out"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * tasks after the deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ListCommand(String by) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.by \u003d DateTimeUtility.formatString(by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return \"UR LIST HAZ NUTHIN LOLOL\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (this.by.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return (\"U HAS DEES TINGS IN UR LIST.\\n\" + taskList.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                String ret \u003d taskList.filterTasksByDate(this.by);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (ret.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    return \"U HAZ NUTHIN DUE/HAPPENIN BY \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                + DateTimeUtility.formatString(this.by) + \"!! LULZIES\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    return \"U HAS DEES TINGS IN UR LIST DAT R DUE/HAPPENIN BY \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                            + DateTimeUtility.formatString(this.by) + \": \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                            + ret;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + (this.by.isEmpty() ? \"\" : \" (\" + this.by + \")\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 55
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public TodoCommand(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.cmd \u003d CMD.TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getResponse(TaskList taskList, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String msg \u003d \"I PUT NEW TING IN DA LIST\\n  \" + taskList.addTodo(this.taskName)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    + \"\\nNAO U HAS \" + taskList.getNumberOfTasks() + \" FINGS IN DA LIST LULZIES\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.cmd.toString() + \": \" + this.taskName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 29
    }
  },
  {
    "path": "src/main/java/duke/datetime/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public enum DateTimeFormat {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    String,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    Date,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    DateTime,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 7
    }
  },
  {
    "path": "src/main/java/duke/datetime/DateTimeUtility.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DateTimeUtility {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static DateTimeFormatter OUTPUT_DATE_FMT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static DateTimeFormatter OUTPUT_DATETIME_FMT \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm:ss a\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Checks whether the input dataString is of the correct Date or DateTime format, or is just a String."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return the format of the input dataString (whether it\u0027s of a Date,  DateTime or normal String format)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static DateTimeFormat checkDateTimeType(String dateStr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDateTime.parse(dateStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return DateTimeFormat.DateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDateTime.parse(dateStr, OUTPUT_DATETIME_FMT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return DateTimeFormat.DateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return DateTimeFormat.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDate.parse(dateStr, OUTPUT_DATE_FMT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return DateTimeFormat.Date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return DateTimeFormat.String;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Formats the input string according to the DateTimeFormat specified. If it is of a Date or DateTime"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * format, output a String that changes the input string to a specified output format. If it is of a"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * String format, formatString returns the same string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param format format of the input string that can be obtained with checkDateTimeType()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return Another string of the correct standardised output format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static String formatString(String dateStr, DateTimeFormat format) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        switch(format) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case DateTime:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return LocalDateTime.parse(dateStr).format(OUTPUT_DATETIME_FMT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case Date:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return LocalDate.parse(dateStr).format(OUTPUT_DATE_FMT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return dateStr;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Formats the input string according to the DateTimeFormat that is Automatically detected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * using checkDateTimeType()."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param dateStr"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static String formatString(String dateStr) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return DateTimeUtility.formatString(dateStr, DateTimeUtility.checkDateTimeType(dateStr));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int compare(LocalDate a, LocalDate b) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return a.compareTo(b);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int compare(LocalDateTime a, LocalDateTime b) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return a.compareTo(b);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int compare(LocalDate a, LocalDateTime b) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return a.compareTo(b.toLocalDate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int compare(LocalDateTime a, LocalDate b) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return a.toLocalDate().compareTo(b);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Overloaded comparator between two input DateTime strings. Checks the DateTimeFormat for each"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * string and makes the right comparisons between Date and DateTime. If either one of the strings"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * cannot be parsed as a Date or DateTime object, throws an exception."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param a"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param b"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DateTimeException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static int compare(String a, String b) throws DateTimeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTimeFormat aType \u003d DateTimeUtility.checkDateTimeType(a);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        DateTimeFormat bType \u003d DateTimeUtility.checkDateTimeType(b);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        //check all possible cases!"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (aType \u003d\u003d DateTimeFormat.Date) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (bType \u003d\u003d DateTimeFormat.Date) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return DateTimeUtility.compare(LocalDate.parse(a, OUTPUT_DATE_FMT), LocalDate.parse(b, OUTPUT_DATE_FMT));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else if (bType \u003d\u003d DateTimeFormat.DateTime) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return DateTimeUtility.compare(LocalDate.parse(a, OUTPUT_DATE_FMT), LocalDateTime.parse(b, OUTPUT_DATETIME_FMT));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DateTimeException(\"Cannot compare Datetime with string!\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else if (aType \u003d\u003d DateTimeFormat.DateTime) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (bType \u003d\u003d DateTimeFormat.Date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return DateTimeUtility.compare(LocalDateTime.parse(a, OUTPUT_DATE_FMT), LocalDate.parse(b, OUTPUT_DATE_FMT));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else if (bType \u003d\u003d DateTimeFormat.DateTime) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return DateTimeUtility.compare(LocalDateTime.parse(a, OUTPUT_DATETIME_FMT), LocalDateTime.parse(b, OUTPUT_DATETIME_FMT));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DateTimeException(\"Cannot compare Datetime with string!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DateTimeException(\"Cannot compare Datetime with string!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 127
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses a user input and returns the right command with other relevant arguments for the command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Performs input validation and throws a DukeException if input is not valid."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int space_idx \u003d userInput.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        CMD cmd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            cmd \u003d CMD.valueOf((space_idx  \u003d\u003d -1 ? userInput : userInput.substring(0, space_idx)).toUpperCase());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            cmd \u003d CMD.DEFAULT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String rest \u003d space_idx \u003d\u003d -1 ? \"\" : userInput.substring(space_idx + 1).trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        int dateStrIdx;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String dateStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String item;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        switch(cmd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            dateStrIdx \u003d rest.indexOf(\"/by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (dateStrIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                dateStr \u003d rest.substring(dateStrIdx + 3).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (DateTimeUtility.checkDateTimeType(dateStr) \u003d\u003d DateTimeFormat.String) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    throw new DukeException(\"U NID 2 GIV CORRECT DATE FOMAT!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    return new ListCommand(dateStr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (rest.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DukeException(\"ME FINKZ DAT U NED 2 ENTR NAYM 4 UR TODO ITEM LULZ\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return new TodoCommand(rest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (rest.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DukeException(\"ME FINKZ DAT U NED 2 ENTR NAYM 4 UR DEDLINE ITEM LULZ\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                dateStrIdx \u003d rest.indexOf(\"/by\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (dateStrIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    throw new DukeException(\"ME FINKZ U NED 2 GIV DATE 4 TIEM 4 DA DEDLINE USIN /by\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    item \u003d rest.substring(0, dateStrIdx).trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    dateStr \u003d rest.substring(dateStrIdx + 3).trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    if (item.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        throw new DukeException(\"ME FINKZ U NED 2 GIV DA DEDLINE A NAEM\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    } else if (dateStr.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        throw new DukeException(\"ME FINKZ U NED 2 PUT SUMTHIN 4 DA DATE OR TIEM\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        return new DeadlineCommand(item, dateStr);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            if (rest.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DukeException(\"ME FINKZ DAT U NED 2 ENTR NAYM 4 UR EVENT ITEM LULZ\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                dateStrIdx \u003d rest.indexOf(\"/at\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (dateStrIdx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    throw new DukeException(\"ME FINKZ U NED 2 GIV DATE 4 TIEM 4 DA EVENT USIN /at\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    item \u003d rest.substring(0, dateStrIdx).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    dateStr \u003d rest.substring(dateStrIdx + 3).trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    if (item.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        throw new DukeException(\"ME FINKZ U NED 2 GIV DA EVENT A NAEM\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    } else if (dateStr.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        throw new DukeException(\"ME FINKZ U NED 2 PUT SUMTHIN 4 DA DATE OR TIEM\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        return new EventCommand(item, dateStr);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                int idx \u003d Integer.parseInt(rest) - 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return new DoneCommand(idx);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DukeException(\"U MUST ONLY PUT INDEX OV TASK LULS\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                int idx \u003d Integer.parseInt(rest) - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                return new DeleteCommand(idx);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                throw new DukeException(\"U MUST ONLY PUT INDEX OV TASK LULS\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        case DEFAULT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return new Command();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return new Command();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 120
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.filePath \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        File dataFile \u003d this.filePath.toAbsolutePath().toFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            dataFile.mkdirs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Saves the existing tasklist to a log file specified with filePath in the class constructor along"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * with a timestamp. Creates the necessary directories and files if they do not exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try (BufferedWriter writer \u003d Files.newBufferedWriter(this.filePath)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String msg \u003d \"duke.task.Task list (Last updated \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    + now.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm:ss a\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    + \"):\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            writer.write(msg + taskList.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"CANNOT SAVE TASKLIST TO FILE: \" + e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * loads a saved tasklist from a log file and parses it into an arrayList of Strings that describe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return an arrayList of Strings that describe the tasks saved in the tasklist"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try (BufferedReader reader \u003d Files.newBufferedReader(this.filePath)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ArrayList\u003cString\u003e tasksStr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String str;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            reader.readLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            while((str \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                tasksStr.add(str.substring(str.indexOf(\".\") + 1).trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return tasksStr;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"GOT ERROR LOADING TASKS! \" + e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String TASK_ICON \u003d \"D\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(description, DateTimeUtility.formatString(by));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"[\"+ this.TASK_ICON +\"]\" + super.toString() + \" (by: \" + super.formatBy() + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String TASK_ICON \u003d \"E\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Event(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(description, DateTimeUtility.formatString(by));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"[\"+ this.TASK_ICON +\"]\" + super.toString() + \" (at: \" + super.formatBy() + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String ICON_TICK \u003d \"✓\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String ICON_CROSS \u003d \"✗\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void setDone(boolean status) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.isDone \u003d status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return (isDone ? ICON_TICK : ICON_CROSS); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 27
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Overloaded constructor to initialise taskList with tasks loaded from an existing log file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param tasksStr"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e tasksStr) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (String taskStr : tasksStr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            this.tasks.add(TaskList.parseTaskFromString(taskStr));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getTaskByIdx(int idx) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return tasks.get(idx).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a string describing all the tasks in the taskList with a valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Date or DateTime that is before the Date or DateTime specified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Performs input validation on the input Date or DateTime string and throws a"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * DukeException if it is of an invalid format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param by"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String filterTasksByDate(String by) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (DateTimeUtility.checkDateTimeType(by) \u003d\u003d DateTimeFormat.String) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"U NID 2 GIV CORRECT DATE FOMAT!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ArrayList\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                if (tasks.get(i) instanceof TimedTask) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        if (DateTimeUtility.compare(by,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                                ((TimedTask) tasks.get(i)).getByString()) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                            filtered.add(tasks.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    } catch (DateTimeException e) {}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return tasks2String(filtered);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds a TODO task to the existing taskList. The task is marked as undone by default."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a string representation of the added task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String addTodo(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Todo newTask \u003d new Todo(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return newTask.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds a Deadline task to the existing taskList. The task is marked as undone by default."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a string representation of the added task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String addDeadline(String name, String by) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Deadline newTask \u003d new Deadline(name, by);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return newTask.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Adds an Event task to the existing taskList. The task is marked as undone by default."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Returns a string representation of the added task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String addEvent(String name, String by) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Event newTask \u003d new Event(name, by);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return newTask.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Marks an existing task in the taskList as done, accessed by index. Performs input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * validation on the task index and throws a DukeException if the input is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param idx"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void markTaskAsDone(int idx) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"U DOAN HAS TASK WIF DIS LABEL\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            tasks.get(idx).setDone(true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Removes an existing task from the taskList by index and returns its string representation."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Performs input validation on the specified index and throws a DukeException when index"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param idx"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String popTask(int idx) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"U CANT DELET ANYTHIN COZ U HAS NO TASKZ NAO LOLOL\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"U DOAN HAS TASK WIF DIS LABEL\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            return tasks.remove(idx).toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Parses an input string and returns a Task of the correct type, name, status and"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * deadline (if available), otherwise throws a DukeException if input string is"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * of the wrong format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param str"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static Task parseTaskFromString(String str) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String[] temp \u003d str.split(\"]\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String taskType \u003d String.valueOf(temp[0].charAt(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        boolean isDone \u003d (String.valueOf(temp[1].charAt(1)).equals(Task.ICON_TICK));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        if (taskType.equals(Todo.TASK_ICON)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            task \u003d new Todo(temp[2].trim());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else if (taskType.equals(Deadline.TASK_ICON)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String taskName \u003d temp[2].split(\"\\\\(by:\")[0].trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String by \u003d temp[2].split(\" \\\\(by:\")[1].trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            by \u003d by.substring(0, by.length()-1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            task \u003d new Deadline(taskName, by);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else if (taskType.equals(Event.TASK_ICON)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String taskName \u003d temp[2].split(\" \\\\(at:\")[0].trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            String by \u003d temp[2].split(\" \\\\(at:\")[1].trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            by \u003d by.substring(0, by.length()-1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            task \u003d new Event(taskName, by);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            throw new DukeException(\"TASK ICON NOT RECOGNISED\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        task.setDone(isDone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static String tasks2String(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        String ret \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            ret +\u003d (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return TaskList.tasks2String(this.tasks);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 196
    }
  },
  {
    "path": "src/main/java/duke/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class TimedTask extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected DateTimeFormat format;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public TimedTask(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.byString \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.format \u003d DateTimeUtility.checkDateTimeType(by);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String formatBy() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return DateTimeUtility.formatString(this.byString, this.format);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String getByString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return byString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 29
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public static final String TASK_ICON \u003d \"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return \"[\" + this.TASK_ICON + \"]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 14
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \"       ,\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"       \\\\`-._           __\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"        \\\\\\\\  `-..____,.\u0027  `.\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         :`.         /    \\\\`.\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         :  )       :      : \\\\\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"          ;\u0027        \u0027   ;  |  :\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"          )..      .. .:.`.;  :\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         /::...  .:::...   ` ;\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         ; _ \u0027    __        /:\\\\\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         `:o\u003e   /\\\\o_\u003e      ;:. `.\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"        `-`.__ ;   __..--- /:.   \\\\\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"        \u003d\u003d\u003d \\\\_/   ;\u003d\u003d\u003d\u003d\u003d_.\u0027:.     ;\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"         ,/\u0027`--\u0027...`--....        ;\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"              ;                    ;\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"            .\u0027                      ;\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"          .\u0027                        ;\\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"        .\u0027     ..     ,      .       ;\\n\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"       :       ::..  /      ;::.     |\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"      /      `.;::.  |       ;:..    ;\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"     :         |:.   :       ;:.    ;\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"     :         ::     ;:..   |.    ;\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"      :       :;      :::....|     |\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"      /\\\\     ,/ \\\\      ;:::::;     ;\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"    .:. \\\\:..|    :     ; \u0027.--|     ;\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"   ::.  :\u0027\u0027  `-.,,;     ;\u0027   ;     ;\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \".-\u0027. _.\u0027\\\\      / `;      \\\\,__:      \\\\\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"`---\u0027    `----\u0027   ;      /    \\\\,.,,,/\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                    \"                   `----`              \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private static final String LINE \u003d \"-------------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String botName \u003d \"duke.Duke\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private String userName \u003d \"You\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Overloaded constructor for specifying name of the bot and user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param botName"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param userName"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public Ui(String botName, String userName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.botName \u003d botName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Prints the tasks currently existing in the taskList that is loaded from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * a log file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void showLoadedTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(\"\\nTASKS LOADED FROM DATA FILE!!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Prints a welcome message for the chat application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(\"\\nOh hai kittehs! I r lolcatus. reziztents is fu... fut...\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                + this.LOGO + \"\\n\\n\" + \"reziztents dun werk.\\n\" + this.LINE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Prompts the user to enter a command and returns a string for the user\u0027s input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.print(this.userName + \" sed: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(this.LINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Formats and prints an error in the chat application."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(this.fmtMsg(botName + \" HAZ FINDED ERRRR!\\n\" + \"\u003d\u003e \" + e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Formats and displays desired output to the chat application."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param msg"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void display(String msg) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(this.fmtMsg(msg));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Displays error when tasks cannot be read from log file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void showLoadingError(String e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        System.out.println(this.fmtMsg(\"CANNOT LOAD TASKS FROM FILE uwu owo \\n\" + \"  \" + e));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * Formats messages to be sent to the chat application."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @param msg"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public String fmtMsg(String msg) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        return this.botName + \" sed: \" + msg;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 139
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 19
    }
  },
  {
    "path": "src/test/java/datetime/DateTimeUtilityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeUtility;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.datetime.DateTimeFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DateTimeUtilityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void checkDateTimeTypeTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(DateTimeUtility.checkDateTimeType(\"2020-04-05\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "                     DateTimeFormat.Date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 15
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 11
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Command command \u003d Parser.parse(\"list /by 2020-04-04\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Command actual \u003d new ListCommand(\"2020-04-04\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            assertEquals(command.toString(), actual.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fail(\"Exception thrown! \" + e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 23
    }
  },
  {
    "path": "src/test/java/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    public void parseTaskFromStringTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Task ret \u003d TaskList.parseTaskFromString(\"[D][✓] hello (by: Apr 20 2020, 12:00:59 PM)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            Task actual \u003d new Deadline(\"hello\", \"2020-04-20T12:00:59\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            actual.setDone(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            assertEquals(ret.toString(), actual.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "            fail(\"Exception thrown! \" + e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "todo eat lunch"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "deadline finish book /by Saturday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "event project meeting /at June 6th"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "hello"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "kaitlynng": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "kaitlynng": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitlynng"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "kaitlynng": 1
    }
  }
]
