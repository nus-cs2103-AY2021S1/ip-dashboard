[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    archiveBaseName \u003d \"DukeBunny\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    options.encoding(\u0027UTF-8\u0027)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dUTF-8\"]"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "hogantan": 26
    }
  },
  {
    "path": "data/TaskList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | Physics Project | 4 December 2020 06:00 PM"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 1 | Family Christmas party | 25 December 2020 06:00 PM to 11:00 PM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 2
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | homework"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | CS2103T Homework"
      }
    ],
    "authorContributionMap": {
      "hogantan": 8
    }
  },
  {
    "path": "data/dummyText.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "data/storageValidTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "DukeBunny is a **desktop application for managing tasks, optimized for use via a Command Line Interface (CLI)** while still "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "having the visual benefits of a Graphical User Interface (GUI). If you need help in **keeping track of things to do**, "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "DukeBunny offers several useful features with a touch of posh attitude to it.  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2. Download the latest `DukeBunny.jar` from https://github.com/hogantan/ip/releases/tag/v3."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "3. Copy the downloaded jar file to the folder you want to use as the home folder for your DukeBunny."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "4. Double-click the file to start the app. The GUI below should appear in a few seconds."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "![DukeBunnyWelcomeSS](/docs/DukeBunnyWelcomeSS.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "5. Enter command in the command box and press Enter to execute it. (Please refer to command list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Words in `UPPER_CASE` are the parameters that are supplied by the user.\\"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo Buy bread`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Adding a todo task - **`todo`**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Adds a todo task to the task list. A todo is a task with only a description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "`todo Buy bread`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "No worries, the following task has been added to your list:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": " -------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[T][✘] Buy bread"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": " -------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Marvellous! Now you have 1 tasks in your list!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Adding a deadline task - **`deadline`**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Adds a deadline task to the task list. A deadline is a task with a description and a date and time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The date and time is entered after a `/by` follow up command. The format of the date and time is YYYY-MM-DD hhmm."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE TIME`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "`deadline Physics Project /by 2020-12-04 1800`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "No worries, the following task has been added to your list:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[D][✘] Physics Project (by: 4 December 2020 06:00 PM)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Marvellous! Now you have 2 tasks in your list!"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Adding an event task - **`event`**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Adds an event task to the task list. An event is a task with a description, a date, start time and end time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "The date and time is entered after a `/at` follow up command. The format of the date, start and end time "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "is YYYY-MM-DD hhmm-hhmm."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `event DESCRIPTION /at DATE START_TIME-END_TIME`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "`event Family Christmas party /at 2020-12-25 1800-2300`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "No worries, the following task has been added to your list:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "[E][✘] Familiy Christmas party (at: 25 December 2020 06:00 PM to 11:00 PM)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Marvellous! Now you have 3 tasks in your list!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Viewing all tasks - **`list`**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Views all tasks that are in the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo Buy bread"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline Physics Project /by 2020-12-04 1800"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event Family Christmas party /at 2020-12-25 1800-2300"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.[T][✘] Buy bread"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2.[D][✘] Physics Project (by: 4 December 2020 06:00 PM)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "3.[E][✘] Family Christmas party (at: 25 December 2020 06:00 PM to 11:00 PM)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Marking a task as done - **`done`**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Marks a task in the task list as done based on a specified index. The index refers to the index number shown"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "in the task list displayed when `list` is called. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.[T][✘] Buy bread"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2.[D][✘] Physics Project (by: 4 December 2020 06:00 PM)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "3.[E][✘] Family Christmas party (at: 25 December 2020 06:00 PM to 11:00 PM)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "When `delete 1` is entered."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Splendid! I\u0027ve marked the following task as done:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  [✓] Buy bread"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Deleting a task - **`delete`**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Deletes a task from the task list based on a specified index. The index refers to the index number shown"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "in the task list displayed when `list` is entered. "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "When `list` is entered."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.[T][✓] Buy bread"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "2.[D][✘] Physics Project (by: 4 December 2020 06:00 PM)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "3.[E][✘] Family Christmas party (at: 25 December 2020 06:00 PM to 11:00 PM)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "When `delete 1` is entered."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "No worries, the following task has been deleted from your list:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "  [✓] Buy bread"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Marvellous! Now you have 2 tasks in your list!"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Finding tasks via keyword - **`find`**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Finds tasks that contains a keyword, casing of keyword does not matter. Multiple words are not acceptable."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "`find project`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Splendid! Here are the tasks in your list that matches \u0027project\u0027:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.[D][✘] Physics Project (by: 4 December 2020 06:00 PM)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Finding tasks via date and time - **`finddt`**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Finds tasks that matches the date. Only applicable to deadline and event tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `finddt DATE`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "`finddt 2020-12-25`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Splendid! Here are the tasks in your list that matches \u00272020-12-25\u0027:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "-------------------------------------------------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hogantan"
        },
        "content": "1.[E][✘] Family Christmas party (at: 25 December 2020 06:00 PM to 11:00 PM)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Sorting task list alphabetically - **`sort`**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Sorts the task list lexicographically. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Sorting task list based on date and time - **`sortdt`**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Sorts the task list in increasing order based on date and time. Event tasks will be sorted based on their start "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hogantan"
        },
        "content": "time and todo tasks will be sorted to the bottom on the task list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `sortdt`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Exiting the application - **`bye`**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Closes and exits DukeBunny."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hogantan"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hogantan"
        },
        "content": "### Saving task list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": "DukeBunny data is automatically saved into the TaskList.txt file after any command that changes the data is executed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "DukeBunny will always draw the data of the task list from the TaskList.txt file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hogantan"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Action | Format/Examples |"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| ------------- | ------------- |"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Add Todo | `todo DESCRIPTION` \u003cbr\u003e e.g. `todo Buy bread` |"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Add deadline | `deadline DESCRIPTION /by DATE TIME` \u003cbr\u003e e.g. `deadline Physics Project /by 2020-12-04 1800` |"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Add event | `event DESCRIPTION /AT DATE START_TIME-END_TIME` \u003cbr\u003e e.g. `event Family Christmas party /at 2020-12-25 1800-2300` |"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| View list | `list` |"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Mark done | `done INDEX` \u003cbr\u003e e.g. `done 1` |"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Delete | `delete INDEX` \u003cbr\u003e e.g. `delete 1` |"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Find tasks (keyword)  | `find KEYWORD` \u003cbr\u003e e.g. `find project` |"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Find tasks (date) | `finddt DATE` \u003cbr\u003e e.g. `finddt 2020-12-25` |"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Sort alphabetically | `sort` |"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Sort based on date and time | `sortdt` |"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hogantan"
        },
        "content": "| Exit | `bye` |"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "hogantan": 188
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Entry point for model.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.setProperty(\"file.encoding\", \"UTF-8\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 15
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import model.Duke;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A GUI for model.Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Duke duke \u003d new Duke(\"data/TaskList.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.setTitle(\"DukeBunny\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/DukeBunnyPxl.PNG\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 32
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Exits from model.Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ByeCommand(Ui ui) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showExit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ByeCommand\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 24
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Base class of a Command in model.Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Command (Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeException when a certain constraint has not been met."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public abstract String execute() throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 22
    }
  },
  {
    "path": "src/main/java/commands/CreateTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Abstract extension of the Command class for commands that"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * deal with creating tasks. Contains several methods that such"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * commands have in common."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class CreateTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    CreateTaskCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Checks whether description is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param description to check."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when there description is empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected static void checkDescription(String description, String command) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of an \" + command + \" must not be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Checks whether there is a follow up command in the String array."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param withoutCommandArr to check."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when String array does not contain a follow up command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected static void checkFollowUpCommand(String[] withoutCommandArr, String followUpCommand)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (withoutCommandArr.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It appears you are missing a \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"follow up \u0027\" + followUpCommand + \"\u0027 command.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Checks whether date time input exists."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime to check."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when date and time is missing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected static void checkDateTime (String dateTime, String command)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!dateTime.trim().contains(\" \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It appears you are missing the \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"date and time for your \" + command + \".\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    protected String addTask(Task newTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage.saveTask(newTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showAddedToList(newTask) + Ui.showBreakLine()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 71
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalFollowUpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds a Deadline task into the current task list of model.Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeadlineCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a deadline command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DeadlineCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException, DukeIllegalFollowUpCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String userInputWithoutCommand \u003d this.userInput.substring(this.userInput.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] userInputWithoutCommandArr \u003d userInputWithoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d userInputWithoutCommandArr[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            checkDescription(description, \"deadline\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            checkFollowUpCommand(userInputWithoutCommandArr, \"/by\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(userInputWithoutCommandArr[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (followUpCommand.equals(\"by\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                checkDateTime(userInputWithoutCommandArr[1], \"deadline\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String dateTime \u003d userInputWithoutCommandArr[1]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        .substring(userInputWithoutCommandArr[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Deadline newTask \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return addTask(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeIllegalFollowUpCommandException(\"deadline\", followUpCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"The format should be as follows YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DeadlineCommand\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 55
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Deletes a specific task in the current task list of model.Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a delete command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DeleteCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String intSubstring \u003d userInput.substring(7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int indexNumber \u003d Integer.parseInt(intSubstring);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task deletedTask \u003d this.taskList.delete(indexNumber);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.saveTaskList(this.taskList); //Overwrites current data.txt file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.ui.showDelete(deletedTask)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + this.ui.showTotalTasks(this.taskList.getTotalTask());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My sincere apologies, but please enter a valid number.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Oh dear, it appears that item does not exist.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DeleteCommand\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 53
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Marks a specific task in the current task list of model.Duke as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a done command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DoneCommand(TaskList taskList, Storage storage, String userInput, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Get number after done keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.userInput.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of a done must not be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String intSubstring \u003d this.userInput.substring(5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            int indexNumber \u003d Integer.parseInt(intSubstring);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task taskDone \u003d this.taskList.markDone(indexNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.saveTaskList(this.taskList); //Overwrites current data.txt file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.ui.showMarkDone(taskDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My sincere apologies, but please enter a valid number.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"Oh dear, it appears that item does not exist.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"DoneCommand\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 56
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalFollowUpCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds an Event task into the current task list of model.Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EventCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a event command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public EventCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException, DukeIllegalFollowUpCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String userInputWithoutCommand \u003d this.userInput.substring(this.userInput.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] userInputWithoutCommandArr \u003d userInputWithoutCommand.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d userInputWithoutCommandArr[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            checkDescription(description, \"event\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            checkFollowUpCommand(userInputWithoutCommandArr, \"/at\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String followUpCommand \u003d Parser.parseFollowUpCommand(userInputWithoutCommandArr[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (followUpCommand.equals(\"at\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                checkDateTime(userInputWithoutCommandArr[1], \"event\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                String dateTime \u003d userInputWithoutCommandArr[1]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        .substring(userInputWithoutCommandArr[1].indexOf(\" \")).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Event newTask \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return addTask(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                throw new DukeIllegalFollowUpCommandException(\"event\", followUpCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of an event must not be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"EventCommand\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 55
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Finds tasks based on their description that matches a specific userInput keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public FindCommand(TaskList taskList, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (isFindFieldEmpty(this.userInput)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.ui.showFindResults(this.taskList.getTaskList(), \"\"); //show all tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] userInputArr \u003d this.userInput.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!isSingleField(userInputArr)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My deepest apologies but I\u0027m only able to \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"find tasks based on a single keyword.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String keyword \u003d userInputArr[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d this.taskList.findTasksKeyword(keyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showFindResults(result, keyword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isFindFieldEmpty(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return userInput.trim().length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isSingleField(String[] userInputArr) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return userInputArr.length \u003c\u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 54
    }
  },
  {
    "path": "src/main/java/commands/FindDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Finds tasks based on their date that matches a specific user_input date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class FindDateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs find date command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public FindDateCommand(TaskList taskList, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (isFindFieldEmpty(this.userInput)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.ui.showFindResults(this.taskList.getTaskList(), \"\"); //show all tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] userInputArr \u003d this.userInput.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!isSingleField(userInputArr)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My deepest apologies but I\u0027m only able to \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"find tasks based on a single date and time.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String dateTime \u003d userInputArr[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (!isCorrectDateTimeFormat(dateTime)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My deepest apologies but it appears the input \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"date is of the wrong format. (Format: YYYY-MM-DD)\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d this.taskList.findTasksDate(dateTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showFindResults(result, dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isFindFieldEmpty(String userInput) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return userInput.trim().length() \u003d\u003d 6;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isSingleField(String[] userInputArr) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return userInputArr.length \u003c\u003d 2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isCorrectDateTimeFormat(String dateTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return dateTime.split(\"-\").length \u003d\u003d 3;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 60
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Prints the task list currently stored in model.Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a list command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ListCommand(Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showTaskList(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ListCommand\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 32
    }
  },
  {
    "path": "src/main/java/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a sort command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public SortCommand(Ui ui, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.sortTaskListAlphabetically();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage.saveTaskList(this.taskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showSorted() + Ui.showBreakLine() + this.ui.showTaskList(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 31
    }
  },
  {
    "path": "src/main/java/commands/SortDateTimeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class SortDateTimeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a sortdatetime command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public SortDateTimeCommand(Ui ui, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.sortTaskListDateTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage.saveTaskList(this.taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.ui.showSortedDateTime() + Ui.showBreakLine() + this.ui.showTaskList(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 30
    }
  },
  {
    "path": "src/main/java/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Adds a To_Do task into the current task list of model.Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDoCommand extends CreateTaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a to do command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput details of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ToDoCommand(TaskList taskList, Storage storage, Ui ui, String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(taskList, storage, ui, userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String execute() throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String description \u003d userInput.substring(5).trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            checkDescription(description, \"todo\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            ToDo newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return addTask(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"I\u0027m sorry to inform you that the \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"description of a todo must not be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"ToDoCommand\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 42
    }
  },
  {
    "path": "src/main/java/data/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Parent class of all model.Duke Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 10
    }
  },
  {
    "path": "src/main/java/data/exception/DukeIllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that a given command is not recognised by model.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeIllegalCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param command that is not recognised by model.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeIllegalCommandException(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(\"I\u0027m terribly sorry to inform you that \u0027\" + command + \"\u0027 is an unrecognizable command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/data/exception/DukeIllegalFollowUpCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that a given follow up command is incorrect for a given command by model.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeIllegalFollowUpCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param command first command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param followUpCommand second command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeIllegalFollowUpCommandException(String command, String followUpCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(\"My deepest apologies but \u0027\" + followUpCommand + \"\u0027 is an incorrect follow up command to a \u0027\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + command + \"\u0027 command.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 16
    }
  },
  {
    "path": "src/main/java/data/exception/DukeInvalidUserInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Signals that a given user input is invalid and does not fulfill certain constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DukeInvalidUserInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param msg that contains information related to the failed constraints."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public DukeInvalidUserInputException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 13
    }
  },
  {
    "path": "src/main/java/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTimeTxt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime of deadline task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when date time is incorrect format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Deadline(String description, String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        convertDateTime(dateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the given string into a LocalDateTime to be stored in the given Deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime to be converted into LocalDateTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void convertDateTime(String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] dateTimeArr \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.time \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    LocalTime.parse(dateTimeArr[1].substring(0, 2) + \":\" + dateTimeArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.dateTimeTxt \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\")) + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + this.time.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Assertion to check whether date and time have been correctly parsed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert this.date !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert this.time !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time. \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"The format should be as follows YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the Deadline task into a string to be saved into a text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Deadline task in the form of a string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"D | \" + super.toTxtFormat() + \" | \" + this.dateTimeTxt;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a Deadline task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a Deadline task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Deadline task based on input string array."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format is found in the input string array."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Deadline parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Assertions to check whether the txtArray are of the correct format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[1] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[2] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[3] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String done \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] unFormattedDateTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] formattedDateTime \u003d formatDateTime(unFormattedDateTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String finalDateTime \u003d formattedDateTime[0] + \" \" + formattedDateTime[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, finalDateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String[] formatDateTime(String[] unFormattedDateTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] formattedDateTime \u003d new String[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedDate \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                unFormattedDateTime[0] + \" \" + unFormattedDateTime[1] + \" \" + unFormattedDateTime[2];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedTime \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                unFormattedDateTime[3] + \" \" + unFormattedDateTime[4];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedDate \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String time \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalTime.parse(unformattedTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedTime \u003d time.substring(0, time.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + time.substring(time.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        formattedDateTime[0] \u003d formattedDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        formattedDateTime[1] \u003d formattedTime;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.dateTimeTxt + \")\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 115
    }
  },
  {
    "path": "src/main/java/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that contains a description of a task and a specific date, start and end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String dateTimeTxt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param description of task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime of event task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when date time is incorrect format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Event(String description, String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        convertDateTime(dateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the given string into a LocalDate and LocalTime to be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *     stored as the Event\u0027s date,start and end time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param dateTime to be converted into LocalDate and LocalTime."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid a date time format is used as input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void convertDateTime(String dateTime) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String[] dateTimeArr \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.date \u003d LocalDate.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String []timeArr \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.startTime \u003d LocalTime.parse(timeArr[0].substring(0, 2) + \":\" + timeArr[0].substring(2, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.endTime \u003d LocalTime.parse(timeArr[1].substring(0, 2) + \":\" + timeArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.dateTimeTxt \u003d this.date.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \" \" + this.startTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\")) + \" to \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + this.endTime.format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Assertion to check whether startTime and endTime have been correctly parsed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert this.startTime !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert this.endTime !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time.\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \" The format should be as follows YYYY-MM-DD hhmm-hhmm.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the Event task into a string to be saved into a text file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Event task in the form of a string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"E | \" + super.toTxtFormat() + \" | \" + this.dateTimeTxt;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a Event task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a Event task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return Event task based on input string array."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when an invalid date and time format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     *     is found in the input string array."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Event parse(String[] txtArray) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Assertions to check whether the txtArray are of the correct format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[1] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[2] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[3] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String done \u003d txtArray[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String description \u003d txtArray[2].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] unFormattedDateTime \u003d txtArray[3].trim().split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] formattedDateTime \u003d formatDateTime(unFormattedDateTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String finalDateTime \u003d formattedDateTime[0] + \" \" + formattedDateTime[1] + \"-\" + formattedDateTime[2];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d new Event(description, finalDateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (done.equals(\"1\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private static String[] formatDateTime(String[] unFormattedDateTime) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] formattedDateTime \u003d new String[3];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedDate \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                unFormattedDateTime[0] + \" \" + unFormattedDateTime[1] + \" \" + unFormattedDateTime[2];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedStartTime \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                unFormattedDateTime[3] + \" \" + unFormattedDateTime[4];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String unformattedEndTime \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                unFormattedDateTime[6] + \" \" + unFormattedDateTime[7];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedDate \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalDate.parse(unformattedDate, DateTimeFormatter.ofPattern(\"d MMMM yyyy\")).toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String startLocalTime \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalTime.parse(unformattedStartTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String endLocalTime \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalTime.parse(unformattedEndTime, DateTimeFormatter.ofPattern(\"hh:mm a\")).toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedStartTime \u003d startLocalTime.substring(0, startLocalTime.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + startLocalTime.substring(startLocalTime.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String formattedEndTime \u003d endLocalTime.substring(0, endLocalTime.indexOf(\u0027:\u0027))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + endLocalTime.substring(endLocalTime.indexOf(\u0027:\u0027) + 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        formattedDateTime[0] \u003d formattedDate;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        formattedDateTime[1] \u003d formattedStartTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        formattedDateTime[2] \u003d formattedEndTime;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.dateTimeTxt + \")\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 127
    }
  },
  {
    "path": "src/main/java/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Base class of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String[] descriptionArr; //to facilitate finding/searching of keyword"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.descriptionArr \u003d description.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Obtains status icon(either tick or cross symbol) based on the Task\u0027s isDone status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return status icon string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2713\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"\\u2718\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string into a specific type of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtFormat to be parsed into a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return a specific task type based on the txtFormat."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException when txtFormat is of invalid format to be parsed into a task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static Task parse(String txtFormat) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        char firstLetter \u003d txtFormat.charAt(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d txtFormat.split(\"\\\\|\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (firstLetter \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return ToDo.parse(txtArray);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return Deadline.parse(txtArray);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else if (firstLetter \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return Event.parse(txtArray);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert false; //Code should not reach here as it should be caught as an unknown command in Parser."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"My apologies but I am not familiar with such a task type.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the task into a string to be saved into a text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return task in the form of a string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"1 | \" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return \"0 | \" + this.description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Checks whether the description of a task contains a specific keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param keyword to be checked."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return whether the keyword is within the description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean containsKeyword(String keyword) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (String word : descriptionArr) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (word.toLowerCase().equals(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 90
    }
  },
  {
    "path": "src/main/java/data/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents an array list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a task into the list and then generates and prints a success message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Adds a task into the list only."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Used when loading data from a storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be added into the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Deletes a specific task based on the task\u0027s index in the task array list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and then generates and prints a success message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i index of task to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task delete(int i) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert i \u003e\u003d 0; //Index of arrays cannot be less than zero."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList.remove(i - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Marks a specific task as done based on task\u0027s index in the task array list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and then generates and prints a success message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i index of task to be marked."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task markDone(int i) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert i \u003e\u003d 0; //Index of arrays cannot be less than zero."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Task task \u003d this.taskList.get(i - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert i \u003e\u003d 0; //Index of arrays cannot be less than zero."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Finds tasks that contain the input keyword within their descriptions."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param keyword to find."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return an array list of tasks that contain the keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasksKeyword(String keyword) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (task.containsKeyword(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Finds tasks that contain the input date within their dates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param date to find."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return an array list of tasks that contain the date."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasksDate(String date) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            LocalDate inputDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert inputDate !\u003d null; //To ensure inputDate has been correctly parsed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    if (deadline.getDate().equals(inputDate)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        result.add(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    if (event.getDate().equals(inputDate)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                        result.add(task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeInvalidUserInputException(\"It seems you have entered an invalid date and time. \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    + \"The format should be as follows YYYY-MM-DD hhmm.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Sorts the current task list lexicographically."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void sortTaskListAlphabetically() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Collections.sort(this.taskList, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            public int compare(Task firstTask, Task secondTask) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                return firstTask.getDescription().compareTo(secondTask.getDescription());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Sorts the current task list by date and time."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void sortTaskListDateTime() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e todoTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ArrayList\u003cTask\u003e dateTimeTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                todoTasks.add(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                dateTimeTasks.add(task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        sortDateTimeTasks(dateTimeTasks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dateTimeTasks.addAll(todoTasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d dateTimeTasks;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Sorts an arraylist of tasks based on date and time."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param tasks arraylist to be sorted."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void sortDateTimeTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Collections.sort(tasks, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            public int compare(Task firstTask, Task secondTask) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalDate firstDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalDate secondDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalTime firstTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                LocalTime secondTime;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (firstTask instanceof Deadline) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Deadline firstDeadline \u003d (Deadline) firstTask;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    firstDate \u003d firstDeadline.getDate();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    firstTime \u003d firstDeadline.getTime();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Event firstEvent \u003d (Event) firstTask;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    firstDate \u003d firstEvent.getDate();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    firstTime \u003d firstEvent.getStartTime();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (secondTask instanceof Deadline) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Deadline secondDeadline \u003d (Deadline) secondTask;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    secondDate \u003d secondDeadline.getDate();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    secondTime \u003d secondDeadline.getTime();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    Event secondEvent \u003d (Event) secondTask;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    secondDate \u003d secondEvent.getDate();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    secondTime \u003d secondEvent.getStartTime();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                if (firstDate.compareTo(secondDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return firstTime.compareTo(secondTime);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    return firstDate.compareTo(secondDate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 191
    }
  },
  {
    "path": "src/main/java/data/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * A specific type of task that only contains a description of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Converts the To_Do task into a string to be saved into a text file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return To_Do task in the form of a string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toTxtFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"T | \" + super.toTxtFormat();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses a given string array into a To_Do task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param txtArray to be parsed into a To_Do task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return To_Do task based on input string array."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static ToDo parse(String[] txtArray) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[1] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert txtArray[2] !\u003d null; //This field should not be empty unless user manually modify TaskList.txt."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(txtArray[2].trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (txtArray[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            toDo.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return toDo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 38
    }
  },
  {
    "path": "src/main/java/model/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Over seeing class of the DukeBunny Chat Bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Drives the entire process of Duke from start to end behind the GUI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a model of Duke with a specified file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param filePath file path."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.parser \u003d new Parser(this.taskList, this.storage, this.ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ResponseResult getResponse(String userInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Command userCommand \u003d this.parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ResponseResult(false, userCommand.execute());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ResponseResult(true, this.ui.showDukeError(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Initialises model.Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return welcome message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String initDuke() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.storage.loadTaskList(this.taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (DukeInvalidUserInputException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return this.ui.showDukeError(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return Ui.showGreeting();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        System.out.println(initDuke());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(getResponse(userInput).getMsg());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Used for running duke in a terminal."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Duke duke \u003d new Duke(\"data/TaskList.txt\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "hogantan": 78
    }
  },
  {
    "path": "src/main/java/model/ResponseResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Links a command result message and whether the message is an"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * error message or not in order to facilitate the different expressions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * of DukeBunny images in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ResponseResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private boolean isError;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a response result which contains a boolean and a string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param isError whether the command message is an error or not."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param msg command result message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public ResponseResult(boolean isError, String msg) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return isError;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getMsg() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 29
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.FindDateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.SortDateTimeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.ToDoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs a parser to parse user input commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList of model.Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param storage of model.Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param ui of model.Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Parser(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput full user_input string to be parsed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return command based on user_input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeIllegalCommandException when an invalid command is detected."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Command parseCommand(String userInput) throws DukeIllegalCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] userInputArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (userInputArr.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeIllegalCommandException(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String keyword \u003d userInputArr[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ListCommand(this.ui, this.taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DoneCommand(this.taskList, this.storage, userInput, this.ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ByeCommand(this.ui);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new ToDoCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new EventCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DeadlineCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new DeleteCommand(this.taskList, this.storage, this.ui, userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new FindCommand(this.taskList, this.ui, userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"finddt\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new FindDateCommand(this.taskList, this.ui, userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new SortCommand(this.ui, this.taskList, this.storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        case \"sortdt\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return new SortDateTimeCommand(this.ui, this.taskList, this.storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            throw new DukeIllegalCommandException(keyword);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Parses user_input when there are commands that follow a \u0027/\u0027 into a command string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput full follow-up user_input string to be parsed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return string command keyword based on user_input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String parseFollowUpCommand(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] userInputArr \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assert userInputArr[0] !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return userInputArr[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 91
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Represents the storage of where model.Duke is loading information from and saving information to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Constructs the storage based on a filepath to a txt file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param filepath to txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (filepath \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Loads the data in the text file from the file path to an assigned TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to load data to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @throws DukeInvalidUserInputException if there are any invalid inputs in the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * that are unable to be parsed into a Task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void loadTaskList(TaskList taskList) throws DukeInvalidUserInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File saveFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Scanner s \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                Task toAdd \u003d Task.parse(s.nextLine());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                taskList.load(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //can be ignored because if file is not found it will just be created when saving data"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Saves the given task to the text file from the file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task to be saved into text file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveTask(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File saveFile \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            saveFile.getParentFile().mkdir(); //to create data directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            saveFile.createNewFile(); //to create TaskList.txt file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            //Check to see whether duke.txt file exists"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (saveFile.length() \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                FileWriter toSave \u003d new FileWriter(saveFile, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.write(System.lineSeparator() + task.toTxtFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                FileWriter toSave \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.write(task.toTxtFormat());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                toSave.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(Ui.showUnknownError());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Overwrites and saves an entire tasklist into the text file from the file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to be saved into the text file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void saveTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FileWriter overwriteFile \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (taskList.getTotalTask() \u003e 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.write(taskList.getTask(0).toTxtFormat());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                for (int i \u003d 1; i \u003c taskList.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    saveTask(taskList.getTask(i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.write(\"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                overwriteFile.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            System.out.println(Ui.showUnknownError());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 96
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 61
    }
  },
  {
    "path": "src/main/java/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import model.Duke;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import model.ResponseResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * Controller for ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeUserPxl.PNG\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeBunnyPxl.PNG\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Image dukeImageError \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeBunnyErrorPxl.PNG\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput.setPromptText(\"Enter command here\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput.getParent().requestFocus();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        //Welcome Message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                DialogBox.getDukeDialog(duke.initDuke(), dukeImage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ResponseResult response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (response.isError()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    DialogBox.getDukeDialog(response.getMsg(), dukeImageError)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                    DialogBox.getDukeDialog(response.getMsg(), dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 65
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": " * User interface of Duke which manages all text output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private final Scanner userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        this.userInput \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints greeting message upon launching of Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String showGreeting() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"Oh Golly! Who do we have here?\\nThe name\u0027s Duke, how can I be of assistance?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints Duke specific error messages upon catching them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param e Duke specific exception."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showDukeError(DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Prints each task in the input tasklist in a labelled and ordered list view."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints a message when input tasklist is empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to be printed as an indexed list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String getListMsg \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String emptyListMsg \u003d \"Oh dear, it seems that your tasks list is empty!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return emptyListMsg;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return getListMsg + showBreakLine() + output;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Prints a message which displays the total number of tasks in a tasklist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param i the total number of task in a tasklist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showTotalTasks(int i) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"Marvellous! Now you have \" + i + \" tasks in your list!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the exit message upon exiting Duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"Well, I\u0027m utterly knackered! Cheerios!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the task that has been added to the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is added to the tasklist."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showAddedToList(Task task) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String addToListMsg \u003d \"No worries, the following task has been added to your list:\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return addToListMsg + showBreakLine() + task;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Displays the search result of find command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param taskList to be searched."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param userInput find keyword given by user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @return search result as a String."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showFindResults(ArrayList\u003cTask\u003e taskList, String userInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + currentTask + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String getListMsg \u003d \"Splendid! Here are the tasks in your list that matches \" + \"\u0027\" + userInput + \"\u0027\" + \":\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String emptyListMsg \u003d \"Oh dear, it seems that there are no tasks that matches \" + \"\u0027\" + userInput + \"\u0027\" + \".\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return emptyListMsg;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            return getListMsg + showBreakLine() + output;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the unknown error message upon encountering an unidentifiable error."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String showUnknownError() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"OH FIDDLESTICKS, WE SEEM TO HAVE HIT A BUMP ON THE ROAD HERE. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + \"AN UNKNOWN ERROR HAS BEEN DETECTED.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return this.userInput.nextLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the done message when a task is being marked as done."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is being marked as done."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showMarkDone(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String markDoneMsg \u003d \"Splendid! I\u0027ve marked the following task as done:\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String taskDetails \u003d \"  [\" + task.getStatusIcon() + \"] \" + task.getDescription();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return markDoneMsg + showBreakLine() + taskDetails;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * Generates and prints the delete message when a task is being deleted."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     * @param task that is being deleted."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hogantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showDelete(Task task) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String deleteMsg \u003d \"No worries, the following task has been deleted from your list:\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String taskDetails \u003d \"  [\" + task.getStatusIcon() + \"] \" + task.getDescription();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return deleteMsg + showBreakLine() + taskDetails + showBreakLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showSorted() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"Brilliant! Your list has been sorted alphabetically!\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public String showSortedDateTime() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"Stupendous! Your list has been sorted by date and time!\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public static String showBreakLine() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return \"\\n-------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 150
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #011627;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #2ec4b6; -fx-background-radius: 10;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hogantan": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #011627;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"567.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"25.0\" prefWidth\u003d\"505.0\" promptText\u003d\"Type command here\" AnchorPane.bottomAnchor\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"530.0\" layoutY\u003d\"566.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"7.0\" prefWidth\u003d\"56.0\" style\u003d\"-fx-background-color: #2ec4b6;\" text\u003d\"Send\" textAlignment\u003d\"JUSTIFY\" textFill\u003d\"#fdfffc\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"200.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #011627;\" vvalue\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"587.0\" style\u003d\"-fx-background-color: #011627;\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hogantan": 24
    }
  },
  {
    "path": "src/test/data/dummyText.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 0 | A Valid ToDo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 0 | A Valid Deadline | 24 August 2020 08:00 PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "src/test/data/storageValidTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "T | 1 | buy books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "D | 1 | eat bread | 6 May 2020 04:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "E | 0 | eat dinner | 12 December 2018 11:00 PM to 01:00 AM"
      }
    ],
    "authorContributionMap": {
      "hogantan": 3
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_nullInput_throwsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(\"Description\", null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_validInput_returnsValidDateTime() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Description\", \"2020-02-02 2020\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[D][\\u2718] Description (by: 2 February 2020 08:20 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Deadline(\"Description\", \"2020-20-20 2020\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidTime_throwsException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Deadline(\"Description\", \"2020-02-02 3000\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_validInput_returnsTxtFormat() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Description\", \"2020-02-02 2020\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"D | 0 | Description | 2 February 2020 08:20 PM\", deadline.toTxtFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullInput_throwsException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Deadline.parse(txtArray));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validInput_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"D\", \"0\", \"A Valid Description\", \"24 August 2020 08:00 PM\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline deadline \u003d Deadline.parse(txtArray);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[D][\\u2718] A Valid Description (by: 24 August 2020 08:00 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 50
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeInvalidUserInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_nullInput_throwsException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Event(\"Description\", null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_validInput_returnsValidDateTime() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event deadline \u003d new Event(\"Description\", \"2020-02-02 2020-2121\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[E][\\u2718] Description (at: 2 February 2020 08:20 PM to 09:21 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Event(\"Description\", \"2020-20-20 2020-2121\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void convertDateTime_invalidTime_throwsException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeInvalidUserInputException.class, () -\u003e new Event(\"Description\", \"2020-02-02 3000-3000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_validInput_returnsTxtFormat() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d new Event(\"Description\", \"2020-02-02 2020-2121\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"E | 0 | Description | 2 February 2020 08:20 PM to 09:21 PM\", event.toTxtFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullInput_throwsException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Event.parse(txtArray));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validInput_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"D\", \"0\", \"A Valid Description\", \"24 August 2020 08:00 PM to 01:00 AM\"};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event event \u003d Event.parse(txtArray);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[E][\\u2718] A Valid Description (at: 24 August 2020 08:00 PM to 01:00 AM)\", event.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 49
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.exception.DukeIllegalCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_emptyUserInput_returnsIllegalCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_blankUserInput_returnsIllegalCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\" \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_unknownCommand_returnsIllegalCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(DukeIllegalCommandException.class, () -\u003e parser.parseCommand(\"unknown blah blah\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_listCommand_returnsListCommand() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"list\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ListCommand\", output.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_byeCommand_returnsByeCommand() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"bye\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ByeCommand\", output.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_toDoCommand_returnsToDoCommand() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"todo arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"ToDoCommand\", output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deadlineCommand_returnsDeadlineCommand() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"deadline arguments /by 2020-20-20 2020\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DeadlineCommand\", output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_eventCommand_returnsEventCommand() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"event arguments /at 2020-20-20 2020-2020\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"EventCommand\", output.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_doneCommand_returnsDoneCommand() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"done 1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DoneCommand\", output.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_deleteCommand_returnsDeleteCommand() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Parser parser \u003d createDummyParser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Command output \u003d parser.parseCommand(\"delete 1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"DeleteCommand\", output.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_unknownFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"unknowncommand\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"unknowncommand\", output);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_atFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"at\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"at\", output);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_byFollowUpCommand_returnsCommandKeyword() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String output \u003d Parser.parseFollowUpCommand(\"by\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"by\", output);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public Parser createDummyParser() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Parser(new TaskList(new ArrayList\u003c\u003e()), new Storage(\"data/dummyText.txt\"), new Ui());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 105
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Storage(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load_validTxtFile() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/storageValidTest.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        TaskList dummyTaskList \u003d createDummyTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.loadTaskList(dummyTaskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(3, dummyTaskList.getTotalTask());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(0).toTxtFormat(), \"T | 1 | buy books\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(1).toTxtFormat(), \"D | 1 | eat bread | 6 May 2020 04:00 AM\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(dummyTaskList.getTask(2).toTxtFormat(), \"E | 0 | eat dinner | \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "                + \"12 December 2018 11:00 PM to 01:00 AM\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void load_nonExistentFile() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/doesNotExist.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        TaskList dummyTaskList \u003d createDummyTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.loadTaskList(dummyTaskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(0, dummyTaskList.getTotalTask());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void save_nullTask() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/storageValidTest.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e storage.saveTask(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void save_validTask() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        emptyDummyText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String validTxtFile \u003d \"data/dummyText.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Storage storage \u003d new Storage(validTxtFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo validToDo \u003d createDummyToDo();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Deadline validDeadline \u003d createDummyDeadline();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Event validEvent \u003d createDummyEvent();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validToDo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validDeadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        storage.saveTask(validEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        Scanner s \u003d new Scanner(new File(validTxtFile));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String todo \u003d s.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String deadline \u003d s.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String event \u003d s.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | A Valid ToDo\", todo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"D | 0 | A Valid Deadline | 24 August 2020 08:00 PM\", deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"E | 0 | A Valid Event | 24 August 2020 08:00 PM to 01:00 AM\", event);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private TaskList createDummyTaskList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private ToDo createDummyToDo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new ToDo(\"A Valid ToDo\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Deadline createDummyDeadline() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Deadline(\"A Valid Deadline\", \"2020-08-24 2000\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private Event createDummyEvent() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        return new Event(\"A Valid Event\", \"2020-08-24 2000-0100\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    private void emptyDummyText() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        File dummyText \u003d new File(\"data/dummyText.txt\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(dummyText);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        fw.write(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 95
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "import data.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_emptyDescription_returnsEmptyDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | \", toDo.toTxtFormat());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void toTxtFormat_nonEmptyDescription_returnsDescription() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"Description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"T | 0 | Description\", toDo.toTxtFormat());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_nullTxtArray_throwsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ToDo.parse(txtArray));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    public void parse_validTxtArray_returnsToDo() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        String[] txtArray \u003d {\"T\", \"1\", \"A Valid Description\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        ToDo toDo \u003d ToDo.parse(txtArray);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "        assertEquals(\"[T][\\u2713] A Valid Description\", toDo.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hogantan": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done123"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 123"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done bye"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list123"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list 123"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline2 /byThisDay"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline fake deadline3 /atThatDay"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event2 /atThisDay"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event fake event3 /byThatDay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "SET MY_PATH\u003d \"C:\\Users\\hogan\\Desktop\\Computer Science\\CS2103T Y2S1\\iP\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "if not exist %MY_PATH%\\bin mkdir %MY_PATH%\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hogantan": 4
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "cp EXPECTED.TXT.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "hogantan": 3
    }
  },
  {
    "path": "text-ui-test/testidea.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test todo command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command (out of bound)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt done command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test done command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test in apt list command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space by)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test deadline command (w/o space at)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space at)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test event command (w/o space by)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test list command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test delete command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete done command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete delete command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete todo command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete event command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test incomplete deadline command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test empty command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hogantan"
        },
        "content": "test bye"
      }
    ],
    "authorContributionMap": {
      "hogantan": 39
    }
  }
]
