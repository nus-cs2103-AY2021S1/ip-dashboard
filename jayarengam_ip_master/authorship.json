[
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Task taskToAdd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    AddCommand(Task taskToAdd) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskToAdd \u003d taskToAdd;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: AddCommand already executed\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskList.addTask(taskToAdd);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printTaskAddingMessage(taskToAdd, taskList.getSize());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        storage.saveListToFile(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 27
    }
  },
  {
    "path": "src/main/java/Cartona.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Cartona {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Cartona() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.storage \u003d new Storage(\"./saved/tasklist.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Cartona cartona \u003d new Cartona();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        cartona.taskList \u003d cartona.storage.getListFromStorage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String nextInput \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String nextLine \u003d ui.getNextLineInput();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                Command nextCommand \u003d cartona.parser.parseCommand(nextLine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                nextCommand.execute(cartona.taskList, cartona.ui, cartona.storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (nextCommand.isExitCmd())  {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } catch (CartonaException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 39
    }
  },
  {
    "path": "src/main/java/CartonaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class CartonaException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    CartonaException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 5
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    boolean isExitCmd();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 6
    }
  },
  {
    "path": "src/main/java/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static TaskDate parseDate(String dateString) throws InvalidTaskTimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(dateString,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new TaskDate(dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new InvalidTaskTimeException(\"Date/time formatting error: \" + e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static TaskDate getRange(String dateString, boolean startOrEnd) throws InvalidTaskTimeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] dateAndTimes \u003d dateString.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] dates \u003d dateAndTimes[0].split(\"/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int year \u003d Integer.valueOf(dates[0]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int month \u003d Integer.valueOf(dates[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int day \u003d Integer.valueOf(dates[2]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (startOrEnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new TaskDate(LocalDate.of(year, month, day)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    .atTime(LocalTime.parse(dateAndTimes[1],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                                            DateTimeFormatter.ofPattern(\"HHmm\"))));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new TaskDate(LocalDate.of(year, month, day)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    .atTime(LocalTime.parse(dateAndTimes[2],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                            DateTimeFormatter.ofPattern(\"HHmm\"))));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new InvalidTaskTimeException(\"Date/time formatting error: \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static TaskDate parseRangeFromStorage(String storedString, boolean startOrEnd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] dateAndTime \u003d storedString.split(\" - \");;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (startOrEnd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new TaskDate(LocalDateTime.parse(dateAndTime[0],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new TaskDate(LocalDate.parse(dateAndTime[0],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    .atTime(LocalTime.parse(dateAndTime[1],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                            DateTimeFormatter.ofPattern(\"HHmm\"))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public static TaskDate parseDateFromStorage(String storedString) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] dateAndTime \u003d storedString.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(storedString,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                                     DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return new TaskDate(dateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 65
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private TaskDate dueTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Deadline(String name, boolean isDone, TaskDate dueTime) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(name, isDone, \"D\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.dueTime \u003d dueTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), this.dueTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getAbbreviatedString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int isDoneRep \u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return String.format(\"%s | %d | %s | %s\", this.type, isDoneRep, this.name, this.dueTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 19
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private int taskIdToDelete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    DeleteCommand(int taskIdToDelete) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskIdToDelete \u003d taskIdToDelete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: DeleteCommand already executed\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Task deletedTask \u003d taskList.getTask(taskIdToDelete);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskList.deleteTask(taskIdToDelete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printTaskDeletionMessage(deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        storage.saveListToFile(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 28
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class DoneCommand implements Command{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private int taskIdToComplete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    DoneCommand(int taskIdToComplete) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskIdToComplete \u003d taskIdToComplete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: DoneCommand already executed\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskList.completeTask(taskIdToComplete);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Task completedTask \u003d taskList.getTask(taskIdToComplete);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printTaskDoneMessage(completedTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        storage.saveListToFile(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 27
    }
  },
  {
    "path": "src/main/java/EmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class EmptyTaskDescriptionException extends InvalidInputException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    EmptyTaskDescriptionException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private TaskDate start;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private TaskDate end;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Event(String name, boolean isDone, TaskDate start, TaskDate end) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(name, isDone,\"E\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return String.format(\"[E]%s (at: %s - %s)\", super.toString(), this.start, this.end.getTime());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getAbbreviatedString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int isDoneRep \u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return String.format(\"%s | %d | %s | %s - %s\", this.type, isDoneRep, this.name,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    this.start.toString(), this.end.getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 22
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    ExitCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: PrintErrorCommand already executed\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 22
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class InvalidInputException extends CartonaException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    InvalidInputException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 5
    }
  },
  {
    "path": "src/main/java/InvalidTaskTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class InvalidTaskTimeException extends InvalidInputException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    InvalidTaskTimeException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 5
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Task parseTaskToAdd(String consoleArg) throws EmptyTaskDescriptionException, InvalidTaskTimeException,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            UnknownCommandException, InvalidInputException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (consoleArg.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new UnknownCommandException(\"Error: Missing task type keyword\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] parsedArr \u003d consoleArg.substring(4).split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String keyword \u003d parsedArr[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (keyword.equals(\"todo\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String name \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            for (int i \u003d 1; i \u003c parsedArr.length; i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (i !\u003d parsedArr.length - 1) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    name +\u003d parsedArr[i] + \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    name +\u003d parsedArr[i];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new EmptyTaskDescriptionException(\"Error: Empty task name not allowed\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new Todo(name, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else if (keyword.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String name \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String time \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            boolean nameOrTime \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            for (int i \u003d 1; i \u003c parsedArr.length; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (nameOrTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    if (parsedArr[i].contains(\"/by\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                            throw new EmptyTaskDescriptionException(\"Error: Empty task name not allowed\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        nameOrTime \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        name +\u003d parsedArr[i] + \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    if (i !\u003d parsedArr.length - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        time +\u003d parsedArr[i] + \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        time +\u003d parsedArr[i];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new EmptyTaskDescriptionException(\"Error: Empty task name not allowed\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (time.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new InvalidTaskTimeException(\"Error: Empty task name not allowed\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            TaskDate dateTime \u003d DateParser.parseDate(time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new Deadline(name, false, dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else if (keyword.equals(\"event\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String name \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String timeRange \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            boolean nameOrTime \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            for (int i \u003d 1; i \u003c parsedArr.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (nameOrTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    if (parsedArr[i].contains(\"/at\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        nameOrTime \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        name +\u003d parsedArr[i] + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    if (i !\u003d parsedArr.length - 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        timeRange +\u003d parsedArr[i] + \" \";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                        timeRange +\u003d parsedArr[i];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (name.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new EmptyTaskDescriptionException(\"Error: Empty task name not allowed\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (timeRange.equals(\"\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new InvalidTaskTimeException(\"Error: Please input a time range\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            TaskDate startDateTime \u003d DateParser.getRange(timeRange, true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            TaskDate endDateTime \u003d DateParser.getRange(timeRange, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new Event(name, false, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new UnknownCommandException(\"Error: Invalid Event Type, please try again.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Command parseCommand(String userInput) throws InvalidInputException, UnknownCommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        switch (words[0]) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case (\"bye\"):"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case (\"list\"):"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new PrintListCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case (\"add\"):"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            Task taskToAdd \u003d parseTaskToAdd(userInput);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new AddCommand(taskToAdd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case (\"delete\"):"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    throw new InvalidInputException(\"Error: No number argument after \u0027delete\u0027\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                int taskIdToDelete \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new DeleteCommand(taskIdToDelete);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new InvalidInputException(\"Error: Invalid number argument after \u0027delete\u0027\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        case (\"done\"):"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (words.length \u003c 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    throw new InvalidInputException(\"Error: No number argument after \u0027delete\u0027\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                int taskIdToComplete \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new DoneCommand(taskIdToComplete);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                throw new InvalidInputException(\"Error: Invalid number argument after \u0027delete\u0027\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        throw new InvalidInputException(\"Error: Invalid command keyword!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Task parseFromStorage(String storageLine) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String[] taskData \u003d storageLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String taskType \u003d taskData[0];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        boolean taskIsDone \u003d Integer.valueOf(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String taskName \u003d taskData[2];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (!taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            String taskTime \u003d taskData[3];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                TaskDate dueTime \u003d DateParser.parseDateFromStorage(taskTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new Deadline(taskName, taskIsDone, dueTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                TaskDate startDate \u003d DateParser.parseRangeFromStorage(taskTime, true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                TaskDate endDate \u003d DateParser.parseRangeFromStorage(taskTime, false);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                return new Event(taskName, taskIsDone, startDate, endDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return new Todo(taskName, taskIsDone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 154
    }
  },
  {
    "path": "src/main/java/PrintErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class PrintErrorCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    PrintErrorCommand(String errorMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: PrintErrorCommand already executed\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printErrorMessage(errorMessage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jayarengam": 25
    }
  },
  {
    "path": "src/main/java/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class PrintListCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    PrintListCommand() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws CartonaException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(\"Error: PrintListCommand already executed\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean isExitCmd() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 22
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static String horizontalLine \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private String pathString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Storage(String pathString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.pathString \u003d pathString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public TaskList getListFromStorage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Path path \u003d Path.of(pathString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        File savedListFile \u003d new File(pathString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            boolean doesSavedListExist \u003d savedListFile.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            if (!doesSavedListExist) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                List\u003cString\u003e contents \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                if (contents.size() \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    System.out.printf(horizontalLine + \"     Found an existing list at %s%n\" + horizontalLine,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                            path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    System.out.printf(horizontalLine + \"     Found an existing list, but it was empty!%n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                        horizontalLine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                for (String taskLine : contents) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                    taskList.addTask(parser.parseFromStorage(taskLine));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                System.out.printf(horizontalLine + \"     Existing list not found, creating new list\\n\" + horizontalLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            // FOR TESTING, TO BE DISCARDED BEFORE RELEASE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            System.out.println(\"     Encoding error: creating new list\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            Path listFilePath \u003d Path.of(pathString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                new PrintWriter(pathString).close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            } catch (IOException exception) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                exception.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void saveListToFile(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String stringToWrite \u003d taskList.getListForStorage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Path listFilePath \u003d Path.of(pathString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            new PrintWriter(pathString).close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        try (BufferedWriter writer \u003d Files.newBufferedWriter(listFilePath, StandardCharsets.UTF_8,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                StandardOpenOption.WRITE)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            writer.write(stringToWrite, 0, stringToWrite.length());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 87
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.type \u003d \" \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Task(String name, boolean isDone, String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return String.format(\"[✓] %s\", name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            return String.format(\"[✗] %s\", name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getAbbreviatedString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int isDoneRep \u003d this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return String.format(\"%s | %d | %s\", this.type, isDoneRep, this.name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public boolean checkIfDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 39
    }
  },
  {
    "path": "src/main/java/TaskDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class TaskDate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    TaskDate(LocalDate date, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.dateTime \u003d date.atTime(LocalTime.parse(time,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                    DateTimeFormatter.ofPattern(\"HHmm\")));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    TaskDate(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.dateTime.toLocalDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.dateTime.toLocalTime().format("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                             DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 30
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static String horizontalLine \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskArrayList.add(newTask);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        taskArrayList.remove(taskNum - 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.taskArrayList.get(taskNum - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void completeTask(int taskNum) throws CartonaException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        Task toComplete \u003d taskArrayList.get(taskNum - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        if (toComplete.checkIfDone()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            throw new CartonaException(String.format(\"Error: Task %d is already done.\", taskNum));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        toComplete.complete();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String printedListString \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        for (Task task: taskArrayList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            printedListString +\u003d String.format(\"     %d.%s%n\", counter, task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return printedListString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getListForStorage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String stringToWrite \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.getSize(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            Task task \u003d this.getTask(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "            stringToWrite +\u003d task.getAbbreviatedString() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return stringToWrite;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return this.taskArrayList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 57
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Todo(String name, boolean isDone) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(name, isDone, \"T\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 10
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    private static String horizontalLine \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public String getNextLineInput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(\"%s     %s%n%s\", horizontalLine, errorMessage, horizontalLine);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(\"%s     Hello! I\u0027m Cartona.%n     What can I do for you?%n%s\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                            horizontalLine, horizontalLine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printTaskAddingMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(\"%s     Got it. I\u0027ve added this task:%n       %s%n     \" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                            \"Now you have %d tasks in the list.%n%s\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                horizontalLine, task,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                                taskListSize, horizontalLine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printTaskDeletionMessage(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String deleteMsg \u003d String.format(\"     Noted. I\u0027ve removed this task:%n       %s%n\", task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String countMsg \u003d String.format(\"     Now you have %d tasks in the list.%n\", taskListSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(horizontalLine + deleteMsg + countMsg + horizontalLine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printTaskDoneMessage(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String completion \u003d \"     Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "                String.format(\"       %s%n\", task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(horizontalLine + completion + horizontalLine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String toPrint \u003d horizontalLine + \"     Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        toPrint +\u003d taskList.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        toPrint +\u003d horizontalLine;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(toPrint);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        String toPrint \u003d horizontalLine + \"     List saved! Goodbye!%n\" + horizontalLine;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        System.out.printf(toPrint);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 55
    }
  },
  {
    "path": "src/main/java/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "public class UnknownCommandException extends InvalidInputException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    UnknownCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "del 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add deadline return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add deadline return book /by June 6th"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add event project meeting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add todo join sports club"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "del 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add todo borrow book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add deadline do homework /by no idea??? :)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "add todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "java -classpath ..\\bin Cartona \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jayarengam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jayarengam"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "jayarengam": 4,
      "-": 19
    }
  }
]
