[
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "todo hello world"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "done"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "todo eggs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "todo eggs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "done"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deadline egges /by 7pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "event something /at 2020/12/01"
      }
    ],
    "authorContributionMap": {
      "urieltan": 8
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final String FILEPATH \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param filePath Path for the Duke save file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        //storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        taskList \u003d Storage.loadTasks(FILEPATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to run the Duke program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        Ui.printWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        while(true){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String input \u003d ui.getInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String[] command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                if(command[0].contentEquals(\"bye\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printBye();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"list\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"remove\")){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    String indexStr \u003d input.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    int index \u003d Integer.parseInt(indexStr) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printRemovedTask(t, taskList.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"done\")){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    String indexStr \u003d input.replaceAll(\"[^0-9]\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    int index \u003d Integer.parseInt(indexStr) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    taskList.get(index).setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printDoneTask(taskList.get(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"find\") ){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    TaskList foundList \u003d taskList.find(command[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printFoundList(foundList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"todo\") ){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Todo(command[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printAddedTask(newTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printException(\"Todo cannot be empty.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"deadline\")){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Deadline(command[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printAddedTask(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printException(\"Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].startsWith(\"event\")){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Event(command[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printAddedTask(newTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printException(\"Event cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Storage.saveTasks(FILEPATH, taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                catch (IOException e){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    Ui.printException(\"Unable to save to file.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            catch(Exception e){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                Ui.printException(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param args List of arguments."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        new Duke(FILEPATH).run();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 107,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Parser is a utility class that helps to decode Duke text commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Utility method to extract time from the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void parseTime(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Utility method to parse text commands from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param command   Command that the User has entered into Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return  A String array with the command being the first string and the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     *          as the second string is there is a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static String[] parseCommand(String command){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return command.trim().split(\" \",2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 23
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Storage is a utility class that handles the saving and loading of tasks for the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Saves the a TaskList into a specified file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param path  Path of the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param taskList List of tasks to be saved."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @throws IOException Throws IOException when it encounters an IO error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void saveTasks(String path, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for(Task t : taskList){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            bw.write(t.encode());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            bw.newLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Returns a list of Tasks loaded from the specified path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * If the file is not found, an empty list of Tasks is returned."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param path Path of where the file is."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return The list of tasks loaded from the path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static TaskList loadTasks(String path){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        File f \u003d new File(path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Scanner fileReader \u003d new Scanner(f);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            while(fileReader.hasNextLine()){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                String[] command \u003d Parser.parseCommand(fileReader.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                if(command[0].contentEquals(\"done\")){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    int index \u003d taskList.size() - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    taskList.get(index).setDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"todo\")){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Todo(command[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printFileError(\"Error encountered in save file.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].contentEquals(\"deadline\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Deadline(command[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printFileError(\"Error encountered in save file.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                else if(command[0].startsWith(\"event\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Task newTask \u003d new Event(command[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        taskList.add(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    catch(EmptyStringException e){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                        Ui.printFileError(\"Error encountered in save file.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Ui.printFileError(\"Previous file not found, creating a new save file\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 79
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * TaskList is a data structure to hold a list of Tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public TaskList find(String searchString){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        TaskList foundList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for(Task t : this){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            if(t.toString().contains(searchString)){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                foundList.add(t);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return foundList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 18
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Ui is a class that provides interaction with the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Creates an instance of the Ui."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print the welcome message for the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printWelcome(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"What can I do for you today?\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print the line separator."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printLineSeparator(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"----------------------------------------------------\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print a newly added Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param t Newly added Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printAddedTask(Task t){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + \"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\\t\" + t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print a removed Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param t Removed Task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param taskListSize Remaining number of Tasks in Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printRemovedTask(Task t, int taskListSize){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\\t\" + t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + \"Now you have \" + taskListSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print a done message for a Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param t Task that is done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printDoneTask(Task t){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\\t\" + t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print an error message for files."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param errorMessage Error message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printFileError(String errorMessage){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + errorMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print error message for exceptions."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param errorMessage Error message"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printException(String errorMessage){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + errorMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print bye."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printBye(){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        System.out.println(\"\\t\" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print the list of Tasks."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param taskList List of Tasks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printTaskList(TaskList taskList){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to print the list found."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param foundList The list found."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public static void printFoundList(TaskList foundList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        for(int i \u003d 0; i \u003c foundList.size(); i++){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            System.out.println(\"\\t\" + (i + 1) + \". \" + foundList.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        printLineSeparator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Method to get input from the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return The next line of the user input."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String getInput(){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 129
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private LocalDate dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private boolean isParsedDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Deadline(String line) throws EmptyStringException{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(line.isBlank()){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new EmptyStringException(\"Deadline cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String[] command \u003d line.split(\" \\\\/by \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.item \u003d command[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.time \u003d command[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.isParsedDate \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            this.dateTime \u003d LocalDate.parse(this.time, format);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            this.isParsedDate \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (Exception e){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            //Date failed to parse"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        taskType \u003d \"D\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String encoded \u003d \"deadline \" + item + \" /by \" + time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            encoded \u003d encoded + \"\\n\" + \"done\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return encoded;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String dateString \u003d isParsedDate ? dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                : time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return super.toString() + \" (by: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + dateString"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 48
    }
  },
  {
    "path": "src/main/java/task/EmptyStringException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class EmptyStringException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public EmptyStringException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 7
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private LocalDate dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    private boolean isParsedDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Event(String line) throws EmptyStringException{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(line.isBlank()){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new EmptyStringException(\"Event cannot be empty.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String[] command \u003d line.split(\" \\\\/at \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.item \u003d command[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.time \u003d command[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.isParsedDate \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            this.dateTime \u003d LocalDate.parse(this.time, format);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            this.isParsedDate \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (Exception e){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            //Date failed to parse"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        taskType \u003d \"E\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String encoded \u003d \"event \" + item + \" /at \" + time;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            encoded \u003d encoded + \"\\n\" + \"done\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return encoded;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String dateString \u003d isParsedDate ? dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                : time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return super.toString() + \" (at: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + dateString"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 48
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Task is a class that provides an abstraction for tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    protected String item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    protected Task(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.item \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.taskType \u003d \"-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    protected Task(String item) throws EmptyStringException{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(item.isBlank()){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            throw new EmptyStringException(\"Task cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Set this task as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public abstract String encode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Converts the Task to a string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * String will be in the form:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * \u003cbr\u003e [Type] [isDone?] item to be done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return A string representing the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String typeString \u003d \"[\" + taskType + \"]\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String doneString \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(isDone){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            doneString \u003d \"[✗]\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return typeString + \" \" + doneString + \" \" + item;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 51
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": " * Todo is the basic verison of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Constructor for Todo class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @param item Item to be done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @throws EmptyStringException if an empty string is the input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public Todo(String item) throws EmptyStringException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        super(item);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        taskType \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * Encodes the Todo task back into the text command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     * @return The text command used create this Todo task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public String encode() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        String encoded \u003d \"todo \" + item;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        if(this.isDone){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            encoded \u003d encoded + \"\\n\" + \"done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        return encoded;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 29
    }
  },
  {
    "path": "src/test/java/DukeEncodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class DukeEncodeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 10
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.EmptyStringException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "urieltan"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void encode(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Task task \u003d new Todo(\"Green eggs and ham\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String encoded \u003d task.encode();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            assertEquals(\"todo Green eggs and ham\", encoded);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (EmptyStringException e){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void todo_normalInput_writtenCorrectly(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Task task \u003d new Todo(\"Green eggs and ham\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            String taskOutput \u003d task.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            assertEquals(taskOutput, \"[T] [✗] Green eggs and ham\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (EmptyStringException e){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    public void todo_emptyInput_exceptionThrown(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            Task task \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "urieltan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        catch (EmptyStringException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "urieltan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "urieltan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "urieltan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "urieltan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "urieltan": 42
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "urieltan"
        },
        "content": "todo eggs"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "urieltan"
        },
        "content": "deadline egg /by 20"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "urieltan"
        },
        "content": "event egger /at 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "urieltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "urieltan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "urieltan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "urieltan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "urieltan": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "urieltan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java ../src/main/java/task/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "urieltan": 1,
      "-": 37
    }
  }
]
