[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    archiveBaseName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "junhui-phoon": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static String filePath \u003d home + \"/Desktop/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Storage storeFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private boolean isGui \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private boolean hasExit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Initialize Duke, UI and load saved file into a TaskList object. If save file is empty, a new"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * TaskList object will be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param filePath hard-coded File Path of the saved file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.storeFile \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            tasks \u003d new TaskList(storeFile.loadFile());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            ui.showErrorMsg(e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        isGui \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Main execution of Duke Chat bot for CLI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        ui.printMsg(ui.startupMsg());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String[] userInputArray;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        boolean validInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            switch (userInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListMsg());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskList(tasks));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListMsg());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskList(tasks));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showListDoneAskMsg());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            int[] tasksArray \u003d Parser.parseMultipleTasks(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            TaskList doneList \u003d new TaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            for (int index : tasksArray) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    if (index \u003e tasks.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                        throw new DukeException(\"This task #\" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    task.setDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    doneList.addTask(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (!doneList.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showListDoneMsg());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showTaskList(doneList));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } while (!validInput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.printMsg(ui.showFindPromptMsg());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                throw new DukeException(\"Yo! Enter a keyword.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            TaskList foundTasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            foundTasks \u003d tasks.findTasks(userInput);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (!foundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showFoundMsg(userInput));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showTaskList(foundTasks));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showNotFoundMsg(userInput));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } while (!validInput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskAddAskMsg());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            throw new DukeException(\"Yo! Task details are missing.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        Task toDo \u003d new Todo(userInput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        tasks.addTask(toDo);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showTaskAddedMsg(toDo));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } while (!validInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskAddAskMsg());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        userInputArray \u003d Parser.parseDetails(userInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        Task deadLine \u003d new Deadline(userInputArray[0], userInputArray[1]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        tasks.addTask(deadLine);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showTaskAddedMsg(deadLine));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } while (!validInput);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                do {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskAddAskMsg());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        userInputArray \u003d Parser.parseDetails(userInput);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        Task event \u003d new Event(userInputArray[0], userInputArray[1]);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        tasks.addTask(event);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showTaskAddedMsg(event));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        validInput \u003d false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } while (!validInput);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showListMsg());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showTaskList(tasks));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.printMsg(ui.showTaskDeleteAskMsg());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            TaskList deletedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            int[] tasksArray \u003d Parser.parseMultipleTasks(userInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            for (int index : tasksArray) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    if (index \u003e tasks.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                        throw new DukeException(\"This task #\" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    tasks.removeTask(index);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    deletedTasks.addTask(task);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                } catch (DukeException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (!deletedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showTaskDeleteMsg());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                ui.printMsg(ui.showTaskList(deletedTasks));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            validInput \u003d false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } while (!validInput);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.printMsg(ui.showHelp());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Unrecognised Command :(, type \u0027help\u0027 for available commands.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.printMsg(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        ui.printMsg(ui.showByeMsg());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Main execution of Duke Chat bot for GUI"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void runGui() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String[] GuiInputArray;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String[] userInputArray;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        userInput \u003d ui.readInput(isGui);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        GuiInputArray \u003d Parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        switch (GuiInputArray[0]) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            ui.setGuiOutput(ui.showByeMsg());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            hasExit \u003d true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showListMsg() + \"\\n\" + ui.showTaskList(tasks));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        throw new DukeException(\"Yo! Enter the task number(s).\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    int[] tasksArray \u003d Parser.parseMultipleTasks(userInput);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    TaskList doneList \u003d new TaskList();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    for (int index : tasksArray) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (index \u003e tasks.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                throw new DukeException(\"This task #\" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            task.setDone();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            doneList.addTask(task);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (!doneList.isEmpty()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.setGuiOutput(ui.showListDoneMsg() + \"\\n\" + ui.showTaskList(doneList));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        throw new DukeException(\"Yo! Enter a keyword.\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        throw new DukeException(\"Yo! Enter a keyword.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    TaskList foundTasks;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    foundTasks \u003d tasks.findTasks(userInput);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (!foundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.setGuiOutput(ui.showFoundMsg(userInput) + \"\\n\" + ui.showTaskList(foundTasks));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.setGuiOutput(ui.showNotFoundMsg(userInput));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Yo! Task details are missing.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Yo! Task details are missing.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                Task toDo \u003d new Todo(userInput);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                tasks.addTask(toDo);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showTaskAddedMsg(toDo));"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Yo! Command Syntax Error. \u0027\u003cDetails\u003e /by or /at \u003cdd/MM/yy [HH:MM]\u003e\u0027\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                userInputArray \u003d Parser.parseDetails(userInput);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                Task deadLine \u003d new Deadline(userInputArray[0], userInputArray[1]);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                tasks.addTask(deadLine);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showTaskAddedMsg(deadLine));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Yo! Command Syntax Error. \u0027\u003cDetails\u003e /by or /at \u003cdd/MM/yy [HH:MM]\u003e\u0027\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                userInputArray \u003d Parser.parseDetails(userInput);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                Task event \u003d new Event(userInputArray[0], userInputArray[1]);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                tasks.addTask(event);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showTaskAddedMsg(event));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showListEmptyMsg());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (GuiInputArray.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        throw new DukeException(\"Yo! Enter the task numbers(s).\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    userInput \u003d GuiInputArray[1];"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    TaskList deletedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    int[] tasksArray \u003d Parser.parseMultipleTasks(userInput);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    for (int index : tasksArray) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            if (index \u003e tasks.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                                throw new DukeException(\"This task #\" + index + \" does not exist.\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            Task task \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            tasks.removeTask(index);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            deletedTasks.addTask(task);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    if (!deletedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        ui.setGuiOutput(ui.showTaskDeleteMsg() + \"\\n\" + ui.showTaskList(deletedTasks));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                storeFile.saveFile(tasks);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            ui.setGuiOutput(ui.showHelp());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                throw new DukeException(\"Unrecognised Command :(, type \u0027help\u0027 for available commands.\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                ui.setGuiOutput(ui.showErrorMsg(e));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Duke is instantiated here."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        runGui();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return ui.getGuiOutput();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public boolean hasExit() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return this.hasExit;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "junhui-phoon": 483
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.ui.Gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 11
    }
  },
  {
    "path": "src/main/java/duke/dukeException/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.dukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * This class handles the custom exceptions pertaining to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor for Duke Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param errorMsg the custom error message caught in Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Returns Duke error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return String format of error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 26
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * This class handles the user inputs of task details."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * User Input is parsed here for processing, enable Event and Deadline objects to be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param inputString User Input string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return A string array that consists of Task Details and DateTime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @throws DukeException If details and/or date is missing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static String[] parseDetails(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String[] splitStrings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (inputString.contains(\"/by\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            splitStrings \u003d inputString.split(\" /by \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (splitStrings.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                throw new DukeException(\"Yo! Details/Time are missing.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return splitStrings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } else if (inputString.contains(\"/at\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            splitStrings \u003d inputString.split(\" /at \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (splitStrings.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                throw new DukeException(\"Yo! Details/Time are missing.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return splitStrings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    \"Yo! Command Syntax Error. \u0027\u003cDetails\u003e /by or /at \u003cdd/MM/yy [HH:MM]\u003e\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * User Input is parsed here for processing, enable multiple task numbers to be marked as done or"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * deleted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param inputString User Input string; task numbers."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return An integer array that consists of task number(s)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @throws DukeException If integer array is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static int[] parseMultipleTasks(String inputString) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        int[] taskNumbers;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (inputString.isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"Yo! Enter the task numbers(s).\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            taskNumbers \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    Arrays.stream(inputString.split(\" \"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            .sorted(Collections.reverseOrder())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            .mapToInt(Integer::parseInt)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                            .toArray();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"Yo! Enter the task numbers(s) correctly.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return taskNumbers;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * User Command and Details Input is parsed here for processing, to split command keyword and details."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param inputString User Input string; User Command and Details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return A string array with command at index 0 and details at index 1."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static String[] parseCommand(String inputString) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String[] splitStrings;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        splitStrings \u003d inputString.split(\" \", 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return splitStrings;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 76
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * This class handles the saving and loading of the file that contains the TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor for storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param filePath the file path of the save file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method that loads and reads the save file and output the Tasks into an ArrayList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return ArrayList of Tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @throws DukeException If the save file is blank or syntax error exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                String[] line \u003d scanner.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                switch (line[0]) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    task \u003d new Todo(line[2]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    task \u003d new Deadline(line[2], line[3]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    task \u003d new Event(line[2], line[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    throw new DukeException(\"Failed to load tasks, check file for syntax errors\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                if (line[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    task.setDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"File Not Found.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method that saves the TaskList into the save file specified."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param list TaskList object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @throws DukeException If IOException occurs."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void saveFile(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            for (Task t : list.getList()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                fileWriter.write(t.toFile());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"Save to File Failed.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 94
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Represents a Deadline Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected DateTimeFormatter dateParser \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected DateTimeFormatter timeParser \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a Deadline task with description, Date and/or Time and task status indicating"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * whether it is completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param description Description of Deadline task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            String dateTimeSplit[] \u003d by.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (dateTimeSplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                time \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                time \u003d LocalTime.parse(dateTimeSplit[1], timeParser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            date \u003d LocalDate.parse(dateTimeSplit[0], dateParser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"Yo! DateTime format is wrong. \u003cdd/MM/yy [HH:MM]\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display Deadline object attributes in String format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Deadline task attributes in a string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + dateParser.format(date) + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return \"[D]\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + super.toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \" (by: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + dateParser.format(date)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + timeParser.format(time)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display Event object attributes in String format for the save file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Event task attributes in a string for the save file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"D | \" + getStatusCode() + \" | \" + description + \" | \" + by;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Represents an Event Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected DateTimeFormatter dateParser \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected DateTimeFormatter timeParser \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a Event task with description, Date and/or Time and task status indicating"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * whether it is completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param description Description of Event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            String dateTimeSplit[] \u003d at.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if (dateTimeSplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                time \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                time \u003d LocalTime.parse(dateTimeSplit[1], timeParser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            date \u003d LocalDate.parse(dateTimeSplit[0], dateParser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\"Yo! DateTime format is wrong. \u003cdd/MM/yy [HH:MM]\u003e\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display Event object attributes in String format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Event task attributes in a string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + dateParser.format(date) + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return \"[E]\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + super.toString()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \" (at: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + dateParser.format(date)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + timeParser.format(time)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display Event object attributes in String format for the save file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Event task attributes in a string for the save file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"E | \" + getStatusCode() + \" | \" + description + \" | \" + at;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Represents a generic task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a generic task with description and task status indicating whether it is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display the tick or cross symbol to indicate \u0027done\u0027 or \u0027not done\u0027 respectively."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return UTF-8 Tick or X symbol."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display/print \u00271\u0027 or \u00270\u0027 to indicate \u0027done\u0027 or \u0027not done\u0027 respectively in the save"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Integer \u00271\u0027 or \u00270\u0027."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public int getStatusCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return (isDone ? 1 : 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display/print task name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Task Name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to mark a task as \u0027done\u0027."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display the Task attributes in String format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Task attributes in a string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getTaskName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * An abstract method to allow different task types to output into the save file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Task attributes in a string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public abstract String toFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 71
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Represents a Task List."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a TaskList object with an existing ArrayList, for e.g. save file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param list ArrayList of Tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        this.tasks \u003d list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a TaskList object without any existing ArrayList, for e.g. no save file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to obtain a specified Task object from TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param id Specified task number from user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Task object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @throws DukeException If task number is out of bounds in the ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Task getTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return tasks.get(id - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            throw new DukeException(\" This task #\" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to add a new Task object into TaskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param t Task object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to remove a new Task object into TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param id Task number from user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void removeTask(int id) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        tasks.remove(id - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to indicate whether the TaskList is empty."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Boolean \u0027true\u0027 or \u0027false\u0027."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to return the size of the TaskList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return Integer, size of list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to retrieve the TaskList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return ArrayList of TaskList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public TaskList findTasks(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        TaskList foundTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            if(task.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                foundTasks.addTask(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 98
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Represents a To-do Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor of a To-Do task with description and task status indicating whether it is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param description Description of To-Do task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display To-do object attributes in String format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return To-Do task attributes in a string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to display To-do object attributes in String format for the save file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return To-Do task attributes in a string for the save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String toFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"T | \" + getStatusCode() + \" | \" + description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 30
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private static String input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        startupMsg();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String response \u003d duke.getResponse();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (duke.hasExit()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private void startupMsg() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(ui.guiStartupMsg(), dukeImage));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 73
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " * A class that handles all of user\u0027s and duke\u0027s interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private static String duke \u003d \"Duke\u003e \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private static String cmd \u003d \"\u003e\u003e \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private static String logo \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    private String guiOutput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Constructor to create a scanner object for user inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Displays a startup message with Duke\u0027s logo and greeting for CLI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String startupMsg() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        output +\u003d logo + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        output +\u003d duke + \"Hi I\u0027m Duke! \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        output +\u003d duke + \"What can I do for you? \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String guiStartupMsg() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        output +\u003d duke + \"Hi I\u0027m Duke! \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        output +\u003d duke + \"What can I do for you? \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A method to read user input using scanner object. Prints a shell-like prompt to indicate"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * waiting for user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @return String from user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String readInput(boolean isGui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        if (isGui) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            s \u003d MainWindow.getInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            System.out.print(cmd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            return scanner.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Show Duke\u0027s commands available to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showHelp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String s \u003d \"Here\u0027s what I can do:\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String msg \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                \"Available Commands: \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027todo\u0027 \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027deadline\u0027 \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027event\u0027 \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027list\u0027 \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027delete\u0027 \\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027find\u0027 \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                        + \"\u0027bye\u0027\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return s + msg;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Displays task list into readable format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param tasks TaskList object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        int idx \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        for (Task task : tasks.getList()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "             output +\u003d ++idx + \". \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * Displays the relevant error message when an exception is caught."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param e Caught Exception."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showErrorMsg(Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user to indicate the task list is empty."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showListEmptyMsg() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Your List is Empty.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A header message to indicate the task list below."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showListMsg() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Here\u0027s your Task List:\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user to prompt for input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showListDoneAskMsg() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Choose the task(s) to be marked as \u0027Done\u0027\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user that the tasks are marked done successfully."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showListDoneMsg() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Nice! I\u0027ve marked the following as done:\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user to prompt for input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showTaskAddAskMsg() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Enter task details:\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user that the tasks are added into the list successfully."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * @param task Task Object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showTaskAddedMsg(Task task) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"I\u0027ve added \u0027\" + task.getTaskName() + \"\u0027 to your Task List\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user to prompt for input."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showTaskDeleteAskMsg() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return \"Choose the task(s) to be deleted.\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user that the tasks are deleted from the list successfully."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showTaskDeleteMsg() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"I\u0027ve deleted the task(s) you specified:\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message when the user quits duke using the command \u0027bye\u0027."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showByeMsg() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"See you soon!\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A message to user to prompt for input for \u0027find\u0027 command."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showFindPromptMsg() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Enter a keyword:\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A header message to indicate the \u0027find\u0027 results."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showFoundMsg(String keyword) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Here are the task(s) matching the keyword: \" + keyword;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     * A header message to indicate no \u0027find\u0027 results."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String showNotFoundMsg(String keyword) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return duke + \"Found no task(s) matching the keyword: \" + keyword;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void printMsg(String msg) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void setGuiOutput(String output) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        guiOutput \u003d output;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public String getGuiOutput() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        return guiOutput;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 204
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 19
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  public void parseDetailsTest_correctStringWithTime_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    String[] s;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      s \u003d Parser.parseDetails(\"concert /at 02/04/20 19:30\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      assertArrayEquals(Parser.parseDetails(\"concert /at 02/04/20 19:30\"), s);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  public void parseDetailsTest_correctStringWithoutTime_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    String[] s;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      s \u003d Parser.parseDetails(\"concert /at 02/04/20\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      assertArrayEquals(Parser.parseDetails(\"concert /at 02/04/20\"), s);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  public void parseDetailsTest_missingDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    String[] s;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      s \u003d Parser.parseDetails(\"concert /at\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      assertEquals(\"Yo! Details/Time are missing.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  public void parseDetailsTest_wrongSyntax_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    String[] s;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      s \u003d Parser.parseDetails(\"concert\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "      assertEquals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "          \"Yo! Command Syntax Error. \u0027\u003cDetails\u003e /by or /at \u003cdd/MM/yy [HH:MM]\u003e\u0027\", e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "  }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 53
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import duke.dukeException.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void eventConstructorTest_wrongDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            new Event(\"Concert\", \"020720 18:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            assertEquals(\"Yo! DateTime format is wrong. \u003cdd/MM/yy [HH:MM]\u003e\", e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    public void eventConstructorTest_correctDateTimeFormat_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            Event e \u003d new Event(\"Concert\", \"02/07/20 18:00\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            assertEquals(new Event(\"Concert\", \"02/07/20 18:00\").toString(), e.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "go running"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "concert /at 02/02/20 18:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "cs2103 proj /by 02/03/20 23:59"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "3 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "blah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "delete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "2 99"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "1 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "help"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "briefing at 07/01/20 14:00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "briefing /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "briefing /at 07/01/20 14:00"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "find"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "briefing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "junhui-phoon": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "# output to UTF-8 format to display UTF-8 symbols"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "export LC_ALL\u003den_US.UTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/**/*.java ../src/main/java/duke/**/*.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "# diff -b to ignore the trailing whitespaces at Duke logo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junhui-phoon"
        },
        "content": "diff -b ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "junhui-phoon": 7
    }
  }
]
