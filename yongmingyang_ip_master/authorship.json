[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"    mainClassName \u003d \"duke.gui.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"    archiveBaseName \u003d \"talktome\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yongmingyang":18,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"Duke is a desktop to-do list chat-bot that allows users to "},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"add tasks using plain texts through interaction with the Graphical "},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"User Interface (GUI)."},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"* Quick start"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"* Features"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"    * Get help - `help`"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"    * Adding a todo task - `todo`"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"    * Adding a task with a deadline - `deadline`"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"    * Adding an event - `event` "},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"    * Retrieving list of tasks - `list`"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    * Finding tasks with keyword - `find`"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"    * Exiting the program - `bye`"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"* Command Summary"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"## Quick start"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"1. Ensure java 11 is installed on your computer"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"2. Download the duke.jar file"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"3. Copy the file to desired folder for your Duke application"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"4. For Mac users, double-click to open the app."},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"5. For Windows user, if there\u0027s no default applications to open the file, \u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"start up command prompt and change directory to duke.jar\u0027s directory."},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"6. (Continue from step 5), run file with java -jar duke.jar"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"7. The application with a similar GUI to the one below should appear"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"8. Start typing commands to start! Type `help` to see list of commands."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"**NOTES** for command format:"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"\u003e * Words in `UPPER_CASE` are parameters supplied by the user. "},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"\u003e \u003cbr\u003e e.g. `todo TASK`, where `TASK` is a parameter that can be added as "},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e`todo homework` \u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"\u003e * Items in square brackets are optional"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"\u003e \u003cbr\u003e e.g. `deadline TASK /by DATE [/repeat DAILY/WEEKLY/MONTHLY/YEARLY]` ,"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"\u003e \u003cbr\u003e where `/repeat` is optional such as \u003cbr\u003e `deadline homework /by 2020-09-15 /repeat daily`"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"\u003e \u003cbr\u003e or `deadline homework /by 2020-09-15` \u003cbr\u003e"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"\u003e * For `DATE`, indicate in the format `YYYY-MM-DD` "},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"\u003e e.g. `2020-09-15` \u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"\u003e * For `/repeat FREQUENCY`, the following frequencies can be used: \u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"\u003e `daily`, `weekly`, `monthly`, `yearly`, used as such: `/repeat daily` "},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"### Get help - `help` "},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"Provides the use a list of available commands, and the ways"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"to use the commands in the GUI"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"Format: `help` "},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"To view the list of commands, type: `help`"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"### Adding a todo task - `todo`"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"Adds a todo task to the task list"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"Format: `todo TASKNAME`"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"* Adds a task with `TASKNAME` to the task list."},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"### Adding a task with a deadline - `deadline`"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"Adds a task with a deadline to the task list"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"Format: `deadline TASKNAME /by DATE [/repeat FREQUENCY]`"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"* Adds a deadline with name as `TASKNAME`"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"* Date deadline is indicate by `DATE`"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"* Deadline repeats with frequency of `FREQUENCY`"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"### Adding an event - `event`"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"Adds an event to the task list. "},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"Format: `event EVENT_NAME /at EVENT_DETAILS|DATE [/repeat FREQUENCY]`"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"* Adds an event with name `EVENT_NAME`"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"* This event has `EVENT_DETAILS` or occurs on the specified `DATE`"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"* `FREQUENCY` has to be the options stated in the notes above "},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"### Retrieving list of tasks - `list`"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"Retrieves all task in the task list."},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"Format: `list`"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"### Finding tasks with keyword - `find`"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"Finds all task in the task list with specified keyword."},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"Format: `find KEYWORD`"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"* List of all tasks that contains the keyword will be shown."},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"### Exiting the program - `bye`"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"Ends the program"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"#### Usage"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"Format: `bye`"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":"\u003cbr\u003e"},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"## Command Summary"},{"lineNumber":94,"author":{"gitId":"yongmingyang"},"content":"* `help`"},{"lineNumber":95,"author":{"gitId":"yongmingyang"},"content":"* `todo`"},{"lineNumber":96,"author":{"gitId":"yongmingyang"},"content":"* `deadline`"},{"lineNumber":97,"author":{"gitId":"yongmingyang"},"content":"* `event`"},{"lineNumber":98,"author":{"gitId":"yongmingyang"},"content":"* `find`"},{"lineNumber":99,"author":{"gitId":"yongmingyang"},"content":"* `list`"},{"lineNumber":100,"author":{"gitId":"yongmingyang"},"content":"* `bye`"}],"authorContributionMap":{"yongmingyang":89,"-":11}},{"path":"src/main/java/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"T | 1 | work"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"T | 1 | homework"},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"T | 0 | work"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"T | 0 | work"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"E | 0 | tomorrow  | home"}],"authorContributionMap":{"yongmingyang":5}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":" * The command class is used to handle and execute commands"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":" * after input by user is processed by the parser."},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"public class Command {"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    private String task;"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"    private String action;"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a Command object"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"     * @param task The input task given by the user"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"     * @param action The type of action take as given by the task."},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    public Command(String task, String action) {"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"        assert task !\u003d null \u0026\u0026 action !\u003d null : \"task and action cannot be null!\";"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"        this.task \u003d task;"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"        this.action \u003d action;"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"     * Executes the action on task given."},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"     * @param taskList the current task list in use."},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"     * @param ui the user interface object."},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"    public String execute(TaskList taskList, Ui ui) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"        assert taskList !\u003d null : \"taskList cannot be null\";"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        assert ui !\u003d null : \"ui should not be null\";"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"        switch (action) {"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"        case \"help\":"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"            return ui.showWelcomeMessage();"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"        case \"bye\":"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"            return ui.showEnd();"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"        case \"list\":"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"            return ui.showList(taskList.getList());"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"        case \"done\":"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"            String[] split \u003d task.split(\"done \");"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"                Integer taskNumber \u003d Integer.parseInt(split[1]);"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"                return taskList.checkOff(taskNumber);"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"            } catch (NumberFormatException err) {"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"                return \"Please input a valid number\";"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"        case \"delete\":"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"            return taskList.delete(task);"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"        case \"todo\":"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"            return taskList.addToDo(task) + ui.showAdded();"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"        case \"deadline\":"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"            return taskList.addDeadline(task) + ui.showAdded();"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"        case \"event\":"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"            return taskList.addEvent(task) + ui.showAdded();"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"        case \"find\":"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"            String[] splits \u003d task.split(\"find \");"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"            if (splits.length \u003c 2) {"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"                return ui.showInvalidCommand();"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"            String toFind \u003d task.split(\"find \")[1];"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"            ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"            ArrayList\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"            return getSize(toFind, ui, list, filtered);"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"            return ui.showInvalidCommand();"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"    private String getSize(String toFind, Ui ui, ArrayList\u003cTask\u003e list, ArrayList\u003cTask\u003e filtered) {"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"            return \"You do not have any tasks yet\";"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"            String toReturn \u003d \"Here are the tasks that matches \u0027\" + toFind + \"\u0027\";"},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"                String task \u003d list.get(i).toString();"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"                if (task.contains(toFind)) {"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"                    filtered.add(list.get(i));"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d ui.showList(filtered);"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"            return toReturn;"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.nio.channels.FileLockInterruptionException;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":" * The Duke class is the main class in which the program is run."},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":" *"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"    private final static String FILE_PATH \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\duke.txt\";"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    private final static String DATA_PATH \u003d System.getProperty(\"user.dir\") + \"\\\\data\";"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"    private Storage storage \u003d new Storage(FILE_PATH, DATA_PATH);"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"    private Parser parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a Duke object"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"    public Duke() {"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"            taskList \u003d new TaskList(storage);"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"        } catch (DukeException err) {"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"        } catch (FileNotFoundException err) {"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"            System.out.println(\"File not found in filepath provided\");"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"        Command nextCommand \u003d parser.interpret(input);"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        return nextCommand.execute(taskList, ui);"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":38}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import duke.gui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"            stage.setTitle(\"Talk To Me\");"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":29}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":" * Parser class to interpret the input given by the user"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"     * Initializes the parser object"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"    public Parser () {}"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"     * Interprets the input given by the user"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"     * @param line input given by user"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"     * @return Command object determined by the interpretation"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"    public Command interpret (String line) {"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"        if (line.indexOf(\"todo\") \u003d\u003d 0) {"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"todo\");"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"delete\") \u003d\u003d 0) {"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"delete\");"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"deadline\") \u003d\u003d 0) {"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"deadline\");"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"event\") \u003d\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"event\");"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"done\") \u003d\u003d 0) {"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"done\");"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.equals(\"bye\")) {"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"bye\");"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.equals(\"list\")) {"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"list\");"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"find\") \u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"find\");"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        } else if (line.indexOf(\"help\") \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"help\");"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"            return new Command(line, \"invalid\");"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":40}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Event;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Task;"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Todo;"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":" * The Storage class deals with handling the writing and reading of data to the file specified"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"    protected File dataFile;"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    @SuppressWarnings({\"checkstyle:AbbreviationAsWordInName\", \"CheckStyle\"})"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    private final String filePath;"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a storage object"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"     * @param filePath String representing the filepath to load the file"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"    public Storage(String filePath, String dataPath) {"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        dataFile \u003d new File(filePath);"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"            if (dataFile.exists() \u003d\u003d false) {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"                File createPath \u003d new File(dataPath);"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"                createPath.mkdir();"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"                dataFile.createNewFile();"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"                System.out.println(\"data file has been created\");"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"        } catch (IOException err) {"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"            System.out.println(\"error opening file\");"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"     * Appends task to the file"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"     * @param task String representing task to be appended"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"    public void appendFile (String task) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        //@@author yongmingyang-reused"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        //Reused from https://www.tutorialspoint.com/java/java_filewriter_class.htm with modifications"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            fw.write(task);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            fw.close();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (IOException err) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            System.out.println(\"error writing \" + task + \" to file storage\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Overwrites the file with data from the list given"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param list representing the list of tasks"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void overwriteFile (ArrayList\u003cTask\u003e list) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            for (Task currentTask : list) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                fw.write(identifyTask(currentTask));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            fw.close();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        } catch (IOException err) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            System.out.println(\"error overwriting file.\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        } catch (DukeException err) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            System.out.println(\"error interpreting task\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Loads the file into an array list."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return ArrayList of type Task stored in the file"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws FileNotFoundException file not found"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws DukeException error with files"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, DukeException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ArrayList\u003cTask\u003e toReturn \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Scanner reader \u003d new Scanner(dataFile);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        while (reader.hasNext()) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            String currentTask \u003d reader.nextLine();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            String[] splits \u003d currentTask.split(\" \\\\| \");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            boolean done \u003d Integer.parseInt(splits[1]) \u003d\u003d 1;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            String type \u003d splits[0];"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            String task \u003d splits[2];"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            String frequency \u003d \"\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            boolean isRepetitive \u003d false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            if (splits.length \u003e 4) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                frequency \u003d splits[4].toLowerCase();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                isRepetitive \u003d !frequency.equals(\"\");"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            switch (type) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            case (\"T\"):"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                Task todoTask \u003d new Todo(task);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                if (done) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    todoTask.checkOff();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                toReturn.add(todoTask);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            case (\"D\"):"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                String date \u003d splits[3];"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Deadline deadlineTask \u003d isRepetitive"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                                            ? new Deadline(task, date, frequency)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                                            : new Deadline(task, date);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                if (done) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                    deadlineTask.checkOff();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                toReturn.add(deadlineTask);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            case (\"E\"):"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                String day \u003d splits[3];"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Event eventTask \u003d isRepetitive"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                                    ? new Event(task, day, frequency)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                    : new Event(task, day);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                if (done) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                    eventTask.checkOff();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                toReturn.add(eventTask);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                System.out.println(\"this should not occur, error in loading of files\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return toReturn;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Identifies the type of the current task"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @param currentTask the current task to identify"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @return String to write into the file"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @throws DukeException when current task does not fit any description"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private String identifyTask(Task currentTask) throws DukeException {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String done \u003d currentTask.isDone() ? \"1\" : \"0\";"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Boolean isRepetitive \u003d currentTask.getIsRepetitive();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        String frequency \u003d isRepetitive ? currentTask.getFrequency() : \"\";"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (currentTask instanceof Event) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            return \"E | \" + done + \" | \" + currentTask.getTaskName() + \" | \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + ((Event) currentTask).getDate() + \" | \" + frequency + \"\\n\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } else if (currentTask instanceof Deadline) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return \"D | \" + done + \" | \" + currentTask.getTaskName() + \" | \""},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    + ((Deadline) currentTask).getDate() + \" | \" + frequency + \"\\n\";"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } else if (currentTask instanceof Todo) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            return \"T | \" + done + \" | \" + currentTask.getTaskName() + \"\\n\";"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new DukeException(\"error interpreting task\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}"},{"lineNumber":162,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yongmingyang":51,"-":111}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidDateException;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidDayException;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Event;"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Todo;"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":" * The TaskList class is used to keep track of the tasks given by the user."},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":" * Interacts with a storage object when changes to the task list is made."},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"public class TaskList {"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    private final ArrayList\u003cTask\u003e todo;"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    private final Storage storage;"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     * Initialize a TaskList object"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"     * @param storage object in which the file data is read, written and stored in."},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"     * @throws FileNotFoundException file not found, check file path"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeException issue creating duke object"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"    public TaskList(Storage storage) throws FileNotFoundException, DukeException {"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        this.storage \u003d storage;"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        this.todo \u003d storage.load();"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"     * Deletes the task from the task list."},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"     * @param line the line in which the command of delete was given."},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeException issue creating duke object"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"    public String delete(String line) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"        String[] splits \u003d line.split(\"delete \");"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d Ui.showLine();"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"            if (splits.length \u003e 1) {"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"                int taskNumber \u003d Integer.parseInt(splits[1]);"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"                if (taskNumber - 1 \u003e\u003d todo.size() || taskNumber - 1 \u003c 0 || todo.size() \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"                    throw new DukeException(\"Invalid task number\");"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"                } else {"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"                    int size \u003d todo.size() - 1;"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"                    toReturn +\u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"                            + todo.get(taskNumber - 1) + \"\\n\" + \"Now you have \" + size + \" task in the list \\n\";"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"                    toReturn +\u003d Ui.showLine();"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"                    todo.remove(taskNumber - 1);"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"                    storage.overwriteFile(todo);"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"                    return toReturn;"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"                throw new DukeException(\"Please key in the task number to be marked done\");"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"        } catch (NumberFormatException err) {"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"            return \"please input a valid number\";"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"     * Adds an event task to the task list."},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"     * @param line the line in which the command of adding event was given."},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException task given is invalid"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDayException day given is invalid"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"    public String addEvent (String line) throws DukeInvalidDayException, DukeInvalidTaskException {"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"        assert line !\u003d null : \"event given cannot be null\";"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"        String[] splits \u003d line.split(\"event |/at | /repeat \");"},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"        boolean isRepetitive \u003d splits.length \u003d\u003d 4;"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d Ui.showLine();"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"        if (splits.length \u003e 2) {"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"            Event task \u003d isRepetitive"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"                            ? new Event(splits[1], splits[2], splits[3])"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"                            : new Event(splits[1], splits[2]);"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"            todo.add(task);"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"                    + Ui.showLine();"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"            String textToAppend \u003d isRepetitive"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"                                    ? \"\\nE | 0 | \" + splits[1] + \" | \" + splits[2] + \" | \" + splits[3]"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":"                                    : \"\\nE | 0 | \" + splits[1] + \" | \" + splits[2];"},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":"            storage.appendFile(textToAppend);"},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"            return toReturn;"},{"lineNumber":94,"author":{"gitId":"yongmingyang"},"content":"        } else if (splits.length \u003e 1) {"},{"lineNumber":95,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDayException();"},{"lineNumber":96,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidTaskException();"},{"lineNumber":98,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":101,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":102,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"yongmingyang"},"content":"     * Adds an deadline task to the task list."},{"lineNumber":104,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"yongmingyang"},"content":"     * @param line the line in which the command of adding deadline task was given."},{"lineNumber":106,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDateException date given is invalid"},{"lineNumber":107,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException task given is invalid"},{"lineNumber":108,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"yongmingyang"},"content":"    public String addDeadline (String line) throws DukeInvalidDateException, DukeInvalidTaskException {"},{"lineNumber":110,"author":{"gitId":"yongmingyang"},"content":"        assert line !\u003d null : \"deadline task given cannot be null\";"},{"lineNumber":111,"author":{"gitId":"yongmingyang"},"content":"        String[] splits \u003d line.split(\"deadline |/by | /repeat \");"},{"lineNumber":112,"author":{"gitId":"yongmingyang"},"content":"        boolean isRepetitive \u003d splits.length \u003d\u003d 4;"},{"lineNumber":113,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d Ui.showLine();"},{"lineNumber":114,"author":{"gitId":"yongmingyang"},"content":"        if (splits.length \u003e 2) {"},{"lineNumber":115,"author":{"gitId":"yongmingyang"},"content":"            Deadline task \u003d isRepetitive"},{"lineNumber":116,"author":{"gitId":"yongmingyang"},"content":"                                ? new Deadline(splits[1], splits[2], splits[3])"},{"lineNumber":117,"author":{"gitId":"yongmingyang"},"content":"                                : new Deadline(splits[1], splits[2]);"},{"lineNumber":118,"author":{"gitId":"yongmingyang"},"content":"            todo.add(task);"},{"lineNumber":119,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""},{"lineNumber":120,"author":{"gitId":"yongmingyang"},"content":"                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""},{"lineNumber":121,"author":{"gitId":"yongmingyang"},"content":"                    + Ui.showLine();"},{"lineNumber":122,"author":{"gitId":"yongmingyang"},"content":"            String textToAppend \u003d isRepetitive"},{"lineNumber":123,"author":{"gitId":"yongmingyang"},"content":"                                    ? \"\\nD | 0 | \" + splits[1] + \" | \" + splits[2] + \" | \" + splits[3]"},{"lineNumber":124,"author":{"gitId":"yongmingyang"},"content":"                                    : \"\\nD | 0 | \" + splits[1] + \" | \" + splits[2]   ;"},{"lineNumber":125,"author":{"gitId":"yongmingyang"},"content":"            storage.appendFile(textToAppend);"},{"lineNumber":126,"author":{"gitId":"yongmingyang"},"content":"            return toReturn;"},{"lineNumber":127,"author":{"gitId":"yongmingyang"},"content":"        } else if (splits.length \u003e 1) {"},{"lineNumber":128,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDateException();"},{"lineNumber":129,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidTaskException();"},{"lineNumber":131,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":134,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"yongmingyang"},"content":"     * Adds an todo task to the task list."},{"lineNumber":136,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"yongmingyang"},"content":"     * @param line the line in which the command of adding todo task was given."},{"lineNumber":138,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException task given is invalid"},{"lineNumber":139,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"yongmingyang"},"content":"    public String addToDo (String line) throws DukeInvalidTaskException {"},{"lineNumber":141,"author":{"gitId":"yongmingyang"},"content":"        System.out.println(\"tasklist todo line refers to \" + line);"},{"lineNumber":142,"author":{"gitId":"yongmingyang"},"content":"        String[] splits \u003d line.split(\"todo \");"},{"lineNumber":143,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d Ui.showLine();"},{"lineNumber":144,"author":{"gitId":"yongmingyang"},"content":"        if (splits.length \u003e 1) {"},{"lineNumber":145,"author":{"gitId":"yongmingyang"},"content":"            Todo task \u003d new Todo(splits[1]);"},{"lineNumber":146,"author":{"gitId":"yongmingyang"},"content":"            todo.add(task);"},{"lineNumber":147,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"Got it. I\u0027ve added this to task: \\n\" + task + \"\\n\""},{"lineNumber":148,"author":{"gitId":"yongmingyang"},"content":"                    + \"Now you have \" + todo.size() + \" tasks in the list \\n\""},{"lineNumber":149,"author":{"gitId":"yongmingyang"},"content":"                    + Ui.showLine();"},{"lineNumber":150,"author":{"gitId":"yongmingyang"},"content":"            String textToAppend \u003d \"\\nT | 0 | \" + splits[1];"},{"lineNumber":151,"author":{"gitId":"yongmingyang"},"content":"            storage.appendFile(textToAppend);"},{"lineNumber":152,"author":{"gitId":"yongmingyang"},"content":"            return toReturn;"},{"lineNumber":153,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":154,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidTaskException();"},{"lineNumber":155,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":158,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"yongmingyang"},"content":"     * Marks the task in the task list as done."},{"lineNumber":160,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"yongmingyang"},"content":"     * @param taskNumber task number in which the task is done."},{"lineNumber":162,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":164,"author":{"gitId":"yongmingyang"},"content":"    public String checkOff (Integer taskNumber) {"},{"lineNumber":165,"author":{"gitId":"yongmingyang"},"content":"        Task task \u003d todo.get(taskNumber - 1);"},{"lineNumber":166,"author":{"gitId":"yongmingyang"},"content":"        boolean isRepetitive \u003d task.getIsRepetitive();"},{"lineNumber":167,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d Ui.showLine() + \"Nice! I\u0027ve marked this task as done: \\n\";"},{"lineNumber":168,"author":{"gitId":"yongmingyang"},"content":"        if (isRepetitive) {"},{"lineNumber":169,"author":{"gitId":"yongmingyang"},"content":"            task.updateDate();"},{"lineNumber":170,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"As this task is a repetitive task, the date has been updated. \\n\""},{"lineNumber":171,"author":{"gitId":"yongmingyang"},"content":"                        + todo.get(taskNumber - 1) + \"\\n\" + Ui.showLine();"},{"lineNumber":172,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":173,"author":{"gitId":"yongmingyang"},"content":"            task.checkOff();"},{"lineNumber":174,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d task + \"\\n\";"},{"lineNumber":175,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d Ui.showLine();"},{"lineNumber":176,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"yongmingyang"},"content":"        storage.overwriteFile(todo);"},{"lineNumber":178,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":179,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":181,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"yongmingyang"},"content":"     * Returns the Array list in which the tasks are stored"},{"lineNumber":183,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":185,"author":{"gitId":"yongmingyang"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":186,"author":{"gitId":"yongmingyang"},"content":"        return this.todo;"},{"lineNumber":187,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":189,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"yongmingyang"},"content":"     * String representation of the list"},{"lineNumber":191,"author":{"gitId":"yongmingyang"},"content":"     * @return task list"},{"lineNumber":192,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":194,"author":{"gitId":"yongmingyang"},"content":"    public String toString () {"},{"lineNumber":195,"author":{"gitId":"yongmingyang"},"content":"        assert todo.size() \u003e\u003d 0 : \"list size should not be negative\";"},{"lineNumber":196,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d \"\";"},{"lineNumber":197,"author":{"gitId":"yongmingyang"},"content":"        if (todo.size() \u003d\u003d 0) {"},{"lineNumber":198,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"you do not have any tasks yet\";"},{"lineNumber":199,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":200,"author":{"gitId":"yongmingyang"},"content":"            for (int i \u003d 0; i \u003c todo.size(); i++) {"},{"lineNumber":201,"author":{"gitId":"yongmingyang"},"content":"                int number \u003d i + 1;"},{"lineNumber":202,"author":{"gitId":"yongmingyang"},"content":"                toReturn +\u003d \" \" + number + \".\" + todo.get(i) + \"\\n\";"},{"lineNumber":203,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":204,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":206,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":207}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":" * User Interface class where interactions with user are handled"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    private Scanner input;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"     * Initializes the Ui object"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"    public Ui() { }"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"     * Shows a line to dictate separation"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    public static String showLine() {"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"        return \"______________________________________________\\n\";"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     * Displays a welcome message"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"    public static String showWelcomeMessage() {"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d showLine()"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"                + \"Hello! Welcome to Duke, your personal task manager! What can I do for you? \\n\\n\";"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"COMMANDS: \\nTo see your list of tasks - list \\n\";"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To mark a task as done - done {task number} \\n\";"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To delete your tasks - delete {task number} \\n\";"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To find certain tasks - find {keyword} \\n\";"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To add a todo item to your list of tasks - todo {task} \\n\";"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To add an event item to your list of tasks - event {event details}\" +"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"                \" /at {date/event} /repeat {frequency}\\n\";"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d \"To add a todo item to your list of tasks - deadline {deadline details}\" +"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"                \" /by {date} /repeat {frequency}\\n\";"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"        toReturn \u003d toReturn + showLine();"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"     * Displays a message to show that the task has been added"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"    public String showAdded () {"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"        return \"Okay! I\u0027ve added it to the list.\""},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"                + \" To view your current tasks, type \u0027list\u0027\";"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"     * Displays the list of tasks stored."},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"     * @param list in which tasks are stored"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"    public String showList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"        assert list.size() \u003e\u003d 0 : \"list size should not be negative\";"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d showLine();"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"        if (list.size() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"            toReturn +\u003d \"you do not have any tasks yet\";"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"                int number \u003d i + 1;"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"                toReturn +\u003d \" \" + number + \".\" + list.get(i) + \"\\n\";"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"        toReturn +\u003d showLine();"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"     * Displays a message to the user indicating that the command is invalid"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"    public String showInvalidCommand() {"},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"        return \"I\u0027m sorry I don\u0027t understand :(\";"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"     * Displays a message indicating that the program has come to an end."},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"    public static String showEnd() {"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"        return showLine() + \" Bye. Hope to see you again soon!\" + \"\\n\" + showLine();"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":89}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":7}},{"path":"src/main/java/duke/exception/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"public class DukeInvalidDateException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"    public DukeInvalidDateException() {"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"        super(\"Date is invalid, date cannot be left blank :(\");"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":7}},{"path":"src/main/java/duke/exception/DukeInvalidDayException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"public class DukeInvalidDayException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"    public DukeInvalidDayException() {"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"        super(\"Day of event is invalid :(, please do not leave it as empty\");"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":7}},{"path":"src/main/java/duke/exception/DukeInvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"public class DukeInvalidTaskException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"    public DukeInvalidTaskException() {"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"        super(\"Task is invalid, description cannot be empty :(\");"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":7}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":61}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import duke.Main;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":10}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"import javafx.util.Duration;"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"    private VBox dialogContainer;"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"    private Button sendButton;"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"    private Scene scene;"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"    private Duke duke;"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"     * initializes the main window"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"    public void initialize() {"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"                DialogBox.getDukeDialog(Ui.showWelcomeMessage(), dukeImage)"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"     * set duke"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"     * @param d duke"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"        duke \u003d d;"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"        return textToAdd;"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"    private void handleUserInput() throws DukeException {"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"        );"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"        if (response.equals(Ui.showEnd())) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            //@@author yongmingyang-reused"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            //Reused from https://stackoverflow.com/questions/27334455/ modified to suit"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Stage stage \u003d (Stage) sendButton.getScene().getWindow();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(5));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            delay.setOnFinished( event -\u003e stage.close() );"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            delay.play();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        userInput.clear();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yongmingyang":78,"-":11}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidDateException;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":" * The Deadline class is used to represent the task of a deadline nature."},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":" * This object contains the task name as well as the day/date of the deadline."},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":" * Inherits from Task class."},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"public class Deadline extends Task {"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"    private String date;"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a Deadline object"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName name or description of task"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"     * @param date date in which task has to be completed"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDateException"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"    public Deadline(String taskName, String date) throws DukeInvalidDateException, DukeInvalidTaskException {"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"        super(taskName);"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"TaskName should not be null!\";"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        assert date !\u003d null : \"Date should not be null!\";"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        assert !date.equals(\" \");"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        repeatedFrequency \u003d Frequency.NONE;"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"        if (!date.equals(null) \u0026\u0026 !date.equals(\" \")) {"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"            this.date \u003d date;"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"                super.dateTime \u003d LocalDate.parse(date);"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"            } catch (DateTimeParseException err) {"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDateException();"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a Deadline object that is repetitive"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName name or description of task"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"     * @param date date in which task has to be completed"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"     * @param frequency frequency of the task to be repeated"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDateException"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    public Deadline(String taskName, String date, String frequency)"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"            throws DukeInvalidDateException, DukeInvalidTaskException {"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"        super(taskName);"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"TaskName should not be null!\";"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"        assert date !\u003d null : \"Date should not be null!\";"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"        assert !date.equals(\" \");"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"        assert frequency !\u003d null : \"Frequency cannot be null!\";"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"        repeatedFrequency \u003d translateToFrequency(frequency);"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"        setIsRepetitive();"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"        if (!date.equals(null) \u0026\u0026 !date.equals(\" \")) {"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"            this.date \u003d date;"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"            try {"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"                super.dateTime \u003d LocalDate.parse(date);"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"            } catch (DateTimeParseException err) {"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDateException();"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"     * Gets the date of the Deadline"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"     * @return a String representing the date."},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"    public String getDate() {"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"        if (dateTime \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"            return date;"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"            return dateTime.toString();"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"     * Get a string representation of the object"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":"     * @return a String representing the Deadline object"},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":95,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"yongmingyang"},"content":"    public String toString() {"},{"lineNumber":97,"author":{"gitId":"yongmingyang"},"content":"        String finished \u003d this.isDone ? \"✓\" : \"✗\";"},{"lineNumber":98,"author":{"gitId":"yongmingyang"},"content":"        String frequency \u003d isRepetitive"},{"lineNumber":99,"author":{"gitId":"yongmingyang"},"content":"                ? \", repeats \" + getFrequency()"},{"lineNumber":100,"author":{"gitId":"yongmingyang"},"content":"                : \", does not repeat\";"},{"lineNumber":101,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d dateTime \u003d\u003d null"},{"lineNumber":102,"author":{"gitId":"yongmingyang"},"content":"                            ? \"[D]\" + \"[\" + finished + \"] \" + taskName + \" (by: \" + date + \")\""},{"lineNumber":103,"author":{"gitId":"yongmingyang"},"content":"                            : \"[D]\" + \"[\" + finished + \"] \" + taskName + \" (by: \""},{"lineNumber":104,"author":{"gitId":"yongmingyang"},"content":"                                + dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"},{"lineNumber":105,"author":{"gitId":"yongmingyang"},"content":"                                + frequency + \")\";"},{"lineNumber":106,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":107,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":108}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidDayException;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":" * The Event class is used to represent the task of an event nature."},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":" * This object contains the task name as well as the day/date of the event."},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":" * Inherits from Task class."},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"public class Event extends Task {"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"    private String day;"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"     * Initializes the Event object"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName name or description of task"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"     * @param day day in which task has to be completed"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDayException"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"    public Event(String taskName, String day) throws DukeInvalidDayException, DukeInvalidTaskException {"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"        super(taskName);"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"TaskName should not be null!\";"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        assert day !\u003d null : \"Day should not be null!\";"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        assert !day.equals(\" \");"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        repeatedFrequency \u003d Frequency.NONE;"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"        if (!day.equals(null) \u0026\u0026 !day.equals(\" \")) {"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"            this.day \u003d day;"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"                super.dateTime \u003d LocalDate.parse(day);"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"            } catch (DateTimeParseException err) {"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDayException();"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"     * Initializes the Event object"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName name or description of task"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"     * @param day day in which task has to be completed"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"     * @param frequency frequency to repeat task"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidDayException"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    public Event(String taskName, String day, String frequency)"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"            throws DukeInvalidDayException, DukeInvalidTaskException {"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"        super(taskName);"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"TaskName should not be null!\";"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"        assert day !\u003d null : \"Day should not be null!\";"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"        assert !day.equals(\" \");"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"        repeatedFrequency \u003d translateToFrequency(frequency);"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"        setIsRepetitive();"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"        if (!day.equals(null) \u0026\u0026 !day.equals(\" \")) {"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"            this.day \u003d day;"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"            try {"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"                super.dateTime \u003d LocalDate.parse(day);"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"            } catch (DateTimeParseException err) {"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"                System.out.println(\"for dates, please input the date in yyyy-mm-dd format\");"},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidDayException();"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"     * Gets the date of the Event"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"     * @return a String representing the day."},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"    public String getDate() {"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"        if (dateTime !\u003d null) {"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"            return dateTime.toString();"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":"            return day;"},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"     * Get a string representation of the object"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"     * @return a String representing the Event object"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"yongmingyang"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitId":"yongmingyang"},"content":"        String finished \u003d this.isDone ? \"✓\" : \"✗\";"},{"lineNumber":96,"author":{"gitId":"yongmingyang"},"content":"        String frequency \u003d isRepetitive"},{"lineNumber":97,"author":{"gitId":"yongmingyang"},"content":"                                ? \", repeats \" + getFrequency()"},{"lineNumber":98,"author":{"gitId":"yongmingyang"},"content":"                                : \", does not repeat\";"},{"lineNumber":99,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d dateTime \u003d\u003d null"},{"lineNumber":100,"author":{"gitId":"yongmingyang"},"content":"                            ? \"[E]\" + \"[\" + finished + \"] \" + taskName + \" (at: \" + day + \")\""},{"lineNumber":101,"author":{"gitId":"yongmingyang"},"content":"                            : \"[E]\" + \"[\" + finished + \"] \" + taskName + \" (at: \""},{"lineNumber":102,"author":{"gitId":"yongmingyang"},"content":"                                + dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"},{"lineNumber":103,"author":{"gitId":"yongmingyang"},"content":"                                + frequency + \")\";"},{"lineNumber":104,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":105,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":106}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":" * Task object"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"public class Task {"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    protected String taskName;"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"    protected Boolean isDone;"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    protected Boolean isRepetitive \u003d false;"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"    protected LocalDate dateTime;"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"    public enum Frequency {"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"        DAILY,"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"        WEEKLY,"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"        MONTHLY,"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"        YEARLY,"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"        NONE"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    protected Frequency repeatedFrequency;"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     * Initializes the task object"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName task name or description"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"    public Task(String taskName) throws DukeInvalidTaskException {"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"TaskName should not be null!\";"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"        if (!taskName.equals(null) \u0026\u0026 !taskName.equals(\" \")) {"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"            this.taskName \u003d taskName;"},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"            this.isDone \u003d false;"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"            throw new DukeInvalidTaskException();"},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"     * Marks the task as done"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"    public void checkOff() {"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"        this.isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"     * Checks if the task is done"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"     * @return a boolean indicating if the task is done"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":"    public Boolean isDone() {"},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"        return this.isDone;"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"     * Gets the task name"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"     * @return String representing the task\u0027s name"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"    public String getTaskName() {"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"        return this.taskName;"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"    protected void setIsRepetitive() {"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"        isRepetitive \u003d true;"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"     * checks if task is repetitive"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"     * @return true if task is repetitive"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"    public Boolean getIsRepetitive() {"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"        return isRepetitive;"},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"     * Returns the frequency of the task."},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"     * @return a string describing the frequency"},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"    public String getFrequency() {"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"        return this.repeatedFrequency.toString();"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"     * updates the date based on frequency stated"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"    public void updateDate() {"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"        assert dateTime !\u003d null : \"dateTime should not be null!\";"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"        switch (repeatedFrequency) {"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"        case DAILY:"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":"            dateTime \u003d dateTime.plusDays(1);"},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"        case WEEKLY:"},{"lineNumber":94,"author":{"gitId":"yongmingyang"},"content":"            dateTime \u003d dateTime.plusWeeks(1);"},{"lineNumber":95,"author":{"gitId":"yongmingyang"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"yongmingyang"},"content":"        case MONTHLY:"},{"lineNumber":97,"author":{"gitId":"yongmingyang"},"content":"            dateTime \u003d dateTime.plusMonths(1);"},{"lineNumber":98,"author":{"gitId":"yongmingyang"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"yongmingyang"},"content":"        case YEARLY:"},{"lineNumber":100,"author":{"gitId":"yongmingyang"},"content":"            dateTime \u003d dateTime.plusYears(1);"},{"lineNumber":101,"author":{"gitId":"yongmingyang"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"yongmingyang"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"yongmingyang"},"content":"            System.out.println(\"This is not a repetitive task\");"},{"lineNumber":104,"author":{"gitId":"yongmingyang"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"yongmingyang"},"content":"    public String getDate() {"},{"lineNumber":108,"author":{"gitId":"yongmingyang"},"content":"        return dateTime.toString();"},{"lineNumber":109,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":111,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"yongmingyang"},"content":"     * Gets a representation of the task object"},{"lineNumber":113,"author":{"gitId":"yongmingyang"},"content":"     * @return String object representing the task"},{"lineNumber":114,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"yongmingyang"},"content":"    public String toString() {"},{"lineNumber":117,"author":{"gitId":"yongmingyang"},"content":"        String finished \u003d this.isDone ? \"✓\" : \"✗\";"},{"lineNumber":118,"author":{"gitId":"yongmingyang"},"content":"        String toReturn \u003d \"[\" + finished + \"]\" + taskName;"},{"lineNumber":119,"author":{"gitId":"yongmingyang"},"content":"        return toReturn;"},{"lineNumber":120,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":122,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"yongmingyang"},"content":"     * Translate a string frequency into a Enum Frequency object"},{"lineNumber":124,"author":{"gitId":"yongmingyang"},"content":"     * @param frequency"},{"lineNumber":125,"author":{"gitId":"yongmingyang"},"content":"     * @return Frequency"},{"lineNumber":126,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"yongmingyang"},"content":"    public static Frequency translateToFrequency(String frequency) {"},{"lineNumber":128,"author":{"gitId":"yongmingyang"},"content":"        switch (frequency) {"},{"lineNumber":129,"author":{"gitId":"yongmingyang"},"content":"        case \"daily\":"},{"lineNumber":130,"author":{"gitId":"yongmingyang"},"content":"            return Frequency.DAILY;"},{"lineNumber":131,"author":{"gitId":"yongmingyang"},"content":"        case \"weekly\":"},{"lineNumber":132,"author":{"gitId":"yongmingyang"},"content":"            return Frequency.WEEKLY;"},{"lineNumber":133,"author":{"gitId":"yongmingyang"},"content":"        case \"monthly\":"},{"lineNumber":134,"author":{"gitId":"yongmingyang"},"content":"            return Frequency.MONTHLY;"},{"lineNumber":135,"author":{"gitId":"yongmingyang"},"content":"        case \"yearly\":"},{"lineNumber":136,"author":{"gitId":"yongmingyang"},"content":"            return Frequency.YEARLY;"},{"lineNumber":137,"author":{"gitId":"yongmingyang"},"content":"        default:"},{"lineNumber":138,"author":{"gitId":"yongmingyang"},"content":"            return Frequency.NONE;"},{"lineNumber":139,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":141}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":" * The Todo class is used to represent the task of a Todo nature with no time specified"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":" * Inherits from Task class."},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"public class Todo extends Task {"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"     * Initializes a Todo object"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"     * @param taskName name or description of task"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"     * @throws DukeInvalidTaskException"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"    public Todo(String taskName) throws DukeInvalidTaskException {"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"        super(taskName);"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"        assert taskName !\u003d null : \"taskName should be null\";"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"     * Get a String representation of the object"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"     * @return a String representing the object"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        String finished \u003d this.isDone ? \"✓\" : \"✗\";"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"        return \"[T]\" + \"[\" + finished + \"] \" + taskName;"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":34}},{"path":"src/main/resources/css/fonts/OFL.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"Copyright 2017 The EB Garamond Project Authors (https://github.com/octaviopardo/EBGaramond12)"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"This Font Software is licensed under the SIL Open Font License, Version 1.1."},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"This license is copied below, and is also available with a FAQ at:"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"http://scripts.sil.org/OFL"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"-----------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"-----------------------------------------------------------"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"PREAMBLE"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"The goals of the Open Font License (OFL) are to stimulate worldwide"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"development of collaborative font projects, to support the font creation"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"efforts of academic and linguistic communities, and to provide a free and"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"open framework in which fonts may be shared and improved in partnership"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"with others."},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"The OFL allows the licensed fonts to be used, studied, modified and"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"redistributed freely as long as they are not sold by themselves. The"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"fonts, including any derivative works, can be bundled, embedded, "},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"redistributed and/or sold with any software provided that any reserved"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"names are not used by derivative works. The fonts and derivatives,"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"however, cannot be released under any other type of license. The"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"requirement for fonts to remain under this license does not apply"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"to any document created using the fonts or their derivatives."},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"DEFINITIONS"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"\"Font Software\" refers to the set of files released by the Copyright"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"Holder(s) under this license and clearly marked as such. This may"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"include source files, build scripts and documentation."},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"\"Reserved Font Name\" refers to any names specified as such after the"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":"copyright statement(s)."},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"\"Original Version\" refers to the collection of Font Software components as"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":"distributed by the Copyright Holder(s)."},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"\"Modified Version\" refers to any derivative made by adding to, deleting,"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"or substituting -- in part or in whole -- any of the components of the"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":"Original Version, by changing formats or by porting the Font Software to a"},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"new environment."},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"\"Author\" refers to any designer, engineer, programmer, technical"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"writer or other person who contributed to the Font Software."},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"PERMISSION \u0026 CONDITIONS"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":"Permission is hereby granted, free of charge, to any person obtaining"},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"a copy of the Font Software, to use, study, copy, merge, embed, modify,"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"redistribute, and sell modified and unmodified copies of the Font"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"Software, subject to the following conditions:"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"1) Neither the Font Software nor any of its individual components,"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":"in Original or Modified Versions, may be sold by itself."},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"2) Original or Modified Versions of the Font Software may be bundled,"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"redistributed and/or sold with any software, provided that each copy"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":"contains the above copyright notice and this license. These can be"},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"included either as stand-alone text files, human-readable headers or"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":"in the appropriate machine-readable metadata fields within text or"},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"binary files as long as those fields can be easily viewed by the user."},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":"3) No Modified Version of the Font Software may use the Reserved Font"},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"Name(s) unless explicit written permission is granted by the corresponding"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"Copyright Holder. This restriction only applies to the primary font name as"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"presented to the users."},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":"4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font"},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"Software shall not be used to promote, endorse or advertise any"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"Modified Version, except to acknowledge the contribution(s) of the"},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":"Copyright Holder(s) and the Author(s) or with their explicit written"},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"permission."},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":74,"author":{"gitId":"yongmingyang"},"content":"5) The Font Software, modified or unmodified, in part or in whole,"},{"lineNumber":75,"author":{"gitId":"yongmingyang"},"content":"must be distributed entirely under this license, and must not be"},{"lineNumber":76,"author":{"gitId":"yongmingyang"},"content":"distributed under any other license. The requirement for fonts to"},{"lineNumber":77,"author":{"gitId":"yongmingyang"},"content":"remain under this license does not apply to any document created"},{"lineNumber":78,"author":{"gitId":"yongmingyang"},"content":"using the Font Software."},{"lineNumber":79,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":80,"author":{"gitId":"yongmingyang"},"content":"TERMINATION"},{"lineNumber":81,"author":{"gitId":"yongmingyang"},"content":"This license becomes null and void if any of the above conditions are"},{"lineNumber":82,"author":{"gitId":"yongmingyang"},"content":"not met."},{"lineNumber":83,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":84,"author":{"gitId":"yongmingyang"},"content":"DISCLAIMER"},{"lineNumber":85,"author":{"gitId":"yongmingyang"},"content":"THE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,"},{"lineNumber":86,"author":{"gitId":"yongmingyang"},"content":"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF"},{"lineNumber":87,"author":{"gitId":"yongmingyang"},"content":"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT"},{"lineNumber":88,"author":{"gitId":"yongmingyang"},"content":"OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE"},{"lineNumber":89,"author":{"gitId":"yongmingyang"},"content":"COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,"},{"lineNumber":90,"author":{"gitId":"yongmingyang"},"content":"INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL"},{"lineNumber":91,"author":{"gitId":"yongmingyang"},"content":"DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"},{"lineNumber":92,"author":{"gitId":"yongmingyang"},"content":"FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM"},{"lineNumber":93,"author":{"gitId":"yongmingyang"},"content":"OTHER DEALINGS IN THE FONT SOFTWARE."}],"authorContributionMap":{"yongmingyang":93}},{"path":"src/main/resources/css/fonts/README.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"EB Garamond Variable Font"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"This download contains EB Garamond as both variable fonts and static fonts."},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"EB Garamond is a variable font with this axis:"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"  wght"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"This means all the styles are contained in these files:"},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"  EBGaramond-VariableFont_wght.ttf"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"  EBGaramond-Italic-VariableFont_wght.ttf"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"If your app fully supports variable fonts, you can now pick intermediate styles"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"that aren’t available as static fonts. Not all apps support variable fonts, and"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"in those cases you can use the static font files for EB Garamond:"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-Regular.ttf"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-Medium.ttf"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-SemiBold.ttf"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-Bold.ttf"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-ExtraBold.ttf"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-Italic.ttf"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-MediumItalic.ttf"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-SemiBoldItalic.ttf"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-BoldItalic.ttf"},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"  static/EBGaramond-ExtraBoldItalic.ttf"},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"Get started"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"-----------"},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"1. Install the font files you want to use"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"2. Use your app\u0027s font picker to view the font family and all the"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"available styles"},{"lineNumber":34,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":35,"author":{"gitId":"yongmingyang"},"content":"Learn more about variable fonts"},{"lineNumber":36,"author":{"gitId":"yongmingyang"},"content":"-------------------------------"},{"lineNumber":37,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":38,"author":{"gitId":"yongmingyang"},"content":"  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts"},{"lineNumber":39,"author":{"gitId":"yongmingyang"},"content":"  https://variablefonts.typenetwork.com"},{"lineNumber":40,"author":{"gitId":"yongmingyang"},"content":"  https://medium.com/variable-fonts"},{"lineNumber":41,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":42,"author":{"gitId":"yongmingyang"},"content":"In desktop apps"},{"lineNumber":43,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":44,"author":{"gitId":"yongmingyang"},"content":"  https://theblog.adobe.com/can-variable-fonts-illustrator-cc"},{"lineNumber":45,"author":{"gitId":"yongmingyang"},"content":"  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts"},{"lineNumber":46,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":47,"author":{"gitId":"yongmingyang"},"content":"Online"},{"lineNumber":48,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":49,"author":{"gitId":"yongmingyang"},"content":"  https://developers.google.com/fonts/docs/getting_started"},{"lineNumber":50,"author":{"gitId":"yongmingyang"},"content":"  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide"},{"lineNumber":51,"author":{"gitId":"yongmingyang"},"content":"  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts"},{"lineNumber":52,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":53,"author":{"gitId":"yongmingyang"},"content":"Installing fonts"},{"lineNumber":54,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":55,"author":{"gitId":"yongmingyang"},"content":"  MacOS: https://support.apple.com/en-us/HT201749"},{"lineNumber":56,"author":{"gitId":"yongmingyang"},"content":"  Linux: https://www.google.com/search?q\u003dhow+to+install+a+font+on+gnu%2Blinux"},{"lineNumber":57,"author":{"gitId":"yongmingyang"},"content":"  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows"},{"lineNumber":58,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":59,"author":{"gitId":"yongmingyang"},"content":"Android Apps"},{"lineNumber":60,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":61,"author":{"gitId":"yongmingyang"},"content":"  https://developers.google.com/fonts/docs/android"},{"lineNumber":62,"author":{"gitId":"yongmingyang"},"content":"  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts"},{"lineNumber":63,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":64,"author":{"gitId":"yongmingyang"},"content":"License"},{"lineNumber":65,"author":{"gitId":"yongmingyang"},"content":"-------"},{"lineNumber":66,"author":{"gitId":"yongmingyang"},"content":"Please read the full license text (OFL.txt) to understand the permissions,"},{"lineNumber":67,"author":{"gitId":"yongmingyang"},"content":"restrictions and requirements for usage, redistribution, and modification."},{"lineNumber":68,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":69,"author":{"gitId":"yongmingyang"},"content":"You can use them freely in your products \u0026 projects - print or digital,"},{"lineNumber":70,"author":{"gitId":"yongmingyang"},"content":"commercial or otherwise. However, you can\u0027t sell the fonts on their own."},{"lineNumber":71,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":72,"author":{"gitId":"yongmingyang"},"content":"This isn\u0027t legal advice, please consider consulting a lawyer and see the full"},{"lineNumber":73,"author":{"gitId":"yongmingyang"},"content":"license for all details."}],"authorContributionMap":{"yongmingyang":73}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.effect.*?\u003e"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"\u003c?scenebuilder-stylesheet stylesheet.css?\u003e"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" stylesheets\u003d\"@../css/stylesheet.css\"/\u003e"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"        \u003ceffect\u003e"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"            \u003cDropShadow/\u003e"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"        \u003c/effect\u003e"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"    \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"    \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"yongmingyang":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\""},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"                   stylesheets\u003d\"@../css/stylesheet.css\""},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"                   promptText\u003d\"How can I help you?\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\""},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"                   AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\""},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"        /\u003e"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\""},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"                stylesheets\u003d\"@../css/stylesheet.css\""},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"        /\u003e"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""},{"lineNumber":23,"author":{"gitId":"yongmingyang"},"content":"                    prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" stylesheets\u003d\"@../css/stylesheet.css\""},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":"                    AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"                    AnchorPane.topAnchor\u003d\"0.0\""},{"lineNumber":26,"author":{"gitId":"yongmingyang"},"content":"        \u003e"},{"lineNumber":27,"author":{"gitId":"yongmingyang"},"content":"            \u003ccontent\u003e"},{"lineNumber":28,"author":{"gitId":"yongmingyang"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" maxHeight\u003d\"-Infinity\" style\u003d\""},{"lineNumber":29,"author":{"gitId":"yongmingyang"},"content":"                    -fx-border-radius: 25; -fx-background-radius: 25; -fx-padding: 10\" /\u003e"},{"lineNumber":30,"author":{"gitId":"yongmingyang"},"content":"            \u003c/content\u003e"},{"lineNumber":31,"author":{"gitId":"yongmingyang"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":32,"author":{"gitId":"yongmingyang"},"content":"    \u003c/children\u003e"},{"lineNumber":33,"author":{"gitId":"yongmingyang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yongmingyang":33}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidDateException;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"public class DeadlineTest {"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"    public void toString_wrongDateFormat_inproperDateFormat() {"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"            Deadline task \u003d new Deadline(\"hi\", \"01\");"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"            String expected \u003d \"[D][✗] hi (by: 01)\";"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"            assertEquals(expected, task.toString());"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"        } catch (DukeInvalidTaskException | DukeInvalidDateException e) {"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"            e.printStackTrace();"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":22}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"import duke.exception.DukeInvalidTaskException;"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":8,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":9,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":10,"author":{"gitId":"yongmingyang"},"content":"public class TodoTest {"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"yongmingyang"},"content":"    public void initializeTodo() {"},{"lineNumber":13,"author":{"gitId":"yongmingyang"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"            Todo task \u003d new Todo(\"hi\");"},{"lineNumber":15,"author":{"gitId":"yongmingyang"},"content":"            String expected \u003d \"[T]\" + \"[✗] hi\";"},{"lineNumber":16,"author":{"gitId":"yongmingyang"},"content":"            assertEquals(expected, task.toString());"},{"lineNumber":17,"author":{"gitId":"yongmingyang"},"content":"        } catch (DukeInvalidTaskException e) {"},{"lineNumber":18,"author":{"gitId":"yongmingyang"},"content":"            e.printStackTrace();"},{"lineNumber":19,"author":{"gitId":"yongmingyang"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"yongmingyang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yongmingyang"},"content":"}"}],"authorContributionMap":{"yongmingyang":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yongmingyang"},"content":"todo work"},{"lineNumber":2,"author":{"gitId":"yongmingyang"},"content":"todo return books"},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"deadline this friday /by sunday"},{"lineNumber":4,"author":{"gitId":"yongmingyang"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"yongmingyang"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"yongmingyang"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"yongmingyang"},"content":"bye"}],"authorContributionMap":{"yongmingyang":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yongmingyang"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":4,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"yongmingyang"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"yongmingyang"},"content":"    PAUSE"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":24,"author":{"gitId":"yongmingyang"},"content":""},{"lineNumber":25,"author":{"gitId":"yongmingyang"},"content":"PAUSE"}],"authorContributionMap":{"yongmingyang":5,"-":20}}]
