[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "jeffreytjs": 17
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "D | 1 | return book | 2020-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "E | 1 | project meeting Aug | 2019-12-12 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 0 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 1 | borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 0 | sads"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 0 | 1323"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "E | 1 | project meeting | 2 Jul 2019, 10:00 PM"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 9
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Main class of bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Initialises a new instance of the bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Duke(String fileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.storage \u003d new Storage(fileName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            storage.loadData(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            ui.fileLoaded();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            ui.showErrorMsg(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns corresponding response according to user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Message response to user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String uiMessage \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assert c !\u003d null : \"Unable to parse input!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            uiMessage \u003d c.execute(ui, storage, tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return uiMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 52
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Launches the application by calling start function in Main class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 18
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Duke duke \u003d new Duke(\"duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 32
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to add a Task into TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an AddCommand with Task given."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param newTask Task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public AddCommand(Task newTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Adds a new Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays task added message to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        tasks.add(this.newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        storage.addTask(this.newTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.taskAdded(newTask, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to exit the bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an ByeCommand to initiate termination of bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Save Tasks and displays farewell message to user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        storage.saveData(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.sayFarewell();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Wrapper Class to handle logic for all other Command types."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a Command to initialize the isExit and taskIndex properties."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.taskIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns boolean value whether the command should terminate the bot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return whether if command should terminate the bot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @throws DukeException when there is a problem with the command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public abstract String execute(Ui ui, Storage storage, TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 42
    }
  },
  {
    "path": "src/main/java/duke/command/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to display error messages."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class CommandException extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private String errMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an CommandException to display error messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public CommandException(String errMessage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.errMessage \u003d errMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays error messages (if any) to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.showErrorMsg(errMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to delete a Task from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates DeleteCommand with a given TaskIndex."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskIndex Index of Task in the TaskList to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Deletes the Task with corresponding TaskIndex."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays task deleted message to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task taskToRemove \u003d tasks.get(this.taskIndex - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        tasks.removeTask(this.taskIndex - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        storage.saveData(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.taskDeleted(taskToRemove, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to mark a Task in TaskList as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates DoneCommand with a given TaskIndex."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskIndex Index of Task in the TaskList to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Marks the Task with corresponding TaskIndex as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays Task marked as done message to user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Task currTask \u003d tasks.get(this.taskIndex - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        currTask.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        storage.saveData(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.markAsDone(this.taskIndex - 1, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 40
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to find a Task in TaskList by keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an FindCommand with keyword given."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param keyword Keyword to be searched against the Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        TaskList keywordTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                keywordTasks.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.FoundItems(keywordTasks, this.keyword);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to list all the Tasks in TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates ListCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays current tasks and their corresponding statuses to user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param ui Ui object to print messages to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param storage Storage object to store items in the TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param tasks Current list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String execute(Ui ui, Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return ui.listTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Exception Class that is thrown when invalid inputs are given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a new exception instance."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param errMessage Displays error message to user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public DukeException(String errMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(errMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Utility Class to parse user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Returns the correct Command object to be executed based on user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Corresponding command to execute."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] split \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String command \u003d split[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String description \u003d split.length \u003d\u003d 2 ? split[1] : \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return parseByeCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return parseListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return parseDoneCommand(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return parseDeleteCommand(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new AddCommand(parseToDo(description));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new AddCommand(parseDeadline(description));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new AddCommand(parseEvent(description));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new FindCommand(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (command.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new CommandException(\"Try one of the following instead: todo, event, deadline, done or delete\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                return new CommandException(\"Sorry, I don\u0027t recognise that command!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static ByeCommand parseByeCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static ListCommand parseListCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static ToDo parseToDo(String description) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new ToDo(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static DoneCommand parseDoneCommand(String description) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int taskIndex \u003d parseTaskIndex(description, \"done 1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static DeleteCommand parseDeleteCommand(String description) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int taskIndex \u003d parseTaskIndex(description, \"delete 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static Event parseEvent(String description) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] split \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String eventDate \u003d formatDate(split[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new Event(split[0], eventDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static Deadline parseDeadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String[] split \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String eventDate \u003d formatDate(split[1]);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new Deadline(split[0], eventDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static int parseTaskIndex(String args, String example)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return Integer.parseInt(args);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String.format(\"I need the task index too! Eg. %s\", example));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    static FindCommand parseFind(String description) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String keywords \u003d description.substring(5);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (keywords.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please specify your task.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return new FindCommand(keywords);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (StringIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please specify your task.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private static String formatDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            LocalDate taskDate;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            LocalTime taskTime \u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            date \u003d date.replace(\u0027/\u0027, \u0027-\u0027);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String[] dateArguments \u003d date.split(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            taskDate \u003d LocalDate.parse(dateArguments[0]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (dateArguments.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HH[:]mm\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                taskTime \u003d LocalTime.parse(dateArguments[1], formatter);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String output \u003d taskDate.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (taskTime !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                output +\u003d \", \" + taskTime.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String.format(\"Invalid date/time! Here\u0027s an example format Eg\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                            + \". %s\", \"2019-12-12 1800\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 150
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to load existing TaskList from existing file, creates a new TaskList if file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Creates TaskLists to be saved to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final File dataDirectory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final File dataFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final String dataFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a new Storage for reading and writing in a file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param fileName The path to the file where the TaskList should be loaded from and saved to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String dataDirectoryPath \u003d Paths.get(\"data\").toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dataDirectory \u003d new File(dataDirectoryPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dataFilePath \u003d Paths.get(\"data\", fileName).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Try to load existing TaskList from a specified file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * A new TaskList is created if no existing file is found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * The TaskList returned will attempt to save to the file every time it gets modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskList New TaskList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void loadData(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.checkDataDirectoryExist();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        boolean hasDataFile \u003d this.checkDataFileExist();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (hasDataFile) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(dataFilePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                assert this.dataFile.exists() : \"DataFile is missing!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String[] taskInputs \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskType \u003d taskInputs[0].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    assert taskType \u003d\u003d \"T\" || taskType \u003d\u003d \"D\" || taskType \u003d\u003d \"E\" : \"taskType is invalid!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    Task t;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    switch (taskType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        t \u003d new ToDo(taskInputs[2].trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        t \u003d new Deadline(taskInputs[2].trim(), taskInputs[3].trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        t \u003d new Event(taskInputs[2].trim(), taskInputs[3].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        throw new DukeException(\"Sorry, I don\u0027t recognise that command from the data \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                                + \"file!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    if (taskInputs[1].trim().equals(\"1\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                        t.markAsDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    taskList.add(t);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void checkDataDirectoryExist() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FileReader readFile \u003d new FileReader(dataDirectory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            File newDataDirectory \u003d new File(String.valueOf(dataDirectory));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (!newDataDirectory.exists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                newDataDirectory.mkdir();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public boolean checkDataFileExist() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        boolean hasDataFile \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (this.dataFile.createNewFile()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                hasDataFile \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                Ui.newFileCreated();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            hasDataFile \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return hasDataFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assert this.dataFile.exists() : \"DataFile is missing!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.dataFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d ((ToDo) task).formatToDo();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d ((Deadline) task).formatDeadline();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    String taskDetails \u003d ((Event) task).formatEvent();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.write(content.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assert this.dataFile.exists() : \"DataFile is missing!\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.dataFilePath, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            if (newTask instanceof ToDo) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String taskDetails \u003d ((ToDo) newTask).formatToDo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (newTask instanceof Deadline) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String taskDetails \u003d ((Deadline) newTask).formatDeadline();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            } else if (newTask instanceof Event) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                String taskDetails \u003d ((Event) newTask).formatEvent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.write(content.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 158
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to add a Deadline, which is a Task that requires a datetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String deadlineDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param description Description of the Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param deadlineDate DateTime that the Deadline is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Deadline(String description, String deadlineDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Reformat the Deadline from existing data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Reformatted Deadline for writing to storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String formatDeadline() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return String.format(\"D | %d | %s | %s\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                this.getIsDone() ? 1 : 0, this.getDescription(), this.deadlineDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.deadlineDate + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to add an Event, which is a Task that requires a datetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String eventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param description Description of the Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param eventDate DateTime of the Event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Event(String description, String eventDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Reformat the Event from existing data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Reformatted Event for writing to storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String formatEvent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return String.format(\"E | %d | %s | %s\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                this.getIsDone() ? 1 : 0, this.getDescription(), this.eventDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.eventDate + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 35
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Wrapper Class to handle logic for all other Command types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a new Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or cross symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 41
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to hold Tasks added by user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public int numTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String listOfItemsInString \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        for (Task item : taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            String currLine \u003d counter + \". \" + item;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            listOfItemsInString +\u003d currLine + \"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return listOfItemsInString;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Task removeTask(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return this.taskList.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 49
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to add a ToDo, which is a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates a ToDo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param description Description of the ToDo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Reformat the ToDo from existing data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Reformatted ToDo for writing to storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String formatToDo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return String.format(\"T | %d | %s\", this.getIsDone() ? 1 : 0,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                this.getDescription());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 31
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Initializes the MainWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                DialogBox.getDukeDialog(Ui.sayGreeting(), dukeImage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            DialogBox.getDukeDialog(Ui.sayGreeting(), dukeImage),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            DialogBox.getDukeDialog(Ui.fileLoaded(), dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " * Class to display messages and interact with user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Initialises a new Ui object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays greeting message to user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Greeting message to user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static String sayGreeting() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String greetingMessage \u003d \"Hi there, I\u0027m TARS!\\nWhat can I do for you today?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return greetingMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays farewell message to user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String sayFarewell() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String farewellMessage \u003d \"Bye bye. See you again soon!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return farewellMessage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Reads a command from user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return Command read from user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String getNextLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Display an error message from a DukeException to user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param e Exception containing the error message."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String showErrorMsg(DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Display an error message from a String to user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param errMessage Exception containing the error message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String showErrorMsg(String errMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return errMessage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Display a message to notify user of existing file loaded."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static String fileLoaded() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String fileLoadedMessage \u003d \"I found your saved tasks. You can view them using list.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return fileLoadedMessage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Display a message to notify user a new file has been created."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public static String newFileCreated() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String fileCreatedMessage \u003d \"I have created a new log file to help me remember what you tell me!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return fileCreatedMessage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays taskAdded message to user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *  @param newTask New Task to be added to TaskList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskList Current list of Tasks from user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String taskAdded(Task newTask, TaskList taskList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String taskAddedMessage \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + newTask + \"\\nNow you have \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + taskList.numTask() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return taskAddedMessage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays taskDeleted message to user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param removeTask Task to be removed from TaskList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskList Current list of Tasks from user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String taskDeleted(Task removeTask, TaskList taskList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String taskDeletedMessage \u003d \"Poof! I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + removeTask + \"\\nNow you have \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + taskList.numTask() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return taskDeletedMessage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays markAsDone message to user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param index Index of the Task from TaskList to be marked as done."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskList Current list of Tasks from user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String markAsDone(int index, TaskList taskList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        boolean taskExist \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        if (taskList.get(index) !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            taskExist \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assert taskExist : \"Current task could not be marked as done!\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String markedDoneMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return markedDoneMessage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays a list of Tasks from the TaskList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param taskList Current list of Tasks from user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String listTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String listOfTasks \u003d \"Let\u0027s see what we have here:\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + taskList.list();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * Displays a list of Tasks from the TaskList that matches the keywords."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param foundTasks List of Tasks that match the keywords given by user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     * @param keyword Keyword to be used in finding."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public String FoundItems(TaskList foundTasks, String keyword) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        String listOfFoundTasks \u003d \"Here are the tasks that matched with \\\"\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                + keyword + \"\\\" in your \" + \"list:\\n\" + foundTasks.list();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        return listOfFoundTasks;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 151
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 21
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.command.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void parseEvent_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Parser.parse(\"event meeting /at 07/02/2020 2200\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assertEquals(\"Invalid date/time! Here\u0027s an example format Eg. 2019-12-12 1800\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void parseDelete_noArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "            assertEquals(\"I need the task index too! Eg. delete 1\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void parseBye_validCommand_isExit() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Command c \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(c.isExit());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void parseUnknownCommand_invalidCommand() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        Command c \u003d Parser.parse(\"lalalaala\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertTrue(c instanceof CommandException);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 44
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void dataStorage_displaysCorrectStorageName_displayZeroForUndone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ToDo testToDoUndone \u003d new ToDo(\"Test for not done\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(\"T | 0 | Test for not done\", testToDoUndone.formatToDo());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    public void dataStorage_displaysCorrectStorageNameForDone_displayOneForDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        ToDo testToDoUndone \u003d new ToDo(\"Test for done\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        testToDoUndone.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "        assertEquals(\"T | 1 | Test for done\", testToDoUndone.formatToDo());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 21
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deadline return book /by 2019/12/12 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "event project meeting /at 2019/07/02 2200"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "deadline buy snacks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jeffreytjs": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "REM resolved symbols appearing as question mark"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "REM updated pathing, compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeffreytjs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jeffreytjs": 6
    }
  }
]
