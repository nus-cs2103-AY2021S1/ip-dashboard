[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "royleochan": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "royleochan": 2
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the add command. The add command adds either a to-do, deadline or event task to the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The type of the task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final TaskType taskType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The description of the task to be added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String taskDesc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The date of the task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String taskDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Add command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param type Type of the task to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public AddCommand(String type, String desc) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskType \u003d TaskType.valueOf(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDesc \u003d desc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDate \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Add command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param type Type of the task to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param desc Description of the task to be added."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param date Date of the task to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public AddCommand(String type, String desc, String date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskType \u003d TaskType.valueOf(type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDesc \u003d desc;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskDate \u003d date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the add command. The execution involves adding the task to the task list, writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d lst.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new ToDoTask(taskDesc, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"TODO | 0 | \" + taskDesc);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new EventTask(taskDesc, false, taskDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"EVENT | 0 | \" + taskDesc + \"| \" + taskDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                task \u003d new DeadlineTask(taskDesc, false, taskDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                storage.addLine(\"DEADLINE | 0 | \" + taskDesc + \"| \" + taskDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ui.showAddTask(task, taskNum);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 101
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Abstraction of the command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the logic of the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public abstract void execute(TaskList lst, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 19
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the delete command. The delete command removes a task from the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Integer representing the task number to be deleted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Delete command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task to be deleted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the delete command. The execution involves deleting the task from the task list, writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int lineNum \u003d taskNum - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Task task \u003d lst.get(lineNum);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage.deleteLine(lineNum);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            lst.remove(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showDeleteTask(task, taskNum);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 46
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the done command. The done command marks a task from the task list as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Integer representing the task number to be marked as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Done command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task to be marked as done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the done command. The execution involves marking the task as done in the task list, writing to the storage as well as printing the relevant UI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        int lineNum \u003d taskNum - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d lst.get(lineNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage.modifyLine(lineNum);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showDoneTask(task, taskNum);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 46
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the exit command. The exit command stops execution of the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the exit command. The execution involves exiting the program and showing the goodbye message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 21
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the find command. The find command searches for tasks based on the query and lists them."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Query of the find command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final String query;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param query Query for the find command to search for."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the find command. The execution involves finding tasks based on the query and listing out the search"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * results."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d lst.filter(query);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showFindStatement(filteredTasks.size() \u003c\u003d 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int num \u003d i + 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showTask(filteredTasks.get(i), num);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 45
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the help command. The help command shows the user a list of commands Serina can help the user with and "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * how to issue these commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the help command. The execution involves listing all the commands Serina can understand. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showHelp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 22
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the list command. The list command lists all the current tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Executes the list command. The execution involves listing all the tasks in the task list and printing the relevant UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst     List containing the current tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param ui      Ui allows execute to carry out ui methods to print to the console."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param storage Storage allows execute to write and read files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void execute(TaskList lst, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showListStatement();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (int i \u003d 0; i \u003c lst.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int num \u003d i + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            ui.showTask(lst.get(i), num);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 26
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the Duke class. The Duke class serves as the main entry point into the chatbot application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * File directory where the text file is stored"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String DIR \u003d \"data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Ui to print responses to user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Storage where writing and reading of files is handled"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Parser to parse and verify user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a Duke instance and loads user tasks. Creates new file if there is no existing file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param filePath Path and name of the file to be created and loaded from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            storage \u003d new Storage(filePath, DIR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            tasks \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            parser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"----- You have no tasks saved as of yet. Feel free to add tasks and I will track them for you\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"----- Something went wrong, please try again later\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The main method for the chat bot application. Reads in a file path to create a Duke instance and run the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param args 1 argument, filePath which is the path and name of the file to be created and loaded from."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        new Duke(\"data/serina.txt\").run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * The main chat bot application logic. Repeatedly reads in user commands and executes the commands until the user exits the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                if (c !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    isExit \u003d c instanceof ExitCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ui.showError(\"I can\u0027t help you with that request, try something else.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "royleochan": 87
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents the custom duke exception. This exception is thrown when specific errors relating to the application occurs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a duke exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param message Error message that describes the error which occured."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 15
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a task with a deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Deadline of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final LocalDateTime deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param deadline    Deadline of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, String deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitDeadline \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String inputDeadline \u003d splitDeadline[0] + \"T\" + splitDeadline[1].substring(0, 2) + \":\" + splitDeadline[1].substring(2, 4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(inputDeadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the deadline task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the deadline task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\")) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 38
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a task with an event time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Event time of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final LocalDateTime eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param eventTime   Event time of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public EventTask(String description, boolean isDone, String eventTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitEventTime \u003d eventTime.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String inputEventTime \u003d splitEventTime[0] + \"T\" + splitEventTime[1].substring(0, 2) + \":\" + splitEventTime[1].substring(2, 4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.eventTime \u003d LocalDateTime.parse(inputEventTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the event task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the event task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\")) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 38
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Represents a Task, providing implementation of a general task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * State of whether the task is done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a tick icon or cross icon based on done state of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Tick icon or cross icon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Mark task as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return task description."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return task description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 62
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * Inherits from task and represents a basic to-do task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a to-do task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param isDone      State of whether the task is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public ToDoTask(String description, boolean isDone) { "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Return a string representation of the to-do task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string representation of the to-do task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 26
    }
  },
  {
    "path": "src/main/java/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The Parser class handles the validation of user input and creation of commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List of tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final TaskList lst;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Parser instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lst List of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Parser(TaskList lst) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.lst \u003d lst;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Validates the user input command description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user did not give a command description, or gave it in an invalid format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void validateCommandDesc(String desc, Action type) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result \u003d desc.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"Command description cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Action.DEADLINE) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (!result.contains(\"/by\") || result.split(\"/by\").length \u003c\u003d 2 || result.split(\"/by\")[0].isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Action.EVENT) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (!result.contains(\"/at\") || result.split(\"/at\").length \u003c\u003d 1 || result.split(\"/at\")[0].isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Validates the user input task number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user gave an invalid task number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private void validateTaskNum(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (taskNum \u003e lst.size() || taskNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"You have no such task. Please check your task number.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns the correct command after parsing the user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param command String representing the user input command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws DukeException If user gave an invalid input command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Command resultantCommand \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Action action \u003d Action.valueOf(splitCommand[0].toUpperCase());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String value \u003d splitCommand.length \u003e 1 ? splitCommand[1] : \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateCommandDesc(value, Action.TODO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new AddCommand(\"TODO\", value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitValue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (action \u003d\u003d Action.DEADLINE) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.validateCommandDesc(value, Action.DEADLINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                splitValue \u003d value.split(\"/by \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                resultantCommand \u003d new AddCommand(\"DEADLINE\", splitValue[0], splitValue[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.validateCommandDesc(value, Action.EVENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                splitValue \u003d value.split(\"/at \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                resultantCommand \u003d new AddCommand(\"EVENT\", splitValue[0], splitValue[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int taskNum \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateTaskNum(taskNum);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d action \u003d\u003d Action.DONE ? new DoneCommand(taskNum) : new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            this.validateCommandDesc(value, Action.FIND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new FindCommand(value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            resultantCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return resultantCommand;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different actions."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum Action {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        HELP"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 125
    }
  },
  {
    "path": "src/main/java/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The storage class handles the logic of writing and reading files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * File object containing the text file data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new Storage instance."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param filePath  Name of file to be located or created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param directory Directory of file to be located or created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If errors are encountered in reading or writing to file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Storage(String filePath, String directory) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        File dir \u003d new File(directory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // make the directory if doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!dir.isDirectory()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // create the file if it doesn\u0027t exist"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a list of tasks in their String format after reading the text data file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return List of Strings representing tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws FileNotFoundException If file to load data from is not found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cString\u003e loadData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            lst.add(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Adds a line to the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param line Line to be added to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void addLine(String line) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.write(line + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Deletes a line from the file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lineNum Line number to be deleted from the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void deleteLine(int lineNum) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Path.of(file.getPath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fileContent.remove(lineNum);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Files.write(path, fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Modifies a line from the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param lineNum Line number to be modified from the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void modifyLine(int lineNum) throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Path.of(file.getPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String line \u003d fileContent.get(lineNum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String updatedLine \u003d line.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fileContent.set(lineNum, updatedLine);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 99
    }
  },
  {
    "path": "src/main/java/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The TaskList class represents the list containing tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * List containing the different tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final List\u003cTask\u003e lst;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new empty TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a new TaskList of tasks based on an input list of strings. The constructor parses these strings to create tasks before adding them to the TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param inputLst List containing tasks represented as strings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public TaskList(List\u003cString\u003e inputLst) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String DONE \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (String line : inputLst) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitInput \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            TaskType taskType \u003d TaskType.valueOf(splitInput[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.add(new ToDoTask(splitInput[2], splitInput[1].equals(DONE)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.add(new DeadlineTask(splitInput[2], splitInput[1].equals(DONE), splitInput[3]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                this.add(new EventTask(splitInput[2], splitInput[1].equals(DONE), splitInput[3]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        lst.add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Removes a task from the TaskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        lst.remove(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns number of tasks in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Number of tasks in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a task based on its index in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Task based on its index in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.get(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a list of tasks based on the query."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param query String representing the search query."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return Returns a list of tasks based on the query."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public List\u003cTask\u003e filter(String query) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return lst.stream().filter(task -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String taskDesc \u003d task.getDescription();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] wordsInTask \u003d taskDesc.split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            return Arrays.asList(wordsInTask).contains(query);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Constants representing the different tasks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 109
    }
  },
  {
    "path": "src/main/java/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": " * The UI class deals with interactions with the user and prints responses accordingly."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Scanner to read in user input input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Creates a UI instance and create a new scanner object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Returns a string describing a command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @return A string describing a command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------------------------\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \"-----------------------------------\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"Serina here, how can I assist you? Enter \u0027help\u0027 to learn what I can do for you.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the help message with instructions on how to use Serina."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showHelp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"I am Serina, your personal toDo Manager. These are the commands you can issue me: \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"1. list \u003d\u003e lists all your current tasks \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"3. todo {task description} \u003d\u003e creates a new to do task with given description \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"4. deadline {task description} /by {YYYY-MM-DD HHMM} \u003d\u003e creates a new task with given \" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \"description and deadline\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"5. event {task description} /at {YYYY-MM-DD HHMM} \u003d\u003e creates a new task with given \" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                \"description and event time\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"6. done {task number} \u003d\u003e marks the given task as done\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"7. delete {task number} \u003d\u003e deletes the given task\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"8. find {query} \u003d\u003e lists out tasks based on your query\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"9. bye \u003d\u003e makes me go to sleep\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the string representation of a task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(taskNum + \". \" + task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the add task acknowledgement."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showAddTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"The following task has been added: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the delete task acknowledgement."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showDeleteTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"The following task has been deleted: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the task mark as done acknowledgement."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param task    Task to print"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param taskNum Task number of task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showDoneTask(Task task, int taskNum) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"The following task has been marked as done: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showTask(task, taskNum);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the list command statement."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showListStatement() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"Here are your current tasks: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the find command statement."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showFindStatement(boolean isEmpty) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"No tasks match your query, try searching for something else.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"Here are your search results: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"Alright, call me again if you need me.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * Prints the error message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     * @param err Error message."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void showError(String err) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(err);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 146
    }
  },
  {
    "path": "src/test/java/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(task.isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testTickIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2713\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testCrossIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Task task \u003d new Task(\"Example task\", false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertEquals(task.getStatusIcon(), \"\\u2718\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 28
    }
  },
  {
    "path": "src/test/java/util/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    TaskList lst \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    Parser parser \u003d new Parser(lst);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e parser.parse(\"awdawdwaed\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForBlankCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e parser.parse(\"\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForEmptyCommandDesc() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"TODO\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Command description cannot be empty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDeadlineCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"deadline buy bread by let\u0027s say March 3\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Be sure to include a task description and date in the correct format.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidEventCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"event buy bread by let\u0027s say March 3\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"Be sure to include a task description and date in the correct format.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDoneCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"done 0\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"You have no such task. Please check your task number.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public void testParseForInvalidDeleteCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e parser.parse(\"done -1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String expectedMessage \u003d \"You have no such task. Please check your task number.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String actualMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 68
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "help"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo plan modules for exchange"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deadline buy birthday gift for mom /by 2020-09-25 1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "event internship guidance webinar /at 2020-09-20 1830"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo find internship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "find internship"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "find blah"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deadline adwaedw"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "event awedawedwae"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "royleochan": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "royleochan": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/TaskList.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Storage.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Parser.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/util/Ui.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/ToDoTask.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/EventTask.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/DeadlineTask.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/task/Task.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/duke/DukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/DeleteCommand.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/ListCommand.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/Command.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/AddCommand.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/HelpCommand.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/FindCommand.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/ExitCommand.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/command/DoneCommand.java"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  }
]
