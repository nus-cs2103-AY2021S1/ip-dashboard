[
  {
    "path": "data/storage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "E | 1 | project meeting | 2020-08-06 1400"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "D | 0 | return book | 2020-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "T | 1 | burrow book"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 4
    }
  },
  {
    "path": "src/main/java/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    DeadlineException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! The description or date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    DeadlineTask(String taskName, LocalDate date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[D]\" + super.toString() +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 27
    }
  },
  {
    "path": "src/main/java/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DeleteException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    DeleteException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! You need a task number to use delete!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class DoneException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    DoneException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! You need a task number to use done!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TODO, DEADLINE, EVENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String indentation \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String TASK_AFTER_COMMAND \u003d \"taskafter\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void addTaskCommand(String task, TaskType taskType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new ToDoException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                newTask \u003d new ToDoTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new DeadlineException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String[] arrForDeadline \u003d task.split(\"/by\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (arrForDeadline.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new DeadlineException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskForDeadline \u003d arrForDeadline[0].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String dateForDeadline \u003d arrForDeadline[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                LocalDate deadlineDate \u003d LocalDate.parse(dateForDeadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                newTask \u003d new DeadlineTask(taskForDeadline, deadlineDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new EventException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String[] arrForEvent \u003d task.split(\"/at\", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (arrForEvent.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new EventException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskForEvent \u003d arrForEvent[0].trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String dateForEvent \u003d arrForEvent[1].trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                LocalDateTime eventDate \u003d LocalDateTime.parse(dateForEvent, formatter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                newTask \u003d new EventTask(taskForEvent, eventDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                newTask \u003d new Task(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            saveTaskToFile(newTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"Okay. I will add this task:\\n\" + indentation + newTask + \"\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \"Now you have \" + tasks.size() + \" \" + (tasks.size() \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (ToDoException | DeadlineException | EventException | IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"Invalid date format! Please put it something \" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    \"like 2020-12-31 for deadline and 2020-12-31 1800 for event.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void saveTaskToFile(Task task) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path path \u003d Paths.get(\"data\", \"storage.txt\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString(), true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String toBeAppend \u003d Parser.parse(task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(toBeAppend);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void changeTaskInFile(int line) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path path \u003d Paths.get(\"data\", \"storage.txt\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(path.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count \u003d\u003d line) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (taskLine.charAt(4) \u003d\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        taskLine \u003d taskLine.replaceFirst(\"0\", \"1\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append(taskLine);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String tobeWritten \u003d sb.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(tobeWritten);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void deleteTaskInFile(int line) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path path \u003d Paths.get(\"data\", \"storage.txt\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File file \u003d new File(path.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String taskLine \u003d sc.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (count !\u003d line) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    sb.append(taskLine);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String tobeWritten \u003d sb.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            FileWriter fw \u003d new FileWriter(path.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.write(tobeWritten);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void welcome() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d \"Hi! My name is Duke.\\nWhat do you want me to do?\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message \u003d \"Bye. Thank you for using me!\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void showAllTask() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"You haven\u0027t add any task!\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append(\"Here is the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sb.append((i + 1) + \". \" + tasks.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void doneTask(String taskNumber) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (taskNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DoneException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNum \u003d Integer.parseInt(taskNumber);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (taskNum \u003c 1 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                message \u003d \"Invalid task number!\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Task task \u003d tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                task.setStatusToDone();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                changeTaskInFile(taskNum);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                message \u003d \"Sucessfully marked this task as done: \\n\" + indentation + task.toString();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"Please put a number!\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DoneException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void deleteTask(String taskNumber) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (taskNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                throw new DeleteException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int taskNum \u003d Integer.parseInt(taskNumber);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (taskNum \u003c 1 || taskNum \u003e tasks.size()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                message \u003d \"Invalid task number!\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                Task task \u003d tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                deleteTaskInFile(taskNum);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                message \u003d \"Okay. I will delete this task:\\n\" + indentation + task + \"\\n\" +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        \"Now you have \" + tasks.size() + \" \" + (tasks.size() \u003d\u003d 1 ? \"task \" : \"tasks \") + \"in the list.\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"Please put a number!\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DeleteException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d e.getMessage();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void taskAfter(String date) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate parsedDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append(\"Here is the tasks after \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    + parsedDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \":\\n\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (parsedDate.isBefore(deadlineTask.getDate())) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    if (parsedDate.isBefore(eventTask.getDate().toLocalDate())) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        sb.append(count + \". \" + task + \"\\n\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            message \u003d \"Invalid date format! Please put it something like 2020-12-31!\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        sendMessage(message);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void takeUserInput() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String[] userInputArr \u003d userInput.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String command \u003d userInputArr[0];"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String arg \u003d null;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (userInputArr.length !\u003d 1) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    arg \u003d userInputArr[1];"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                if (command.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    showAllTask();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    doneTask(arg);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    deleteTask(arg);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(TASK_AFTER_COMMAND)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    taskAfter(arg);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(TODO_COMMAND)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    addTaskCommand(arg, TaskType.TODO);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    addTaskCommand(arg, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else if (command.equals(EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    addTaskCommand(arg, TaskType.EVENT);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    throw new NotACommandException();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } catch (NotACommandException e) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                sendMessage(e.getMessage());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void sendMessage(String sendMessage) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        System.out.println(createLine(sendMessage));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String createLine(String response) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Scanner sc \u003d new Scanner(response);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String equalSign \u003d \"\u003d\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        int width \u003d 75;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String textLine \u003d indentation + sc.nextLine();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sb.append(textLine + \"\\n\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            width \u003d Math.max(width, textLine.length() + 2);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String line \u003d equalSign.repeat(width);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return line + \"\\n\" + sb.toString() + line;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void addTaskReadingList(String task, TaskType taskType, boolean isDone, String desc) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new ToDoTask(task);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(desc);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new DeadlineTask(task, deadlineDate);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            LocalDateTime eventDate \u003d LocalDateTime.parse(desc, formatter);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new EventTask(task, eventDate);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask \u003d new Task(task);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            newTask.setStatusToDone();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void createStorageFile() throws IOException {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path dataPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File dataFile \u003d new File(dataPath.toString());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                dataFile.mkdir();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            Path storagePath \u003d Paths.get(\"data\", \"storage.txt\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            File storageFile \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (!storageFile.exists()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                storageFile.createNewFile();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new FailToReadFileException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void readList() throws IOException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        createStorageFile();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Path storagePath \u003d Paths.get(\"data\", \"storage.txt\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        File file \u003d new File(storagePath.toString());"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String[] taskArr \u003d taskString.split(\"\\\\|\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskType \u003d taskArr[0].trim();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            boolean isDone \u003d taskArr[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String taskName \u003d taskArr[2].trim();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                addTaskReadingList(taskName, TaskType.TODO, isDone, null);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String date \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                addTaskReadingList(taskName, TaskType.DEADLINE, isDone, date);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String date \u003d taskArr[3].trim();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                addTaskReadingList(taskName, TaskType.EVENT, isDone, date);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            readList();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            welcome();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            takeUserInput();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            sendMessage(e.getMessage());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 430,
      "-": 4
    }
  },
  {
    "path": "src/main/java/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    EventException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! The description or time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    EventTask(String taskName, LocalDateTime time) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.date \u003d time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[E]\" + super.toString() +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 26
    }
  },
  {
    "path": "src/main/java/FailToReadFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class FailToReadFileException extends IOException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    FailToReadFileException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"Something went wrong when reading the storage file! Please try again.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 9
    }
  },
  {
    "path": "src/main/java/NotACommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class NotACommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    NotACommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static String parse(Task task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String taskName \u003d task.getTaskName();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String isDone \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String parsed \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"T | \" + isDone + \" | \" + taskName + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String date \u003d deadlineTask.getDateString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"D | \" + isDone + \" | \" + taskName + \" | \" + date + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else if (task instanceof EventTask) { // task instanceof EventTask"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            String time \u003d eventTask.getDateString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            parsed \u003d \"E | \" + isDone + \" | \" + taskName + \" | \" + time + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return parsed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 25
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        DONE, ONGOING"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    Task(String taskName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return this.status \u003d\u003d Status.DONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void setStatusToDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        status \u003d Status.DONE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (status \u003d\u003d Status.DONE) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[✓] \" + taskName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return \"[✗] \" + taskName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 35
    }
  },
  {
    "path": "src/main/java/ToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    ToDoException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    ToDoTask(String task) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 16
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "java -classpath ..\\bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "-": 19
    }
  }
]
