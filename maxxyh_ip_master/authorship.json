[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 2,
      "-": 24
    }
  },
  {
    "path": "data/save.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "T,1,read book,na"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "D,0,return book,2020-06-06 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "E,0,project meeting,2020-08-06 1400-1600"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "T,1,join sports club,na"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "T,0,borrow book,na"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "T,0,buy water bottle,na"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "D,0,interview questions,2020-07-08 2359"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 7
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.storage.Storage.StorageOperationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static duke.storage.Storage.DEFAULT_STORAGE_FILEPATH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this(filePath, System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Duke(String filePath, InputStream in) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            taskList \u003d storage.loadTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            ui \u003d new Ui(in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (StorageOperationException e ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                Command command \u003d parser.getCommandFromInput(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ui.outputBlockToUser(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (StorageOperationException soe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            System.out.println(soe.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Duke duke \u003d new Duke(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static int getRemainingTaskCount(List\u003cTask\u003e taskList)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return (int) taskList.stream().filter(x -\u003e !x.isDone()).count();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.out.println(\"    Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            System.out.print(\"    \" + (i+1) + \". \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            System.out.println(taskList.get(i));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 81
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Command(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 18
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandAdd.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandAdd extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String ADD_TASK_CONFIRMATION \u003d \"Fine. I\u0027ve added this task:\\n\" + \"%s\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Now you have a total of %d %s in your list.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandAdd(TaskList taskList, Ui ui, Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        int size \u003d taskList.getSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.outputBlockToUser(String.format(ADD_TASK_CONFIRMATION, task, size, (size \u003d\u003d 1 ? \"task\" : \"tasks\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandAddDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandAddDeadline extends CommandAdd {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"deadline\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandAddDeadline(TaskList taskList, Ui ui, Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui, task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 14
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandAddEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandAddEvent extends CommandAdd {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandAddEvent(TaskList taskList, Ui ui, Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui, task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandAddToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandAddToDo extends CommandAdd {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"todo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandAddToDo(TaskList taskList, Ui ui, Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui, task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 14
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandDelete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandDelete extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private int toDeleteIdx;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandDelete(TaskList taskList, Ui ui, int toDeleteIdx) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.toDeleteIdx \u003d toDeleteIdx;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String output \u003d \"Feeling weak? Giving up? Well done... Removed this task: \\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        output +\u003d taskList.remove(toDeleteIdx) + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.outputBlockToUser(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandDone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandDone extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private int doneIdx;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandDone(TaskList taskList, Ui ui, int doneIdx) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.doneIdx \u003d doneIdx;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        taskList.get(doneIdx).setDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String output \u003d \"Finally... about time you finished that. Marked this task as done: \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        output +\u003d taskList.get(doneIdx) + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.outputBlockToUser(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class CommandList extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_STRING \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandList(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(taskList, ui);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        output +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            output +\u003d String.format(\"%d. %s\\n\", i+1, taskList.get(i));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ui.outputBlockToUser(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 23
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public IllegalValueException(String message)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 10
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /** Default file path used if user does not provide one */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/save.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Pattern TASK_DATA_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Pattern.compile(\"(?\u003ceventType\u003e[TDE])\" + SEPARATOR"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + \"(?\u003cisDone\u003e[01])\" + SEPARATOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + \"(?\u003cdescription\u003e.+[^,]$?)\" + SEPARATOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + \"(?\u003cdate\u003e.+)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Storage() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Storage(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.path \u003d Path.of(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!isValidPath(path)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new InvalidStorageFilePathException(\"Storage file should end with .txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static boolean isValidPath(Path path) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return path.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void saveTasks(TaskList taskList) throws StorageOperationException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cString\u003e dataLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0 ; i \u003c taskList.getSize() ; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String line \u003d String.join(\",\", task.getSaveData());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            dataLines.add(line);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Files.write(path, dataLines);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new StorageOperationException(\"Error writing file: \" + path);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskList loadTasks() throws StorageOperationException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Files.exists(path) || !Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            // read the file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            List\u003cString\u003e dataLines \u003d Files.readAllLines(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return TaskDecoder.DecodeTasksFromSave(dataLines);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            // should be handled above so it\u0027s an assertion instead of an exception"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"A non-existent file scenario should already have been handled earlier.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            // io exception for example no permission to read a file, some process closed the stream"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new StorageOperationException(\"Error reading file: \" + path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            // illegalValueException is when arguments cannot form a task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new StorageOperationException(ive.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static class InvalidStorageFilePathException extends DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * and the duke.storage file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static class StorageOperationException extends DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 99
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static duke.storage.Storage.TASK_DATA_ARGS_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class TaskDecoder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static TaskList DecodeTasksFromSave(List\u003cString\u003e dataLines) throws IllegalValueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (String line : dataLines) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            output.add(decodeTaskFromString(line));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new TaskList(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static Task decodeTaskFromString(String encodedTask)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Matcher matcher \u003d TASK_DATA_ARGS_FORMAT.matcher(encodedTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(\"Encoded task in invalid format. Unable to decode.\" + encodedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String command \u003d matcher.group(\"eventType\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        boolean isDone \u003d matcher.group(\"isDone\").equals(\"0\") ? false : true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String description  \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (command.equals(\"T\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new TaskToDo(description, isDone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else if (command.equals(\"E\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String pattern \u003d (\"(\\\\S+)(\\\\s)(\\\\d{4})([-])(\\\\d{4})\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalDate eventDate \u003d LocalDate.parse(date.replaceAll(pattern, \"$1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String startTemp \u003d date.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String endTemp \u003d date.replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalTime startTime \u003d LocalTime.parse(startTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + startTemp.substring(2,4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalTime endTime \u003d LocalTime.parse(endTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + endTemp.substring(2,4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Task taskEvent \u003d new TaskEvent(description, eventDate, startTime, endTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                taskEvent.setDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return taskEvent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else if (command.equals(\"D\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String date \u003d matcher.group(\"date\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String pattern \u003d (\"([\\\\S]+)(\\\\s)([\\\\S]+)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(date.replaceAll(pattern, \"$1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            String timeTemp \u003d date.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalTime deadlineTime \u003d LocalTime.parse(timeTemp.substring(0,2)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + \":\" + timeTemp.substring(2,4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            LocalDateTime deadline \u003d deadlineDate.atTime(deadlineTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Task taskDeadline \u003d new TaskDeadline(description, deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                taskDeadline.setDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return taskDeadline;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"Regex is not checking properly\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 71
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void setDone()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public abstract String[] getSaveData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "maxxyh": 27
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class TaskDeadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskDeadline(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description.split(\" /\")[0]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String[] output \u003d description.split(\"/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(by?)(\\\\s)([\\\\S]+)(\\\\s)([\\\\S]+)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate deadlineDate \u003d LocalDate.parse(output[1].replaceAll(pattern, \"$3\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String timeTemp \u003d output[1].replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalTime deadlineTime \u003d LocalTime.parse(timeTemp.substring(0,2)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + \":\" + timeTemp.substring(2,4));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        deadline \u003d deadlineDate.atTime(deadlineTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskDeadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskDeadline(String description, boolean done, String eventDeadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(\\\\S+)(\\\\s)(\\\\S+)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate deadlineDate \u003d LocalDate.parse(eventDeadline.replaceAll(pattern, \"$1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String timeTemp \u003d eventDeadline.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalTime deadlineTime \u003d LocalTime.parse(timeTemp.substring(0,2)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + \":\" + timeTemp.substring(2,4));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        deadline \u003d deadlineDate.atTime(deadlineTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String[] getSaveData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new String[] {\"D\", isDone ? \"1\" : \"0\", description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format(\"%s\", deadline.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd Hmm\"))) };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                description, deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\u0027,\u0027 Hmm\u0027hrs\u0027\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 53
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class TaskEvent extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private LocalDate eventDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskEvent(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description.split(\" /\")[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String[] output \u003d description.split(\"/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(at?)(\\\\s)(\\\\S+)(\\\\s)(\\\\d{4})([-])(\\\\d{4})\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        eventDate \u003d LocalDate.parse(output[1].replaceAll(pattern, \"$3\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String startTemp \u003d output[1].replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String endTemp \u003d output[1].replaceAll(pattern, \"$7\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        startTime \u003d LocalTime.parse(startTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + startTemp.substring(2,4));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        endTime \u003d LocalTime.parse(endTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + endTemp.substring(2,4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskEvent(String description, LocalDate eventDate, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskEvent(String description, boolean done, String eventTime) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(\\\\S+)(\\\\s)(\\\\d{4})([-])(\\\\d{4})\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        eventDate \u003d LocalDate.parse(eventTime.replaceAll(pattern, \"$1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String startTemp \u003d eventTime.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String endTemp \u003d eventTime.replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        startTime \u003d LocalTime.parse(startTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + startTemp.substring(2,4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        endTime \u003d LocalTime.parse(endTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + endTemp.substring(2,4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String[] getSaveData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new String[] {\"E\", isDone ? \"1\" : \"0\", description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format(\"%s %s-%s\", eventDate.format(DateTimeFormatter.ISO_LOCAL_DATE),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        startTime.format(DateTimeFormatter.ofPattern(\"Hmm\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        endTime.format(DateTimeFormatter.ofPattern(\"Hmm\")))};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        + \", \" + startTime.format(DateTimeFormatter.ofPattern(\"Hmm\u0027hrs\u0027\"))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        + \"-\" + endTime.format(DateTimeFormatter.ofPattern(\"Hmm\u0027hrs\u0027\"))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        ));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 67
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskListIn) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        taskList \u003d taskListIn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean remove(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return taskList.remove(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return taskList.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Task update(int index, Task newTask) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return taskList.set(index, newTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 42
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class TaskToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public TaskToDo(String description, boolean done)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String[] getSaveData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new String[] {\"T\", isDone ? \"1\" : \"0\", description, \"na\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskDeadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAddDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAddEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAddToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final Pattern COMMAND_INPUT_FORMAT \u003d Pattern.compile(\"(?\u003ccommand\u003e^[ltde]\\\\w+)\" + \"\\\\s?\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Command getCommandFromInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Matcher matcher \u003d COMMAND_INPUT_FORMAT.matcher(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new DukeException(\"☹ BLEHHHHHH!!! I\u0027m (not) sorry, but I don\u0027t know what that means :/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String command \u003d matcher.group(\"command\").toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandList.COMMAND_STRING:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandList(taskList, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandDone.COMMAND_STRING:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandDone(taskList, ui, parseDoneOrDelete(arguments));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandDelete.COMMAND_STRING:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandDelete(taskList, ui, parseDoneOrDelete(arguments));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandAddToDo.COMMAND_STRING:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandAddToDo(taskList, ui, new TaskToDo(arguments));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandAddEvent.COMMAND_STRING:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandAddEvent(taskList, ui, parseEvent(arguments));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case CommandAddDeadline.COMMAND_STRING:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new CommandAddDeadline(taskList, ui, parseDeadline(arguments));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new DukeException(\"☹ BLEHHHHHH!!! I\u0027m (not) sorry, but I don\u0027t know what that means :/\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private int parseDoneOrDelete(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Pattern integerPattern \u003d Pattern.compile(\"(?\u003cinteger\u003e\\\\d+)\\\\s?\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Matcher matcher \u003d integerPattern.matcher(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            int index \u003d Integer.parseInt(matcher.group(\"integer\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (index \u003c 0 || index \u003e taskList.getSize() - 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                throw new DukeException(String.format(\"☹ BLEHHHHHH. Task no. %d does not exist. Please try again.\", (index + 1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new DukeException(\"☹ BLEHHHHHH. What are you talking about?? Tell me which task??\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static Task parseEvent(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String[] output \u003d arguments.split(\" /\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (output.length \u003c 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new DukeException(String.format(\"☹ BLEHHHHHH!!! The description of an event cannot be empty.\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String description \u003d output[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(at?)(\\\\s)(\\\\S+)(\\\\s)(\\\\d{4})([-])(\\\\d{4})\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate eventDate \u003d LocalDate.parse(output[1].replaceAll(pattern, \"$3\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String startTemp \u003d output[1].replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String endTemp \u003d output[1].replaceAll(pattern, \"$7\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalTime startTime \u003d LocalTime.parse(startTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + startTemp.substring(2,4));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalTime endTime \u003d LocalTime.parse(endTemp.substring(0,2) + \":\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + endTemp.substring(2,4));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new TaskEvent(description, eventDate, startTime, endTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static Task parseDeadline(String arguments) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String[] output \u003d arguments.split(\" /\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (output.length \u003c 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new DukeException(String.format(\"☹ BLEHHHHHH!!! The description of a deadline cannot be empty.\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String description \u003d output[0];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String pattern \u003d (\"(by?)(\\\\s)([\\\\S]+)(\\\\s)([\\\\S]+)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate deadlineDate \u003d LocalDate.parse(output[1].replaceAll(pattern, \"$3\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String timeTemp \u003d output[1].replaceAll(pattern, \"$5\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalTime deadlineTime \u003d LocalTime.parse(timeTemp.substring(0,2)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + \":\" + timeTemp.substring(2,4));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDateTime deadline \u003d deadlineDate.atTime(deadlineTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new TaskDeadline(description, deadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 108
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String LOGO \u003d \"   ___      _      _ __   _              \\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"  /   \\\\    | |    | \u0027_ \\\\ | |_     __ _   \\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"  | - |    | |    | .__/ | \u0027 \\\\   / _` |  \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"  |_|_|   _|_|_   |_|__  |_||_|  \\\\__,_|  \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"| \\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027 \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String GREETING \u003d \"Hello, Alpha here... welcome to my help centre... again :/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Would you like to explain what you want?\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String GOODBYE \u003d \"Bye. Try not to come again please... let me live.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String LINE_PREFIX \u003d \"    \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String DIVIDER \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Ui(InputStream in) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        sc \u003d new Scanner(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        outputBlockToUser(GREETING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        outputBlockToUser(GOODBYE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /** Shows message to user */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void outputBlockToUser(String... message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.out.print(LINE_PREFIX + DIVIDER.replace(\"\\n\", LINE_SEPARATOR));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            System.out.print(LINE_PREFIX + m.replace(\"\\n\", LINE_SEPARATOR + LINE_PREFIX));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.out.print(DIVIDER.replace(\"\\n\", LINE_SEPARATOR));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.out.print(\"input command: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 53
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static duke.storage.Storage.DEFAULT_STORAGE_FILEPATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static duke.ui.Ui.GOODBYE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void run_byeString_goodbyeMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"bye\".getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        System.setOut(new PrintStream(out));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        new Duke(DEFAULT_STORAGE_FILEPATH, in).run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(out.toString().contains(GOODBYE.replaceAll(\"\\n\", \"\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 23
    }
  },
  {
    "path": "src/test/java/duke/ui/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAdd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAddDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.commands.CommandAddEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void getCommandFromInput_eventDescriptionDurationString_createsAddEventCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String input \u003d \"event john mayer concert /at 2020-09-10 1800-2200\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Ui ui \u003d new Ui(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Parser parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        CommandAdd expectedCommand \u003d new CommandAddEvent(taskList, ui,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new TaskEvent(\"john mayer concert\", LocalDate.parse(\"2020-09-10\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        LocalTime.parse(\"18:00\"), LocalTime.parse(\"22:00\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedCommand.getTask().toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ((CommandAdd) parser.getCommandFromInput(input)).getTask().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void getCommandFromInput_deadlineDescriptionDeadlineString_createsAddDeadlineCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String input \u003d \"deadline mop floor /by 2020-09-10 2000\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Ui ui \u003d new Ui(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Parser parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        CommandAdd expectedCommand \u003d new CommandAddDeadline(taskList, ui,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new TaskDeadline(\"mop floor\", LocalDateTime.of(2020, 9, 10, 20, 0)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedCommand.getTask().toString(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ((CommandAdd) parser.getCommandFromInput(input)).getTask().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 43
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deadline return book /by 2020-06-06 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "event project meeting /at 2020-08-06 1400-1600"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deadline return book /by 2020-09-05 2100"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "event project meeting /at 2020-09-02 1400-1600"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 17
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\ui\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 1,
      "-": 20
    }
  }
]
