[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates a single command for the Duke program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected Integer index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates an invalid command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskType \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either LIST/BYE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert taskType \u003d\u003d TaskType.LIST || taskType \u003d\u003d TaskType.BYE : \"taskType not supported for this constructor\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        description \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either DELETE or DONE."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType the type of task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index    index of TaskList the action is to be applied to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, Integer index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert taskType \u003d\u003d TaskType.DELETE || taskType \u003d\u003d TaskType.DONE : \"taskType not supported for this constructor\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        description \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of TODO."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType    the type of task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, String description) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert taskType \u003d\u003d TaskType.TODO || taskType \u003d\u003d TaskType.FIND : \"taskType not supported for this constructor\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Command representing a task of either a DEADLINE or EVENT."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param taskType    the type of task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date        the date of the task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Command(TaskType taskType, String description, LocalDate date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assert taskType \u003d\u003d TaskType.DEADLINE || taskType \u003d\u003d TaskType.EVENT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            : \"taskType not supported for this constructor\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the TaskType of the Command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the TaskType of the command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the respective date of the Command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the date of the command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if the Command object is valid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return true if the command is valid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private static String addToList(TaskList taskList, Task task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"Sure, I\u0027ve added this task to your list:\\n \" + task"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \"\\nYou now have \" + taskList.size() + \" task(s) in the list!\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Executes the Command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param list the TaskList this command is to be applied to"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String execute(TaskList list) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (!isValid()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String print \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (list.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    print +\u003d \"\\nYour list is empty. How about adding some tasks?\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        print +\u003d \"\\n \" + (i + 1) + \": \" + list.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Task deleted \u003d list.remove(index - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Sure, I\u0027ve deleted this task from your list:\\n \" + deleted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"\\nYou now have \" + list.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Task doneTask \u003d list.markTaskAsDone(index - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Great! I\u0027ve marked this task as done:\\n \" + doneTask;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Todo(description));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Deadline(description, date));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d addToList(list, new Event(description, date));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                TaskList foundList \u003d list.find(description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                print \u003d \"Here are your search results:\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                if (foundList.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    print +\u003d \"\\nWe didn\u0027t find any tasks relevant to your search term.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    for (int i \u003d 0; i \u003c foundList.size(); i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        print +\u003d \"\\n \" + (i + 1) + \": \" + foundList.get(i);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(taskType + \" is not supported as a TaskType.\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    + \"Contact the developer if you see this message.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            print \u003d \"The index you provided was out of bounds.\\nRun list to see your list of tasks.\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return print;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command \u003d (Command) o;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return taskType \u003d\u003d command.taskType"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(index, command.index)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(description, command.description)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u0026\u0026 Objects.equals(date, command.date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(taskType, index, description, date);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 202
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the main entry point of the duke program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param filePath path to locate/save the save file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            list \u003d storage.loadFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a Duke object, with default filePath \".//data//duke.data\"."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this(\".//data//duke.data\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return \"There was an error parsing your command.\\n\" + e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (command.getTaskType() \u003d\u003d TaskType.BYE) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            storage.saveFile(list);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return command.execute(list);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 48,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Duke duke \u003d new Duke(\".//data//duke.data\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 33
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the parsing method of the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Parses the input into a Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param input the input command from the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return a command that can be executed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskType taskType \u003d TaskType.of(splitInput[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new Command(taskType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (splitInput.length \u003c 2 || !splitInput[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(\"The index of the task must be provided.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            int index \u003d Integer.parseInt(splitInput[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new Command(taskType, index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (input.length() \u003c\u003d 5 || input.split(\" \").length \u003c 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(\"The description of this TaskType cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new Command(taskType, input.substring(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            int indexOfBy \u003d input.indexOf(taskType \u003d\u003d TaskType.EVENT ? \" /at \" : \" /by \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (input.length() \u003c\u003d (taskType \u003d\u003d TaskType.EVENT ? 6 : 9) || splitInput.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException(\"The description of this kind of task cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            String dateString \u003d input.substring(indexOfBy + 5);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            if (indexOfBy \u003c 0 || dateString.split(\" \").length \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                throw new IllegalArgumentException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                    \"A date needs to be provided with /by or /at.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                        + \"Usage: deadline return book /by 2020-12-30 OR event library renewal /at 2020-12-29\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new Command(taskType, input.substring((taskType \u003d\u003d TaskType.EVENT ? 6 : 9), indexOfBy), date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(\"Your input must start with one of the following:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                + \"\\\"todo\\\", \\\"deadline\\\", \\\"event\\\", \\\"list\\\", \\\"done\\\" or \\\"delete\\\".\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 62
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Encapsulates the storage feature of the Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a Storage instantiation with a specific file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param filePath The path of the file to store the save file at"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private TaskList makeDataFile() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        File file \u003d path.toFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        oos.writeObject(list);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Attempts to load the save file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return a TaskList from the saved file, if one exists. If not, a new TaskList is returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList loadFile() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList list;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            File file \u003d path.toFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author ktaekwon000-reused"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            //Reused from https://stackoverflow.com/a/16111797 with minor modifications"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            list \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException | ClassNotFoundException e1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                list \u003d makeDataFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            } catch (FileNotFoundException e2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                list \u003d makeDataFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (list \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \"Running program without initializing a save.\\nThis may cause errors when closing the program.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Attempts to save the TaskList to the respective path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param list the TaskList to be saved"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void saveFile(TaskList list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            File file \u003d path.toFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author ktaekwon000-reused"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            //Reused from https://stackoverflow.com/a/16111797 with minor modifications"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            oos.writeObject(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            System.out.println(\"There was an error saving your data.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 81,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Deadline, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date the date of the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Deadline(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        by \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \" (by: \" + by.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents an Event, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected LocalDate at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the decription of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param date the date of the event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Event(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        at \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            + \" (at: \" + at.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Task in the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Task with a specific description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the description of this task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the description of this task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Sets the done-ness of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param isDone the done-ness to be applied on the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the status icon of the task, to identify whether it has been done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return Y if the task has been done, X otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return isDone ? \"Y\" : \"X\"; //return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return isDone \u003d\u003d task.isDone \u0026\u0026 Objects.equals(description, task.description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(description, isDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 68
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a list of Tasks for the Duke program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a TaskList with a specific List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param tasks the list to instantiate the TaskList with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Instantiates a TaskList with no existing tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Adds a task to the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Marks a certain task in the TaskList as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be marked as done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task that was marked as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the task at a certain 0-based index of the TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be returned"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task at the 0-based index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Removes a task at the 0-based index of the TaskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param index the 0-based index of the task to be removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the task that was removed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a TaskList where all the terms\u0027 descriptions contain the search term"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param term the String to search for"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the filtered TaskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public TaskList find(String term) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return new TaskList(new ArrayList\u003c\u003e(tasks)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            .filter(t -\u003e t.getDescription().contains(term))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns the size of the TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the size of the TaskList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns true if the TaskList is empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return true if the TaskList is empty"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskList \u003d (TaskList) o;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.equals(tasks, taskList.tasks);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return Objects.hash(tasks);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 120
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a specific task type of the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    TODO, DEADLINE, EVENT, LIST, DONE, DELETE, BYE, FIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Returns a relevant TaskType when given a String input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param str the String representation of the TaskType"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @return the TaskType relevant to the String parameter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static TaskType of(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        str \u003d str.toLowerCase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        switch(str) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DEADLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return EVENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return LIST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return DELETE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return BYE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            return FIND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            throw new IllegalArgumentException(str + \" is not a valid TaskType.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 37
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Represents a Todo, a type of Task, in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates a Todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * @param description the description of the Todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 19
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 52
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 19
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A test class wrapping around the test methods for the class Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void addToList_simpleTodo_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskListExpected \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        taskListExpected.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        TaskList taskListActual \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        Command command \u003d new Command(TaskType.TODO, \"read book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        command.execute(taskListActual);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(taskListExpected, taskListActual);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 25
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " * A test class wrapping around the test methods for the class Parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void simpleTodo_todoReadBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(new Command(TaskType.TODO, \"read book\"), Parser.parse(\"todo read book\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    public void deadlineWithDate_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "        assertEquals(new Command(TaskType.DEADLINE, \"return book\", LocalDate.of(2020, 12, 25)),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "            Parser.parse(\"deadline return book /by 2020-12-25\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ktaekwon000"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ktaekwon000": 25
    }
  }
]
