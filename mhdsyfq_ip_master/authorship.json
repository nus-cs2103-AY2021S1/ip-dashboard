[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16,
      "-": 45
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "T | true | homework"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 1,
      "-": 103
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a dialog box consisting of an ImageView to represent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                .observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a Personal Assistant Chat bot, Duke, that helps a person to keep track of various tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The Storage used for loading and saving tasks */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The Ui used for user interaction */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The list of tasks */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Duke Chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * If there is an existing file in the filepath, previous tasks (if any) will be loaded."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param filePath the filepath where tasks are loaded from and saved to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        System.out.println(\"\\nLoading previous tasks....\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            System.out.println(ui.generateErrorMessage(e));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Runs the Duke Chat bot."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * If an Exit command is entered, Duke terminates."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String welcomeMessage \u003d ui.generateDividers("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                ui.generateWelcomeMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        System.out.println(welcomeMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String message \u003d ui.generateDividers("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        c.executeCommand(tasks, ui, storage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String errorMessage \u003d ui.generateDividers("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        ui.generateErrorMessage(e));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                System.out.println(ui.generateDividers("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        errorMessage));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves Duke\u0027s Response for the GUI based on the specified input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param input the specified input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new Response(c.executeCommand(tasks, ui, storage),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    c.isExit());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return new Response(ui.generateErrorMessage(e), false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Runs the program via CLI."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param args unused."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 85
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents an exception that may be thrown while running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Duke Exception that can be thrown with the specified message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param message the message that is to be shown when a Duke Exception is thrown."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 15
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Launches the Duke Chat bot GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Runs the Duke Chat bot GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param args unused."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 17
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Creates a GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The Duke for the GUI */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Starts the GUI with the specified stage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param stage the specified stage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 37
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Controls the MainWindow."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The Duke for the GUI */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The image used in the GUI for the user */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The image used in the GUI for Duke */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            .getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Initializes the MainWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                ui.generateWelcomeMessage(), dukeImage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Sets the specified Duke to the Duke in this MainWindow."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param duke the specified Duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * If an exit command was entered, there will be a pause of 1 second before the MainWindow closes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                DialogBox.getDukeDialog(response.getResponse(), dukeImage)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (response.isExit()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    Duration.seconds(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 79
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents the part of Duke that deals with making sense of the user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Parses the command given by the user so that Duke can execute it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param fullCommand the command given by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the command interpreted by Duke from the command given by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws DukeException if the command given by the user is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Replace excess whitespaces with just one"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        fullCommand \u003d fullCommand.strip().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Split into command and description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Convert command to uppercase to standardize"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String command \u003d splitCommand[0].toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String description \u003d splitCommand[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new AddCommand(todo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                // Split into description and due date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String[] splitDeadline \u003d splitCommand[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                description \u003d splitDeadline[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                LocalDate dueDate \u003d LocalDate.parse(splitDeadline[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Deadline deadline \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new AddCommand(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                // Split into description and event date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String[] splitEvent \u003d splitCommand[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                description \u003d splitEvent[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                LocalDate eventDate \u003d LocalDate.parse(splitEvent[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Event event \u003d new Event(description, eventDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new AddCommand(event);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"DELETE\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                int taskNum \u003d Integer.parseInt(splitCommand[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new DeleteCommand(taskNum);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"FIND\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String keyword \u003d splitCommand[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new FindCommand(keyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"LIST\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"DONE\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                taskNum \u003d Integer.parseInt(splitCommand[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new DoneCommand(taskNum);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"BYE\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! Looks like you have entered an invalid task number.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! I have no idea what that means.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! Looks like you have got the format for the date wrong.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"DELETE\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \"Uh-oh! You did not enter the number of the task you wish to delete.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            case \"DONE\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                        \"Uh-oh! You did not enter the number of the task you wish to complete.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                if (splitCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    throw new DukeException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                            \"Uh-oh! Looks like you have got the format for the description wrong.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    throw new DukeException("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                            \"Uh-oh! The description of your task cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 99
    }
  },
  {
    "path": "src/main/java/duke/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents the part of Duke that deals with Duke\u0027s responses in the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The response message */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final String response;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** Indicates whether the GUI will terminate */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Response for the GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param response the response message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param isExit the boolean variable that indicates whether or not Duke terminates."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Response(String response, boolean isExit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 30
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents the part of Duke that deals with loading and saving tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The file where tasks are loaded from and saved to */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Storage where tasks can be loaded from and saved to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * If the directory or file does not exist, new ones will be created."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param filePath the filepath where tasks are loaded from and saved to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            System.out.println(\"Uh-oh! An I/O error occurred.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Loads tasks that were previously saved on an existing file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a list of all previous tasks from an existing file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws DukeException if there are issues while loading the previous tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public List\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                String taskDetails \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                Task task \u003d extractTask(taskDetails);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! The file could not be found!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Saves current tasks onto a file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the list of all the current tasks to be saved."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"./data/tasks.txt\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                fw.write(t.saveAs() + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            System.out.println(\"Uh-oh! An I/O error occurred.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Extracts the specific task from the \u0027saved\u0027 format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskDetails the task in \u0027saved\u0027 format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the extracted task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Task extractTask(String taskDetails) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (taskDetails.startsWith(\"T\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return ToDo.load(taskDetails);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (taskDetails.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return Deadline.load(taskDetails);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else { // taskDetails starts with \"E\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return Event.load(taskDetails);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 94
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents the part of Duke that stores the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Tasks can be added into, marked as done, or deleted from the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The list associated with this TaskList */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates an empty task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a task list containing tasks from a specified list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the list whose tasks are to be placed into this list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Adds a task into the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskNum the number of the task to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Task deleteTask(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size()) : \"taskNum should be more than 0, and less than or \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"equal to size of list\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return tasks.remove(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! Looks like you have entered an invalid task number.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskNum the number of the task to be marked as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void markAsDone(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size()) : \"taskNum should be more than 0, and less than or \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"equal to size of list\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            throw new DukeException(\"Uh-oh! Looks like you have entered an invalid task number.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves a list of tasks in the task list which contain a specified keyword."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param keyword the keyword used to find the matching tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the list of matching tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public TaskList getMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList matchingTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                matchingTasks.addTask(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Compares the specified task to the tasks in the list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * and check for duplicates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the specified task to compare with."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true if a duplicate exists in the list or false otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean hasDuplicate(Task task) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            if (t.equals(task)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves a specific task from the task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskNum the number of the task to be retrieved."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the retrieved task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assert (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasks.size()) : \"taskNum should be more than 0, and less than or \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"equal to size of list\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        int index \u003d taskNum - 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a string representation of the task list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the task list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        StringBuilder allTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            int index \u003d i - 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            allTasks.append(\"\\n\").append(i).append(\".\").append(tasks.get(index));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return allTasks.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 142
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents the part of Duke that deals with user interaction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** A line divider */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \"______________________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The scanner used for user interaction */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Ui for user interaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Reads user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates Duke\u0027s response with dividers (to improve readability)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param output Duke\u0027s response."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the specified output with dividers."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateDividers(String output) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return DIVIDER + \"\\n\" + output + \"\\n\" + DIVIDER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a welcome message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the welcome message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateWelcomeMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a farewell message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the farewell message."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateExitMessage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Bye. I hope to see you again soon!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message with all the tasks in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateAllTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (tasks.getNumOfTasks() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return \"You currently have no tasks in your list.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return \"Here are the tasks in your list:\\n\" + tasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message with a list of tasks"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * from the task list that contain a common keyword."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param keyword the specified keyword."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateFindMessage(String keyword, TaskList tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + tasks.getMatchingTasks(keyword);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message that a task has been successfully added into the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * The new total number of tasks will be recalculated and included in the message."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task that has been added into the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateAddedMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Task added successfully!\\n\\t\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + task + generateNumOfTasksMessage(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message that a task has been successfully marked as done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task that has been marked as done."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateDoneMessage(Task task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Task completed successfully!\\n\\t\" + task;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message that a task has been successfully deleted from the task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * The new total number of tasks will be recalculated and included in the message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task that has been deleted from the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateDeletedMessage(Task task, TaskList tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"Task deleted successfully!\\n\\t\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + task + generateNumOfTasksMessage(tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message that shows how many tasks are in the task list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateNumOfTasksMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return String.format(\"\\nNow you have %d task(s) in the list.\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                tasks.getNumOfTasks());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates an error message as and when an exception is thrown."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param e the exception thrown."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the error message."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Generates a message that a task was not added into the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * because a duplicate was detected."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task that was not successfully added"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String generateDuplicateMessage(Task task) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"The following task was not added as a duplicate was detected:\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + task;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 156
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will add a task into the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The task to be added */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Add Command with the specified task to be added."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Adds the task into the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Does not add the task into the list if a duplicate is detected."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the added message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (tasks.hasDuplicate(task)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return ui.generateDuplicateMessage(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateAddedMessage(task, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is not an exit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return false since this command is not an exit command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 52
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command based on the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Executes the command with the specified task list, ui and storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that deals with user interaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the generated message from the ui."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws DukeException if there are issues while executing the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public abstract String executeCommand(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates whether the command is an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true if an exit command is executed or false otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will delete a task from the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The number of the task to be deleted */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Delete Command with the specified number of the task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskNum the number of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Deletes the task from the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the deleted message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws DukeException if the user enters an invalid task number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Task task \u003d tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateDeletedMessage(task, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is not an exit command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return false since this command is not an exit command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 50
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will mark a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The number of the task to be marked as done */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Done Command with the specified number of the task to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param taskNum the number of the task to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Marks the task in the task list as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the done message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @throws DukeException if the user enters an invalid task number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.markAsDone(taskNum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateDoneMessage(tasks.getTask(taskNum));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is not an exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return false since this command is not an exit command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 49
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will terminate Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Terminates Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the farewell message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateExitMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is an exit command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true since this command is an exit command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 34
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will find matching tasks in the last list based on a specified keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The keyword used to find matching tasks */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Find Command with the specified keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param keyword the specified keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Finds the tasks in the task list that contain the keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the find message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateFindMessage(keyword, tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is not an exit command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return false since this command is not an exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a command that will display all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Gets all the tasks in the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param tasks the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param ui the ui that will generate the all tasks message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param storage the storage where the tasks will be saved."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return the ui-generated message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String executeCommand(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return ui.generateAllTasks(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Indicates that this command is not an exit command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return false since this command is not an exit command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a deadline to be completed before a due date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The date the deadline is due */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    protected LocalDate dueDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Deadline with the specified description and due date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param description the description of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param dueDate the due date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Deadline(String description, LocalDate dueDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Loads previous deadline details and creates a new instance of the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param deadlineDetails the details of the deadline in \u0027saved\u0027 format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a new instance of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static Deadline load(String deadlineDetails) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Split into type of task, status, description and due date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String[] splitDeadlineDetails \u003d deadlineDetails.split(\" \\\\| \", 4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String status \u003d splitDeadlineDetails[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String description \u003d splitDeadlineDetails[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        LocalDate dueDate \u003d LocalDate.parse(splitDeadlineDetails[3]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (status.equals(\"true\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the description and status of a deadline in a particular string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * This format is used for saving deadlines, i.e. \u0027saved\u0027 format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the deadline in a \u0027saved\u0027 format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String saveAs() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"D | \" + super.saveAs() + \" | \" + dueDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Checks if this Deadline is equal to the specified object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param obj the object to check."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true if this is equal to the specified object or false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (obj instanceof Deadline) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Deadline deadline \u003d (Deadline) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return this.description.equals(deadline.description)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    \u0026\u0026 this.dueDate.equals(deadline.dueDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a string representation of the deadline."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the deadline."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dueDate.format("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents an event to be held on a certain date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The date of the event */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    protected LocalDate eventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Event with the specified description and event date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param eventDate the event date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Event(String description, LocalDate eventDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Loads previous event details and creates a new instance of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param eventDetails the details of the event in \u0027saved\u0027 format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a new instance of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static Event load(String eventDetails) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Split into type of task, status, description and event date"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String[] splitEventDetails \u003d eventDetails.split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String status \u003d splitEventDetails[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String description \u003d splitEventDetails[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        LocalDate eventDate \u003d LocalDate.parse(splitEventDetails[3]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Event event \u003d new Event(description, eventDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (status.equals(\"true\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the description and status of an event in a particular string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * This format is used for saving events, i.e. \u0027saved\u0027 format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the event in a \u0027saved\u0027 format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String saveAs() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"E | \" + super.saveAs() + \" | \" + eventDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Checks if this Event is equal to the specified object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param obj the object to check."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true if this is equal to the specified object or false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (obj instanceof Event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Event event \u003d (Event) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return this.description.equals(event.description)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                    \u0026\u0026 this.eventDate.equals(event.eventDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a string representation of the event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventDate.format("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a task to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** The task description */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /** Indicates whether the task is completed or not */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new Task with the specified description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * A newly created task is always initially set as \"not done\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.description \u003d description.strip();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Retrieves the status icon which shows whether the task is done or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return \u00271\u0027 if the task is done or \u00270\u0027 if the task is not done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the description and status of the task in a particular string format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * This format is used for saving tasks, i.e. \u0027saved\u0027 format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the task in a \u0027saved\u0027 format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String saveAs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return isDone + \" | \" + description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a string representation of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 58
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " * Represents a to-do to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Creates a new To-do with the specified description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param description the description of the to-do."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Loads previous to-do details and creates a new instance of the to-do."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param toDoDetails the details of the to-do in \u0027saved\u0027 format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a new instance of the to-do."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public static ToDo load(String toDoDetails) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        // Split into type of task, status and description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String[] splitToDoDetails \u003d toDoDetails.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String status \u003d splitToDoDetails[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String description \u003d splitToDoDetails[2];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        ToDo todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (status.equals(\"true\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns the description and status of a to-do in a particular string format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * This format is used for saving to-dos, i.e. \u0027saved\u0027 format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the to-do in a \u0027saved\u0027 format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String saveAs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"T | \" + super.saveAs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Checks if this ToDo is equal to the specified object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @param obj the object to check."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return true if this is equal to the specified object or false otherwise."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else if (obj instanceof ToDo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            ToDo toDo \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return this.description.equals(toDo.description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * Returns a string representation of the to-do."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     * @return a string representation of the to-do."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 77
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_deleteCommand_invalidTaskNumber() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"delete bla\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! Looks like you have entered an invalid task number.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_deleteCommand_taskNumberMissing() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! You did not enter the number of the task you wish to delete.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_doneCommand_invalidTaskNumber() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"done blab\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! Looks like you have entered an invalid task number.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_doneCommand_taskNumberMissing() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"done\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! You did not enter the number of the task you wish to complete.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_invalidEntry() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"bla\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! I have no idea what that means.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_deadlineTask_invalidDateFormat() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"deadline CS2103T project /by tonight\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! Looks like you have got the format for the date wrong.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_eventTask_invalidDateFormat() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"event team meeting /at friday\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! Looks like you have got the format for the date wrong.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_emptyDescription() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! The description of your task cannot be empty.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void parse_wrongDescriptionFormat() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Exception e \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "            Parser.parse(\"event /at2020-05-09\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"Uh-oh! Looks like you have got the format for the description wrong.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 99
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final ToDo todo \u003d new ToDo(\"homework\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Deadline deadline \u003d new Deadline(\"assignment\", LocalDate.parse(\"2020-09-05\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Event event \u003d new Event(\"party\", LocalDate.parse(\"2020-09-04\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void addTask_tasksAddedSuccessfully() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"\\n1.[T][0] homework\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"\\n2.[D][0] assignment (by: 5 Sep 2020)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"\\n3.[E][0] party (at: 4 Sep 2020)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, tasks.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void deleteTask_deleteSecondTask_taskDeletedSuccessfully() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.deleteTask(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"\\n1.[T][0] homework\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"\\n2.[E][0] party (at: 4 Sep 2020)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, tasks.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void getTasks_tasksRetrievedSuccessfully() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        List\u003cTask\u003e actualTasks \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedTasks.add(todo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedTasks.add(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        expectedTasks.add(event);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expectedTasks, actualTasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void getNumOfTasks_numOfTasksRetrievedSuccessfully() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        int numOfTasks \u003d tasks.getNumOfTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(3, numOfTasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void getTask_taskRetrievedSuccessfully() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Task task \u003d tasks.getTask(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(todo, task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void markAsDone_taskCompletedSuccessfully() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.markAsDone(3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(\"\\n1.[T][0] homework\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"\\n2.[D][0] assignment (by: 5 Sep 2020)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "                + \"\\n3.[E][1] party (at: 4 Sep 2020)\", tasks.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 92
    }
  },
  {
    "path": "src/test/java/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final ToDo todo \u003d new ToDo(\"homework\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Deadline deadline \u003d new Deadline(\"assignment\", LocalDate.parse(\"2020-09-05\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    private final Event event \u003d new Event(\"party\", LocalDate.parse(\"2020-09-04\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    public void generateNumOfTasksMessage_numOfTasksgeneratedSuccessfully() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String actual \u003d ui.generateNumOfTasksMessage(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        String expected \u003d \"\\nNow you have 3 task(s) in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mhdsyfq"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "mhdsyfq": 2,
      "-": 32
    }
  }
]
