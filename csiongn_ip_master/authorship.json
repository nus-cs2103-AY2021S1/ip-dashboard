[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "csiongn": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "# Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003e Notes about the command format"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003e Words in `UPPER_CASE` are parameters to be supplied by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003e Example: In `todo DESCRIPNTION`, `DESCRIPTION` is a parameter which can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003e be supplied as `finish homework`."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "## Basic Features"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `todo` – Add a todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Adds a todo to duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `todo DESCRIPTION`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`todo cry`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Got it. I\u0027ve added this task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[T][✘] cry"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Now you have 1 tasks in the list "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `deadline` – Add a task with deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Adds a new task with deadline to duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `deadline DESCRIPTION /by YYYY-MM-DD`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`deadline finish iP /by 2020-09-14`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Got it. I\u0027ve added this task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[D][✘] finish iP (by: 2020-09-14)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Now you have 2 tasks in the list "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `event` – Add an event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Adds a new event with a specified date and time to duke."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `event DESCRIPTION /at DATE_AND_TIME`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`event watch youtube /at now`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Got it. I\u0027ve added this task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[E][✘] watch youtube (at: now)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Now you have 3 tasks in the list "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `list` – List all tasks and events"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "List all tasks and events in duke."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Here are the tasks in your list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "1. [T][✘] cry"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "2. [D][✘] finish iP (by: 2020-09-14)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "3. [E][✘] watch youtube (at: now)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `done` – Marks task or event as done"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Selects a task or event by index and marks it as done"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[T][✓] cry"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `find` – Find a task or event"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Finds task or event by keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`find finish`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Here are your tasks matching finish"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "csiongn"
        },
        "content": "1. [D][✘] finish iP (by: 2020-09-14)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `bye` – Save and exit"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Saves the current list of tasks, events and notes to storage and exits."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "File saved!"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": "## Notes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `notes add` – Add a note to duke"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Adds a new note to duke."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `notes add title/TITLE description/DESCRIPTION priority/PRIORITY`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": "* Duke has three recognised priorities – Low, Medium and High"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "  * To specify a priority, any of the following formats below are accepted"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    * Low – `l`, `low`, `Low`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    * Medium – `m`, `medium`, `Medium`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    * High – `h`, `high`, `High`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`notes add title/it\u0027s week 6!! description/die :( priority/high`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`Note with title it\u0027s week 6!! created!`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `notes list` – List all notes"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Lists all notes in duke."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`notes list`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "csiongn"
        },
        "content": "### `notes delete` – Deletes a note"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Deletes a specific note."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Format: `notes delete INDEX`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "csiongn"
        },
        "content": "`notes delete 3`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "csiongn"
        },
        "content": "Okay. I\u0027ve removed this note: "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "csiongn"
        },
        "content": "[L] TITLE: DESCRIPTION"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "csiongn"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "csiongn": 165
    }
  },
  {
    "path": "sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Duke.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Event.java"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class representing commands to add task to TaskList"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final TaskType type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new command to add task to the list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param type Type of task to be added to the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public AddCommand(TaskType type, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to add a task by adding task into given TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks   TaskList representing list of current tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui      Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException    If command is to add event or deadline but no date and time is provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If an unrecognised command is given."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throws EmptyBodyException, UnknownInputException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert tasks !\u003d null : \"tasks shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert ui !\u003d null : \"ui shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert storage !\u003d null : \"storage shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert runnables !\u003d null : \"runnables shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case TODO: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return tasks.createTask(newTodo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case DEADLINE: {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String[] text \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (text.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"deadline\", \"deadline\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String description \u003d text[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String stringDeadline \u003d text[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                LocalDate deadline \u003d LocalDate.parse(stringDeadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                Task newDeadline \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return tasks.createTask(newDeadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new UnknownInputException(stringDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case EVENT: {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String[] text \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (text.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"date and time\", \"event\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String description \u003d text[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String dateTime \u003d text[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return tasks.createTask(newEvent);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnknownInputException(this.type.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 89
    }
  },
  {
    "path": "src/main/java/AddNoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public AddNoteCommand(String title, String description, Priority priority) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Note newNote \u003d Note.createNote(this.title, this.description, this.priority);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        notes.createNote(newNote);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"Note with title %s created!\", this.title);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        AddNoteCommand that \u003d (AddNoteCommand) o;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!title.equals(that.title)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!description.equals(that.description)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return priority \u003d\u003d that.priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int result \u003d title.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        result \u003d 31 * result + description.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        result \u003d 31 * result + priority.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this.title + this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 63
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Abstract Methods"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @params notes NotesList representing list of current notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    abstract String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 19
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class for a tasks with a deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new task with deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param deadline deadline of the task in yyyy-mm-dd format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If description is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Deadline(String description, LocalDate deadline) throws EmptyBodyException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.deadline + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 29
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class representing commands to delete a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to delete a task by deleting specified task from given TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert tasks !\u003d null : \"tasks shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert ui !\u003d null : \"ui shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert storage !\u003d null : \"storage shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert runnables !\u003d null : \"runnables shouldn\u0027t be null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 44
    }
  },
  {
    "path": "src/main/java/DeleteNoteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class representing commands to delete a task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final int noteNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DeleteNoteCommand(int noteNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.noteNumber \u003d noteNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to delete a note by deleting specified note from given NotesList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param notes NotesList representing list of current notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If note number is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return notes.deleteNote(noteNumber);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 40
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        dialog.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 57
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to mark a task as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to mark a task as done in TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 40
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final NotesList notes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new duke bot that saves list of tasks to /data/todo.txt."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.storage \u003d new Storage(\"./data/todo.txt\", \"./data/notes.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (storage.doesFileExistTasks()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.tasks \u003d storage.readTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            storage.createFileTasks();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (storage.doesFileExistNotes()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.notes \u003d storage.readNotes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            storage.createFileNotes();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.notes \u003d new NotesList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String getResponse(String fullCommand, Map\u003cString, Runnable\u003e runnables) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return c.execute(tasks, notes, ui, storage, runnables);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "csiongn": 42
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DukeException (String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(\":((( OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/EmptyBodyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class EmptyBodyException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public EmptyBodyException(String field, String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"The %s of a %s cannot be empty.\", field, type));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to represent a task happening at a specified date and time."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param dateTime date and time of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If the description is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Event(String description, String dateTime) throws EmptyBodyException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 27
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to finish running the program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command by saving the list of tasks to the computer and printing the result"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param runnables Map object consisting of logic encapsulated as Runnables mapped by a name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        storage.save(tasks, notes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert runnables.containsKey(\"handleExit\") : \"Runnable object should contain code for handleExit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        runnables.get(\"handleExit\").run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return EXIT + \"\\n File saved!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 36
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String substring;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindCommand(String substring) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.substring \u003d substring;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        TaskList filteredTasks \u003d tasks.findTasks(this.substring);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"Here are your tasks matching %s\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"%s\", this.substring, filteredTasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 25
    }
  },
  {
    "path": "src/main/java/IndexOutOfBoundsDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class IndexOutOfBoundsDukeException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public IndexOutOfBoundsDukeException(int number, int maxSize, String thing) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"Cannot find %s %s with only %s %s\", thing, number, maxSize, thing));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 9
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to list the current tasks the user has."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the ListCommand by printing the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    k * @param storage Storage object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"Here are the tasks in your list!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"%s\", tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 28
    }
  },
  {
    "path": "src/main/java/ListNotesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to list the current tasks the user has."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ListNotesCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the ListCommand by printing the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    k * @param storage Storage object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    String execute(TaskList tasks, NotesList notes, Ui ui, Storage storage, Map\u003cString, Runnable\u003e runnables) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"Here are the notes in your list!\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"%s\", notes);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 40
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.AbstractMap;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class MainWindow\u003cList\u003e extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Jigglypuff.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pikachu.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Runnable handleExit \u003d () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert !userInput.isDisable() : \"User input should not be disabled when calling handleExit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assert !sendButton.isDisable() : \"Button to send message should not be disabled when calling handleExit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        sendButton.setDisable(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Map\u003cString, Runnable\u003e runnables \u003d Stream.of("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            new AbstractMap.SimpleEntry\u003c\u003e(\"handleExit\", this.handleExit))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String response \u003d duke.getResponse(input, this.runnables);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 68
    }
  },
  {
    "path": "src/main/java/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Note implements Serializable {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Static Variables"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static int count \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private boolean isArchived;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Note(int id, String title, Priority priority, String description, boolean isArchived) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Static Factory Methods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static Note createNote(String title, String description, Priority priority) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Validator.requireNonNull(title, description, priority);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int id \u003d count;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        count +\u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new Note(id, title, priority, description, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void archive() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (!this.isArchived) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            this.isArchived \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnsupportedOperationException(\"Note is already archived.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void editDescription(String newDescription) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void editTitle(String newTitle) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"[%s] %s: %s\", this.priority.toString().charAt(0), this.title, this.description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 56
    }
  },
  {
    "path": "src/main/java/NotesList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class NotesList implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final List\u003cNote\u003e notesList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public NotesList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.notesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public NotesList(List\u003cNote\u003e listofNotes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.notesList \u003d listofNotes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Adds a new note into the NotesList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param newNote note to be added into the NotesList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of adding the note into the NotesList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String createNote(Note newNote) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        notesList.add(newNote);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int newSize \u003d notesList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String noteText \u003d String.format(\"Got it. I\u0027ve added this note:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \" %s\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"Now you have %s tasks in the list\", newNote, newSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return noteText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Deletes a note with specified note number."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param noteNumber note number of note to be deleted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of deleting note."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If note number given is not valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String deleteNote(int noteNumber) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Note note \u003d notesList.get(noteNumber - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            notesList.remove(noteNumber - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String deleteText \u003d String.format(\"Okay. I\u0027ve removed this note:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    + \" %s\", note);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return deleteText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new IndexOutOfBoundsDukeException(noteNumber, notesList.size(), \"note\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int sizeOfList \u003d notesList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfList; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String text \u003d notesList.get(i).toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            sb.append(String.format(\" %s. %s\\n\", number, text));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 73
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.MissingFormatArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle parsing of input into commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses the given command in string form into a Command object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param textCommand the command to be parsed in string form."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Command after being parsed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException    If command in string form is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If command in string form is not a recognised command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static Command parse(String textCommand) throws EmptyBodyException, UnknownInputException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String[] words \u003d textCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String remaining \u003d words.length \u003e 1 ? words[1] : \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (remaining.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"task number\", \"task\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(remaining);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (remaining.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"task number\", \"task\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(remaining);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(TaskType.TODO, remaining);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(TaskType.DEADLINE, remaining);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(TaskType.EVENT, remaining);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"find\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new FindCommand(remaining);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"notes\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return parseNotesCommand(remaining);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnknownInputException(firstWord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses the given notes portion of command in string form into a Command object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param command the notes portion of command to be parsed in string form."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Command after being parsed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException    If command in string form is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If command in string form is not a recognised command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static Command parseNotesCommand(String command) throws UnknownInputException, EmptyBodyException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Validator.requireNonNull(command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String[] words \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String remaining \u003d words.length \u003e 1 ? words[1] : \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String title \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String description \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Priority priority \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (words.length \u003e 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            // Formatting command parameters"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            List\u003cString\u003e rawParameters \u003d Arrays.asList(remaining.split(\" (?\u003d\\\\w*[a-z]+\\\\/)\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Map\u003cString, Object\u003e parameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            rawParameters.forEach(parameter -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String[] rawSplitParameters \u003d parameter.split(\"/\", 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                if (rawSplitParameters.length \u003e 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    String name \u003d rawSplitParameters[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    Object value \u003d rawSplitParameters[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    parameters.put(name, value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            // Parsing command parameters"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            for (Map.Entry\u003cString, Object\u003e entry : parameters.entrySet()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                switch (entry.getKey()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"title\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"t\": {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    title \u003d (String) entry.getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"description\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"d\": {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    description \u003d (String) entry.getValue();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"priority\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                case \"p\": {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    priority \u003d parsePriority((String) entry.getValue());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    throw new UnknownInputException(\"Unknown parameter name \" + entry.getKey());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"add\": {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                Validator.requireNonNull(title, description, priority);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return new AddNoteCommand(title, description, priority);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new MissingFormatArgumentException(\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"list\": {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new ListNotesCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (remaining.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"note number\", \"note\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(remaining);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new DeleteNoteCommand(taskNumber);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnknownInputException(\"Unknown notes command: \" + firstWord);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses a string representing priority into a Priority object."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param priority String form of priority."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Priority object with priority."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If string does not represent a recognised priority."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static Priority parsePriority(String priority) throws UnknownInputException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"h\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"High\": {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"m\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"Medium\": {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"Low\": {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnknownInputException(\"Unknown priority: \" + priority); // todo: change exception name"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 179
    }
  },
  {
    "path": "src/main/java/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    LOW, MEDIUM, HIGH"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 3
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle logic related to reading and writing of files to storage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String filePathTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String filePathNotes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Storage(String filePathTasks, String filePathNotes) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.filePathTasks \u003d filePathTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.filePathNotes \u003d filePathNotes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Checks whether the file exists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Boolean representing whether the file exists."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean doesFileExistTasks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        File file \u003d new File(this.filePathTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean doesFileExistNotes() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        File file \u003d new File(this.filePathNotes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void createFileTasks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            File file \u003d new File(this.filePathTasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void createFileNotes() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            File file \u003d new File(this.filePathNotes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void save(TaskList tasks, NotesList notes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(this.filePathTasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.writeObject(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fileOutputStream \u003d new FileOutputStream(this.filePathNotes);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.writeObject(notes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList readTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (!doesFileExistTasks()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new UnsupportedOperationException(\"File does not exist\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(this.filePathTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            TaskList tasks \u003d (TaskList) objectInputStream.readObject();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            System.out.println(\"Error reading file\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public NotesList readNotes() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (!doesFileExistNotes()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new UnsupportedOperationException(\"File does not exist\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(this.filePathNotes);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            NotesList notes \u003d (NotesList) objectInputStream.readObject();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            System.out.println(\"Error reading file\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new NotesList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 107
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a generic task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If description is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Task(String description) throws EmptyBodyException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new EmptyBodyException(\"description\", this.getClass().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns a boolean denoting whether task is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return isDone Boolean denoting whether task is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 50
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList(List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskList \u003d listOfTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Adds a new task into the TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param newTask task to be added into the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of adding the task into the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String createTask(Task newTask) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int newSize \u003d taskList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String todoText \u003d String.format(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \" %s\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"Now you have %s tasks in the list\", newTask, newSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return todoText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Marks a task with specified task number in TaskList as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param taskNumber task number of task to be marked as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of marking task with specified task number as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number given is not valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String markAsDone(int taskNumber) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String doneText \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    + \" %s\", task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return doneText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new IndexOutOfBoundsDukeException(taskNumber, taskList.size(), \"task\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Deletes a task with specified task number."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param taskNumber task number of task to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of deleting task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number given is not valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String deleteTask(int taskNumber) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String deleteText \u003d String.format(\"Okay. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    + \" %s\", task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return deleteText;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new IndexOutOfBoundsDukeException(taskNumber, taskList.size(), \"task\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Finds all tasks matching a substring and returns them in the form of a TaskList."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param substring part of a string to find tasks with it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return TaskList containing all tasks matching the given substring."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList findTasks(String substring) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        List\u003cTask\u003e listOfTasks \u003d Arrays.asList("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                taskList.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                        .filter(task -\u003e task.description.contains(substring)) // Filter tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                 .toArray(Task[]::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return new TaskList(listOfTasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int sizeOfList \u003d taskList.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfList; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String text \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            sb.append(String.format(\" %s. %s\\n\", number, text));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 105
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    DEADLINE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of Todo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If description given is empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Todo(String description) throws EmptyBodyException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 20
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle input and output of program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String NAME \u003d \"DUKE\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String INTRODUCTION \u003d String.format("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \"Hello! I\u0027m %s\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    + \"I was created for the module CS2103T\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    + \"What can I do for you?\", NAME);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Reads the next line from standard input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return The next line from standard input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether there is another line in standard input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Boolean representing whether there is another line in standard input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showMessage(INTRODUCTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints a line."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints a given message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param message message to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        System.out.println(\"    \" + message.replaceAll(\"\\n\", \"\\n    \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 68
    }
  },
  {
    "path": "src/main/java/UnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class UnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public UnknownInputException(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"I\u0027m sorry, but I don\u0027t know what %s means :-(\", input));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/Validator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to store helper functions to validate variables"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Validator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // todo: fix ambiguous method call for requireNonNull(null) \u003c- not sure which method to call"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static void requireNonNull(Object object) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Objects.requireNonNull(object);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static void requireNonNull(Object... objects) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Arrays.stream(objects).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static void requireNonNull(Collection\u003cObject\u003e objects) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        objects.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.geometry.Point3D?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" graphicTextGap\u003d\"0.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003crotationAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \u003cPoint3D /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003c/rotationAxis\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "csiongn": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../stylesheets/stylesheet.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: #E5EDB7;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #8BCDCD; -fx-border-color: black; -fx-border-width: 0.4;\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \u003cFont name\u003d\"Marker Felt Thin\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #63664f#63664f;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "csiongn": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_addNewNote1() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command addNoteCommand \u003d Parser.parseNotesCommand(\"add t/hehe d/it\u0027s week 5 p/low\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command expectedNoteCommand \u003d new AddNoteCommand(\"hehe\", \"it\u0027s week 5\", Priority.LOW);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expectedNoteCommand, addNoteCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_addNewNote2() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command addNoteCommand \u003d Parser.parseNotesCommand(\"add t/it\u0027s week 5.. d/cry :( priority/high\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command expectedNoteCommand \u003d new AddNoteCommand(\"it\u0027s week 5..\", \"cry :(\", Priority.HIGH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expectedNoteCommand, addNoteCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_listNotes() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command listNotesCommand \u003d Parser.parseNotesCommand(\"list\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Command expectedNoteCommand \u003d new ListNotesCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expectedNoteCommand, listNotesCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_invalidParameterName_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Executable code \u003d () -\u003e Parser.parseNotesCommand(\"add t/??? m/HAHAHAH p/high\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(Exception.class, code);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_missingParameters_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Executable code \u003d () -\u003e Parser.parseNotesCommand(\"add t/HAHAHAH p/high\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(Exception.class, code);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void parseNotesCommand_wrongPriority_exceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        Executable code \u003d () -\u003e Parser.parseNotesCommand(\"add t/HAHAHAH priority/veryHigh\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(Exception.class, code);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 65
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void createTask_emptyTaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \" [T][✘] cry\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \"Now you have 1 tasks in the list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.createTask(newTask);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void markAsDone_task() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \" [T][✓] cry\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.markAsDone(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsDukeException | EmptyBodyException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void deleteTask_task() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Okay. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                + \" [T][✘] cry\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.deleteTask(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsDukeException | EmptyBodyException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_task() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \" 1. [T][✘] cry\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail(\"Expected: \" + expected + \"\\n Actual:\" + e.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 70
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_creatingTodo() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"[T][✘] hehe\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d new Todo(\"hehe\").toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail(\"Expected: \" + expected + \"\\n Actual:\" + e.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_creatingTodoWithEmptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d \":((( OOPS!!! The description of a class Todo cannot be empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        EmptyBodyException e \u003d assertThrows(EmptyBodyException.class, () -\u003e new Todo(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 28
    }
  },
  {
    "path": "src/test/java/ValidatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ValidatorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void requireNonNull_passNullIn_exceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Validator.requireNonNull(null, null, null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Validator.requireNonNull(1, 2, 3, null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void requireNonNull_passObjectsIn() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertDoesNotThrow(() -\u003e Validator.requireNonNull(1, 2, 3));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertDoesNotThrow(() -\u003e Validator.requireNonNull(\"hehe\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertDoesNotThrow(() -\u003e Validator.requireNonNull(\"Pikachu\", \"says\", \"hello\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 22
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "HAHAHAHAHAHHA"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "csiongn": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "# delete saved todo file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "if [ -e \"./data\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    rm -rf ./data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "csiongn": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Event.java"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5
    }
  }
]
