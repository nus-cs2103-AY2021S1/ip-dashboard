[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    archiveBaseName \u003d \"Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 18,
      "-": 43
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Description of feature."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Juan\u0027s Duke program is a personal tasks handler that keeps track of your daily todos."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "## Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Quickstart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - adding a new todo task: ```todo```"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - adding a new deadline task:  ```deadline``` "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - adding a new event task: ```event```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - marking a task as done: ```done```"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - deleting a task: ```delete```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - finding a task: ```find```"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - listing all tasks: ```list```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - undoing a task: ```undo```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- FAQ"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Command Summary"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Quickstart"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "1. Start Juan\u0027s Duke program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "2. Duke will show up and look something like this."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "![Duke starting page](/Users/juanlie/cs2103t/pw2/ip/src/main/resources/images/Screenshot 2020-09-16 at 6.37.07 PM.jpg)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "3. Type the command in the user input box provided located at the bottom."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "4. Press enter or click send to send out the command. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Some command examples that you can try:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `todo hw`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `deadline project /by 2020-10-02`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `event meeting /at school`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `undo`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `done 1`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `delete 1`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `list`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    - `find hw`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "5. Refer to the Features list below for details of each command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Adding a todo task: `todo`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adds a todo to the list of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- todo homework"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- todo laundry"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Adding a deadline task: `deadline`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adds a deadline to the list of task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `deadline \u003cdescription\u003e /by \u003ctime deadline\u003e`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Time only in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- deadline homework /by 2020-03-15"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- deadline project /by Monday"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Adding an Event task: `event`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adds an event to the list of task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `event \u003cdescription\u003e /at \u003ctime or place\u003e`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Time only in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- event meeting /at School"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- event lecture /at 2020-05-19"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Marking a task as done: `done`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Marks a task in the list as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `done \u003ctask number\u003e`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Task number is the order shown in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- done 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- done 2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Deleting a task: `delete`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Deletes a task in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Task number is the order shown in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- delete 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- delete 2"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Finding a task: `find`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Finds a task that matches the keyword."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- Keyword is case-sensitive."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- find hw"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- find school"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Listing all tasks: `list`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Lists all tasks in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "#### Undoing an action: `undo`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Undo the most recent action."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "- undo"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### FAQ"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Q: How do I save my list for future use?"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "A: Duke automatically saves the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Q: Can `undo` be used to undo more than one actions?"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "A: Yes, undo will work until there is no action to undo."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Q: Can I redo an action?"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "A: Duke does not allow redo."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "### Command summary"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adding a todo task | `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adding a deadline task | `deadline \u003cdescription\u003e /by \u003ctime deadline\u003e`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Adding an event task | `event \u003cdescription\u003e /at \u003ctime or place\u003e`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Marking a task as done | `done \u003ctask number\u003e`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Deleting a task | `delete \u003ctask number\u003e`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Finding a task | `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Listing all tasks | `list`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "Undoing an action | `undo`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 130,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(name, deadline);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getIndicator() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 13
    }
  },
  {
    "path": "src/main/java/duke/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DeadlineException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String errorMessage \u003d \"OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    DeadlineException() {}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getErrorMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 10
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 62
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Storage s;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a Duke class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Duke(String filePath) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.create();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            tasks \u003d new TaskList(s.toArrayList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            ui \u003d new Ui(tasks, s);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Runs the whole program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ui.start();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String runCommand(String command) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return Parser.processCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        new Duke(\"/Users/juanlie/cs2103t/pw2/ip/data\").run();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 37,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Event(String name, String at) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(name, at);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getIndicator() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 14
    }
  },
  {
    "path": "src/main/java/duke/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class EventException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String errorMessage \u003d \"OOPS!!! The description of a event cannot be empty.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    EventException() {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getErrorMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 11
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Duke duke \u003d new Duke(\"/Users/juanlie/cs2103t/pw2/ip/data\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public Main() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private VBox dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String greetings \u003d \"Hello from\\n\" + \" ____        _\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\" + \"\\n\" + \"I can be your friend who manages your task!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greetings, dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private void handleUserInput() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String response \u003d duke.runCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 56
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Parser() {}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Processes all the commands given by the user and triggers functions correspondingly."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param tl the TaskList object defined in Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui the Ui object defined in Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String processCommand(String command, TaskList tl, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int indexOfSlash \u003d command.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToBye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.length() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return parseCommand(command, arr, indexOfSlash, ui);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToCommandDoesNotExist();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parse the command and does actions accordingly"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of current tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param indexOfSlash index of \u0027/\u0027 given in command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui the ui object used to send replies to the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception exception given by listParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String parseCommand(String command, ArrayList\u003cTask\u003e arr, int indexOfSlash, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return listParser(arr, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return findParser(command, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return doneParser(command, arr, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return todoParser(command, ui, indexOfSlash);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 4).equals(\"undo\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return undoParser(command, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToCommandDoesNotExist();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 5).equals(\"event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return eventParser(command, ui, indexOfSlash);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToCommandDoesNotExist();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return deleteParser(command, arr, ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.length() \u003d\u003d 6 || command.length() \u003d\u003d 7) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToCommandDoesNotExist();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (command.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return deadlineParser(command, ui, indexOfSlash);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToCommandDoesNotExist();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the list command and responds accordingly using the ui"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of current tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String listParser(ArrayList\u003cTask\u003e arr, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (arr.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToEmptyList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the find command and responds accordingly using the ui"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String findParser(String command, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToFindWrongSyntax();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String searchWord \u003d command.substring(5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToFind(searchWord);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Processes the done command and responds accordingly using the ui"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of current tasks"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String doneParser(String command, ArrayList\u003cTask\u003e arr, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToDoneWrongSyntax();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(command.substring(5));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (taskNumber \u003e arr.size()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDoneFail();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDone(taskNumber);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Processes the todo command and responds accordingly using the ui"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param indexOfSlash index of \u0027/\u0027 given in command"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String todoParser(String command, Ui ui, int indexOfSlash) throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.length() \u003d\u003d 4 || indexOfSlash !\u003d -1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToTodoWrongSyntax();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToTodo(command.substring(5));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String undoParser(String command, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.length() \u003e 4) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToTodoWrongSyntax();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToUndo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Processes the event command and responds accordingly using the ui"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param indexOfSlash index of \u0027/\u0027 given in command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String eventParser(String command, Ui ui, int indexOfSlash) throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (indexOfSlash \u003d\u003d -1 || command.length() \u003d\u003d 5"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || !command.substring(indexOfSlash + 1, indexOfSlash + 3).equals(\"at\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToEventFail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String time \u003d command.substring(indexOfSlash + 4);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                LocalDate parsed \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToEvent(command.substring(6, indexOfSlash - 1),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        parsed.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToEvent(command.substring(6, indexOfSlash - 1),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        command.substring(indexOfSlash + 4));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Parses the delete command and responds accordingly using the ui"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of current tasks"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String deleteParser(String command, ArrayList\u003cTask\u003e arr, Ui ui) throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (command.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToDeleteWrongSyntax();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(command.substring(7));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (taskNumber \u003e arr.size()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDeleteFail();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDelete(taskNumber);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Processes the event command and responds accordingly using the ui"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param command command given by user"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param ui ui used to send replies to user"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param indexOfSlash index of \u0027/\u0027 given in command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private static String deadlineParser(String command, Ui ui, int indexOfSlash) throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (indexOfSlash \u003d\u003d -1 || command.length() \u003d\u003d 8"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                || !command.substring(indexOfSlash + 1, indexOfSlash + 3).equals(\"by\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return ui.respondToDeadlineFail();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String time \u003d command.substring(indexOfSlash + 4);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                LocalDate parsed \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDeadline(command.substring(9, indexOfSlash - 1),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        parsed.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } catch (DateTimeParseException d) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return ui.respondToDeadline(command.substring(9, indexOfSlash - 1),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        command.substring(indexOfSlash + 4));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 214
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Stack\u003cString\u003e actions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Storage(String path) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.filepath \u003d path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.file \u003d new File(path);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.actions \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Creates a new file if it does not exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    boolean create() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return !file.exists() ? file.createNewFile() : false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Reads the hard disk and prints the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String printList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String str \u003d \"Here are the tasks in your list: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            str +\u003d \"\\n\" + counter + \". \" + task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Counts the number of lines in the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    int lineCounter() throws FileNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            s.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Makes a string from the startIndex to the end of an array of strings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param startIndex starting index."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param splits array of strings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param str accumulation of the string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String stringMaker(int startIndex, String[] splits, String str) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return startIndex \u003e\u003d splits.length - 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                 ? str"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                 : stringMaker(startIndex + 1, splits, splits[startIndex] + \" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Reads the hard disk and converts it into an arraylist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return ArrayList(Task) the arraylist representation of the hard disk"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    ArrayList\u003cTask\u003e toArrayList() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (lineCounter() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return arr;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                int counter \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    String task \u003d s.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    if (task.charAt(1) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        arr.add(new Todo(task.substring(7)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    } else if (task.charAt(1) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String[] splits \u003d task.split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String name \u003d splits[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String deadline \u003d stringMaker(3, splits, \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        arr.add(new Deadline(name, deadline));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String[] splits \u003d task.split(\" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String name \u003d splits[1];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        String deadline \u003d stringMaker(3, splits, \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                        arr.add(new Event(name, deadline));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return arr;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the hard disk based on the provided arraylist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr the arraylist that is being copied to the hard disk."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void listWriter(ArrayList\u003cTask\u003e arr) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Task t : arr) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String keyword \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                keyword \u003d \"by\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                keyword \u003d \"at\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String indicator \u003d t.getIndicator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String icon \u003d t.getIcon();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            assert (indicator.equals(\"[T]\") || indicator.equals(\"[D]\") || indicator.equals(\"[E]\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    \u0026\u0026 (icon.equals(\"[\" + \"\\u2713\" + \"] \") || icon.equals(\"[\" + \"\\u2718\" + \"] \"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String text \u003d indicator + icon + t.getName() + toPrint + \"\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            fw.write(text);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 139
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Task(String name, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns a string of icon."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return isDone ? \"[\" + \"\\u2713\" + \"] \" : \"[\" + \"\\u2718\" + \"] \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the task as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void taskIsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Updates the task as not done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    void taskIsNotDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Returns a string of indicator."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getIndicator() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 56
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private ArrayList\u003cTask\u003e arr;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.arr \u003d arr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Getter fot the arr."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @return arr"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public ArrayList\u003cTask\u003e getArr() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.arr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Adds the task to arr."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param t task that is being added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        arr.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Removes the task to arr."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param t task that is being added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void removeTask(Task t) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        arr.remove(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 32
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Todo(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getIndicator() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 14
    }
  },
  {
    "path": "src/main/java/duke/TodoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class TodoException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private String errorMessage \u003d \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    TodoException() {}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    String getErrorMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 10
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private boolean exited \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private TaskList tl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Storage s;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    private Stack\u003cString\u003e actions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    Ui(TaskList tl, Storage s) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.tl \u003d tl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.s \u003d s;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.actions \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Starts the scanner and takes in the commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String logo \u003d \" ____        _\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo + \"\\n\" + \"I can be your friend who manages your task!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            while (!exited) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Parser.processCommand(command, tl, this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Stops the scanner when the user inputs in \"bye\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        exited \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string everytime the user puts up a task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr temporary list of tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param t the task to print out"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String print(ArrayList\u003cTask\u003e arr, Task t) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"by\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"at\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\" + \"\\n\" + t.getIndicator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + t.getIcon() + t.getName() + toPrint + \"\\n\" + \"Now you have \" + arr.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a list of tasks that match the searchword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr temporary list of tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String printForFind(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (arr.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return \"There is no task that matches your searchword\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String str \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            for (Task t: arr) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String keyword \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    keyword \u003d \"by\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    keyword \u003d \"at\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                    toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                str +\u003d \"\\n\" + counter + \". \" + t.getIndicator() + t.getIcon() + t.getName() + toPrint;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string everytime the user indicates a task as done"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String printForDone(ArrayList\u003cTask\u003e arr, Task t) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"by\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"at\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Got it. Duke has marked this task as done:\" + \"\\n\" + t.getIndicator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + t.getIcon() + t.getName() + toPrint + \"\\n\" + \"Now you have \" + arr.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string everytime the user indicates a task as not done"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr arraylist of tasks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String printForUnDone(ArrayList\u003cTask\u003e arr, Task t) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"by\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"at\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Got it. Duke has marked this task as not done:\" + \"\\n\" + t.getIndicator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + t.getIcon() + t.getName() + toPrint + \"\\n\" + \"Now you have \" + arr.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string everytime the user deletes a task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param arr temporary list of tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param t the task to print out"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public static String printForDelete(ArrayList\u003cTask\u003e arr, Task t) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String keyword \u003d \"\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"by\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            keyword \u003d \"at\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            toPrint \u003d \" (\" + keyword + \": \" + t.getTime() + \")\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Got it. Duke has removed this task:\" + \"\\n\" + t.getIndicator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                + t.getIcon() + t.getName() + toPrint + \"\\n\" + \"Now you have \" + arr.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out the bye statement"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToBye() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Bye. Please come back soon :(\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string saying that the list is empty"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToEmptyList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"You currently do not have any todos.\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out the list of tasks when the user inputs in \"list\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToList() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return s.printList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement when the user forgets to put the searchword."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToFindWrongSyntax() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Provide a number of the todo that you want to mark as done!\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints the filtered list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param searchWord the word on which the user wants to base their search."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToFind(String searchWord) throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        for (Task t: tl.getArr()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (t.getName().contains(searchWord)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                temp.add(t);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return printForFind(temp);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string whenever the user inputs in an invalid task number to mark as done"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDoneFail() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"The specified todo does not exist!\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a string whenever the user forgets to input in the task number"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDoneWrongSyntax() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Provide a number of the todo that you want to mark as done!\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out the statement saying that task has been marked as done and updates the list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDone(int taskNumber) throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int position \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Task t \u003d arr.get(position);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        t.taskIsDone();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        actions.push(\"done\" + \" \" + position);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.listWriter(arr);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return printForDone(arr, t);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out an error message when the user inputs in the wrong syntax for todo"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToTodoWrongSyntax() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        TodoException te \u003d new TodoException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return te.getErrorMessage();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out the statement saying that todo has been added and updates the list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToTodo(String name) throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Todo t \u003d new Todo(name);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tl.addTask(t);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int position \u003d arr.size() - 1;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        actions.push(\"todo \" + position);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.listWriter(arr);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return print(arr, t);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out an error message when the user forgets to input the deadline details"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToEventFail() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        EventException ee \u003d new EventException();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return ee.getErrorMessage();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement saying that an event has been added to the list and updates the list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param name name of the event"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param time deadline of the event"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToEvent(String name, String time) throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Event e \u003d new Event(name, time);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tl.addTask(e);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int position \u003d arr.size() - 1;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        actions.push(\"event\" + \" \" + position);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.listWriter(arr);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return print(arr, e);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out an error message when the user inputs in the wrong syntax for delete"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDeleteWrongSyntax() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Provide the number of the todo that you want to delete!\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement saying that the specified task number does not exists"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDeleteFail() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"The specified todo does not exist!\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement saying that the task has been deleted and updates the list"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param taskNumber task number of the task that is being deleted"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDelete(int taskNumber) throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int position \u003d taskNumber - 1;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Task t \u003d arr.get(position);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tl.removeTask(t);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (t instanceof Todo) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            actions.push(\"T\" + \" \" + position + \" \" + t.getName());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            actions.push(\"D\" + \" \" + position + \" \" + t.getName() + \" \" + t.getTime());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            actions.push(\"E\" + \" \" + position + \" \" + t.getName() + \" \" + t.getTime());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.listWriter(arr);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return printForDelete(arr, t);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out an error message when the user forgets to input the deadline details"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDeadlineFail() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        DeadlineException de \u003d new DeadlineException();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return de.getErrorMessage();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement saying that a deadline has been added to the list and updates the list"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param name name of the event"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @param time deadline of the event"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToDeadline(String name, String time) throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Deadline d \u003d new Deadline(name, time);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        tl.addTask(d);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        int position \u003d arr.size() - 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        actions.push(\"deadline\" + \" \" + position);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        s.listWriter(arr);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return print(arr, d);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     * Prints out a statement saying that the command does not exist"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToCommandDoesNotExist() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return \"Command does not exist!\" + \"\\n\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String popFromStack() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        return actions.pop();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public String respondToUndo() throws Exception {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (actions.empty()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return \"Nothing to undo!\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tl.getArr();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String action \u003d popFromStack();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String[] splits \u003d action.split(\" \");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        String act \u003d splits[0];"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        if (act.equals(\"todo\") || act.equals(\"deadline\") || act.equals(\"event\")) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int position \u003d Integer.parseInt(splits[1]);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            Task t \u003d arr.get(position);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            tl.removeTask(t);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            s.listWriter(arr);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return printForDelete(arr, t);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (act.equals(\"delete\")) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int position \u003d Integer.parseInt(splits[1]);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            String type \u003d splits[2];"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Event e \u003d new Event(splits[3], splits[4]);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                arr.add(position, e);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                s.listWriter(arr);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return print(arr, e);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Deadline d \u003d new Deadline(splits[3], splits[4]);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                arr.add(position, d);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                s.listWriter(arr);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return print(arr, d);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                Todo t \u003d new Todo(splits[3]);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                arr.add(position, t);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                s.listWriter(arr);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                return print(arr, t);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else if (act.equals(\"done\")) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            int index \u003d Integer.parseInt(splits[1]);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            Task t \u003d arr.get(index);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            t.taskIsNotDone();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            s.listWriter(arr);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return printForUnDone(arr, t);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            return \"Wrong command\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 378
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 19
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void eventTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Event e \u003d new Event(\"meeting\", \"school\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(e.getIndicator(), \"[E]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void deadlineTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Deadline d \u003d new Deadline(\"hw\", \"monday\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(d.getIndicator(), \"[D]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    public void todoTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        Todo t \u003d new Todo(\"say hbd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "        assertEquals(t.getIndicator(), \"[T]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "deadline say hbd /by Monday"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/duke/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juandavinlie"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "juandavinlie": 2,
      "-": 32
    }
  }
]
