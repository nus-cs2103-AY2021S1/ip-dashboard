[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    mainClassName \u003d \"Gel\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    archiveBaseName \u003d \"gel\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "run{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 59
    }
  },
  {
    "path": "data/gel.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "D,1,asdfasdf,2020-07-30T23:41"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "D,0,asdfasdf,2020-03-03T11:43"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "T,0,asdfasdfa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "E,1,asdfasdf,1997-07-30T11:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "D,0,1234,2020-09-09T23:03"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "T,0,asdfasdfasdf"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 5
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 103
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static DialogBox getGelDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 59
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.Gel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Gel gel \u003d new Gel(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(gel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.Gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Gel gel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jake.jpg\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Image gelImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/finn.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void setDuke(Gel g) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        gel \u003d g;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private void handleUserInput() throws InterruptedException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String response \u003d gel.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                DialogBox.getGelDialog(response, gelImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Thread.sleep(5000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 56
    }
  },
  {
    "path": "src/main/java/gel/Gel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * gel.Gel is an task planner. A \u003ccode\u003egel.Gel\u003c/code\u003e object is a bot which"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * enables user to plan their tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Gel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructor for class gel.Gel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param filePath takes in the filepath of the storage file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Gel (String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            taskList \u003d storage.load(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Starts the task planner \u003ccode\u003egel.Gel\u003c/code\u003e and interact with user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        // initialise list and scanner"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            storage.checkFileExistence();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.parseUserInput(sc, storage, ui, taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        new Gel(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            storage.checkFileExistence();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return Parser.parseUserInputFromGui(storage, ui, taskList, input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 65
    }
  },
  {
    "path": "src/main/java/gel/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Deals with making sense of the user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Ensures that user input of date and time is in the correct format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * If is in the correct format, translate the string into \u003ccode\u003eLocalDateTime\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param dateTime User\u0027s input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @return \u003ccode\u003eLocalDateTime\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws GelException If user\u0027s input is in the wrong format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static LocalDateTime toDateTime(String dateTime) throws GelException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] dateTimeSplit \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (dateTimeSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your datetime has an invalid format... please use\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD HHMM\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] date \u003d dateTimeSplit[0].split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your date has an invalid format... please use\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String time \u003d dateTimeSplit[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Your time has an invalid format... please use\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:HHMM\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int year \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int dayOfMonth \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return LocalDateTime.of(year, month, dayOfMonth, hour, minute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Please make sure that your date and time \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \"are numbers within the calendar and 24 hour clock\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Translates user input into something understandable by the task planner."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param sc       Scanner."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param storage  Storage to store date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param ui       Ui to communicate with user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws IOException If file could not be updated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static void parseUserInput(Scanner sc, Storage storage, Ui ui, TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        label:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String keyword \u003d inputArr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                switch (keyword) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"bye\": { //bye"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    storage.updateFile(taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    ui.farewellMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break label;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"list\": { //list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.showListOfTask();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"done\": { //done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.doneTask(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"delete\": { //delete"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yo tell me what you want to delete la\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        taskList.deleteTask(inputArr[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yoyoyo please input a valid number after delete\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"deadline\": { //deadline"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String checkBy \u003d dateDetails[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        if (!checkBy.equals(\"/by\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you left out the deadline\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addDeadline(input, dateIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"event\": { //event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        String checkAt \u003d dateDetails[0];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        if (!checkAt.equals(\"/at\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            throw new GelException(\"    Bruh you left out the event date\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addEvent(input, dateIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"todo\": {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                        throw new GelException(\"    Yo tell me what you want todo\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.addTodo(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                case \"find\": {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    String[] findInputArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    String findKeyword \u003d findInputArr[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    taskList.findDescription(findKeyword);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } catch (GelException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public static String parseUserInputFromGui(Storage storage, Ui ui, TaskList taskList, String input)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throws IOException, GelException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String keyword \u003d inputArr[0];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"bye\": { //bye"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            storage.updateFile(taskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return ui.farewellMessage();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"list\": { //list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.showListOfTask();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"done\": { //done"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.doneTask(input);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"delete\": { //delete"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                throw new GelException(\"    Yo tell me what you want to delete la\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                return taskList.deleteTask(inputArr[1]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                throw new GelException(\"    Yoyoyo please input a valid number after delete\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"deadline\": { //deadline"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                String checkBy \u003d dateDetails[0];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                if (!checkBy.equals(\"/by\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException(\"    Bruh you need the /by tag for deadlines\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException(\"    Bruh you left out the deadline\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.addDeadline(input, dateIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"event\": { //event"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            int dateIndex \u003d input.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (dateIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                String[] dateDetails \u003d input.substring(dateIndex).split(\" \");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                String checkAt \u003d dateDetails[0];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                if (!checkAt.equals(\"/at\")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException(\"    Bruh you need the /at tag for events\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                } else if (dateDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    throw new GelException(\"    Bruh you left out the event date\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.addEvent(input, dateIndex);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (inputArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                throw new GelException(\"    Yo tell me what you want todo\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.addTodo(input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        case \"find\": {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String[] findInputArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String findKeyword \u003d findInputArr[1];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            return taskList.findDescription(findKeyword);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 221
    }
  },
  {
    "path": "src/main/java/gel/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Storage deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructor of Storage class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param filePath ensures that tasks are stored in the file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int fileIndex \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.directoryPath \u003d filePath.substring(0, fileIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Checks for file and directory existence."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * If they do not exist, create new file/directory."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws IOException when createNewFile() fails when filePath is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void checkFileExistence() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File dataDir \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            boolean bool \u003d dataDir.mkdir();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (bool) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(\"data directory successfully created\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                System.out.println(\"Failed to create data directory\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        boolean newFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Updates the storage file after user has ended the task planner."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param taskList the updated list of tasks after user edit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws IOException if filePath is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void updateFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        List\u003cTask\u003e listOfTask \u003d taskList.getListOfTask();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (Task task : listOfTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String isDone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (task.getIsDone()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                isDone \u003d \"1,\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                isDone \u003d \"0,\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"T,\" + isDone + task.getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"E,\" + isDone + task.getDescription() + \",\" + ((Event) task).getAt());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.write(\"D,\" + isDone + task.getDescription() + \",\" + ((Deadline) task).getBy());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Load storage data into a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param ui Required to create a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @return \u003ccode\u003eTaskList\u003c/code\u003e object containing a list of tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @throws java.io.FileNotFoundException If scanner could not detect file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public TaskList load(Ui ui) throws FileNotFoundException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        TaskList taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String description \u003d sc.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            String[] desArr \u003d description.split(\",\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            switch (desArr[0]) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addTodoFromFile(desArr[2], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addDeadlineFromFile(desArr[2], desArr[3], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                taskList.addEventFromFile(desArr[2], desArr[3], Integer.parseInt(desArr[1]));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 119
    }
  },
  {
    "path": "src/main/java/gel/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Contains the task list e.g., it has operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private List\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public TaskList(Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String showListOfTask() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.showListOfTask(this.listOfTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String findDescription(String keyword) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.showSearchResults(this.listOfTasks, keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String doneTask(String input) throws GelException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int index \u003d Integer.parseInt(input.substring(5)) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (index \u003e\u003d listOfTasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            throw new GelException(\"    Please input a valid number from 1 - \" + listOfTasks.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Task taskToBeDone \u003d listOfTasks.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        taskToBeDone.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(index, taskToBeDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.markTaskAsDoneMsg(taskToBeDone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String deleteTask(String deleteNumber) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int taskNo \u003d Integer.parseInt(deleteNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Task taskToBeDeleted \u003d listOfTasks.remove(taskNo - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.taskRemoveMsg(taskToBeDeleted, listOfTasks.size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String addDeadline(String input, int dateIndex) throws GelException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String by \u003d input.substring(dateIndex + 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(9, dateIndex - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime byDateTime \u003d Parser.toDateTime(by);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, byDateTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.addTaskToListMsg(deadline, listOfTasks.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String addEvent(String input, int dateIndex) throws GelException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String at \u003d input.substring(dateIndex + 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(6, dateIndex - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime atDateTime \u003d Parser.toDateTime(at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Event event \u003d new Event(description, atDateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.addTaskToListMsg(event, listOfTasks.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String addTodo(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String description \u003d input.substring(5);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(todo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return ui.addTaskToListMsg(todo, listOfTasks.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addTodoFromFile(String description, int done) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(todo);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addEventFromFile(String description, String at, int done) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(at);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Event event \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addDeadlineFromFile(String description, String by, int done) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(by);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        if (done \u003d\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTasks.add(deadline);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public List\u003cTask\u003e getListOfTask() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Elgoh": 105
    }
  },
  {
    "path": "src/main/java/gel/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String errorMsg \u003d \"    Lol... Did not manage to load storage data...\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                + \" Creating new TaskList now...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(errorMsg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return errorMsg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String showWelcomeMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String welcomeMsg \u003d \"    Hello! I\u0027m gel.Gel\\n    What do you want from me?\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(welcomeMsg);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return welcomeMsg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String farewellMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String farewellMsg \u003d \"\\n    Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(farewellMsg);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return farewellMsg;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String addTaskToListMsg(Task task, int numberOfItems) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String addTaskMsg \u003d \"\\n    Got it. I\u0027ve added this task:\\n    \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                + task + \"\\n    Now you have \" + numberOfItems + \" task(s) in the list.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(addTaskMsg);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return addTaskMsg;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String taskRemoveMsg(Task task, int numberOfItemsLeft) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String removeTaskMsg \u003d \"\\n    Noted. I\u0027ve removed this task:\\n    \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                + task + \"\\n    Now you have \" + numberOfItemsLeft + \" task(s) in the list.\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(removeTaskMsg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return removeTaskMsg;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String markTaskAsDoneMsg(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        String markDoneMsg \u003d \"\\n    Nice! I\u0027ve marked this task as done:\\n    \" + task + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(markDoneMsg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return markDoneMsg;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String showListOfTask(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        StringBuilder listOfTask \u003d new StringBuilder(\"\\n    Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            listOfTask.append(\"\\n    \").append(i).append(\".\").append(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        listOfTask.append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(listOfTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return listOfTask.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String showSearchResults(List\u003cTask\u003e taskList, String keyword) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        int resultCount \u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        StringBuilder searchResults \u003d new StringBuilder(\"\\n    Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                searchResults.append(\"\\n    \").append(resultCount).append(\".\").append(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                resultCount +\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        searchResults.append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        System.out.println(searchResults);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return searchResults.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 75
    }
  },
  {
    "path": "src/main/java/gel/exception/GelException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class GelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public GelException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"\\n    LOL! Please use the bye tag if you wanna waste my time \");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public GelException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(\"\\n\" + msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 12
    }
  },
  {
    "path": "src/main/java/gel/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * A type of \u003ccode\u003eTask\u003c/code\u003e with a date and time description of when the task is due."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.byString \u003d by.format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HH:mm\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byString + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 28
    }
  },
  {
    "path": "src/main/java/gel/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * A type of \u003ccode\u003eTask\u003c/code\u003e with a date and time description of when the event is heppening."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String atString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.atString \u003d at.format(DateTimeFormatter.ofPattern(\"dd MMM uuuu HH:mm\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public LocalDateTime getAt() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + atString + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 28
    }
  },
  {
    "path": "src/main/java/gel/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * Represents task as a String and if the task is done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * Constructor for \u003ccode\u003eTask\u003c/code\u003e class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     * @param description What the task is."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 40
    }
  },
  {
    "path": "src/main/java/gel/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " * A type of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public Todo (String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 16
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-padding: 5; -fx-background-radius: 20; -fx-background-color: lightgrey;\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.effect.ImageInput?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" alignment\u003d\"TOP_LEFT\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#1a25fc\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            \u003cCursor fx:constant\u003d\"CROSSHAIR\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            \u003cImageInput x\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "               \u003csource\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                  \u003cImage url\u003d\"file:/D:/2021%20Y2S1/CS2103T/Individual%20proj%20(IP)/src/main/resources/images/swordy.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "               \u003c/source\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            \u003c/ImageInput\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "         \u003c/effect\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 32
    }
  },
  {
    "path": "src/test/java/gel/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidDateTimeFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"20200307234\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your datetime has an invalid format... please use\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD HHMM\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidDateFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"2020-0307 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your date has an invalid format... please use\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \" the format:YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void toDateTime_invalidTimeFormat_gelExceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            Parser.toDateTime(\"2020-03-07 235959\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Your time has an invalid format... please use\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                            + \" the format:HHMM\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 50
    }
  },
  {
    "path": "src/test/java/gel/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "package gel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import gel.exception.GelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void doneTask_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).doneTask(\"done 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    \"    Please input a valid number from 1 - 0\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void deleteTask_nonNumberInput_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).deleteTask(\"a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"For input string: \\\"a\\\"\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    public void addDeadline_invalidDate_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            new TaskList(new Ui()).addDeadline(\"deadline test /by 2020-30-58 2500\", 18);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (GelException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            assertEquals(\"\\n    Please make sure that your date and time \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "                    + \"are numbers within the calendar and 24 hour clock\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "deadline asdf /by sunday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Elgoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 3,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Elgoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Elgoh": 1,
      "-": 37
    }
  }
]
