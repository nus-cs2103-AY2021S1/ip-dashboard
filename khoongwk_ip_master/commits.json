{
  "authorDailyContributionsMap": {
    "khoongwk": [
      {
        "date": "2020-08-16",
        "commitResults": [
          {
            "hash": "86fbf9a519cf63a27d77d47f8eb6a286fddb7b95",
            "messageTitle": "Completed Increment Level-1 for greeting and echoing of commands. Option to exit using the command \u0027bye\u0027.",
            "messageBody": "",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 34,
                "deletions": 6
              }
            }
          },
          {
            "hash": "483fde44467d8c19f27c29d3387013f3b52c979b",
            "messageTitle": "Completed increment level 2 with ability to store entries temporarily and list them out with the \u0027list\u0027 command. Any other input besides \u0027bye\u0027 would be treated as an entry to store.",
            "messageBody": "",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 35,
                "deletions": 9
              }
            }
          },
          {
            "hash": "3e6c755abf7d05d4a2dda4eb442988853b3c867c",
            "messageTitle": "Completed increment level 3 with ability to mark a task as done.",
            "messageBody": "",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 51,
                "deletions": 6
              }
            }
          },
          {
            "hash": "4aacd1ab4a2239cdd49c3af2665b7d01fe934af7",
            "messageTitle": "Completed Level 4 with tasks event, deadline, and todo. More input checking to verify command is valid.",
            "messageBody": "",
            "tags": [
              "Level-4"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 145,
                "deletions": 25
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-17",
        "commitResults": [
          {
            "hash": "56259abb3f7ef57ed48cf8fb9a40cd0719620478",
            "messageTitle": "Completed level 5: Changed Input.txt and expected.txt",
            "messageBody": "",
            "tags": [
              "A-TextUiTesting"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 7,
                "deletions": 0
              },
              "java": {
                "insertions": 1,
                "deletions": 1
              },
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "abd909dba1a0da5bde6fb1437f572b51b1fa64d7",
            "messageTitle": "Level 5: Incorporated DukeException for error handling.",
            "messageBody": "",
            "tags": [
              "Level-5"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 26,
                "deletions": 16
              }
            }
          },
          {
            "hash": "dfb4709a90e6526fb1547cc4dd11cf0d9aa03a69",
            "messageTitle": "Completed Level 6: Delete Function",
            "messageBody": "",
            "tags": [
              "Level-6"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 0
              },
              "java": {
                "insertions": 35,
                "deletions": 9
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-26",
        "commitResults": [
          {
            "hash": "7e79d758b3016c56e74edfc90a2fafaa87b61511",
            "messageTitle": "Add Enums for Commands",
            "messageBody": "If-Else Control flow and the substring() is used to determine the user\u0027s\ninput i.e \u0027bye\u0027, \u0027done\u0027, \u0027todo\u0027, etc.\n\nHowever, this approach is messy and is not very readable.\n\nLet\u0027s use Enums and switch-case statements to improve the code\u0027s readability.\n",
            "tags": [
              "A-Enums"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 0,
                "deletions": 0
              },
              "java": {
                "insertions": 168,
                "deletions": 74
              },
              "bat": {
                "insertions": 7,
                "deletions": 0
              }
            }
          },
          {
            "hash": "3fbc05bed8ebb5437b7ec47ccac6138ebdeb3775",
            "messageTitle": "Add Save feature for Level 7",
            "messageBody": "Tasks which are stored in the list while the program is run\nis not saved and stored when the user exits the program.\n\nEnabling a save function would improve the usability of this\nprogram as tasks which were entered previously can be\nremembered.\n\nLet\u0027s providing a saving function which stores the Task list into\na text file when the user exits and retrieves this list when the\nprogram is started up again.\n",
            "tags": [
              "Level-7"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 4,
                "deletions": 3
              },
              "java": {
                "insertions": 113,
                "deletions": 11
              },
              "bat": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "ea8ab16a5abe9029b15cb0ab1f6cd2fd36bc560b",
            "messageTitle": "Fix issue with text file saving.",
            "messageBody": "Working directory is different when building and running Duke in the IntelliJ IDE\ncompared to when running runtest.bat.\n\nModifications have to be made to the filepath specified depending on which\nis the working directory.\n\nLet\u0027s use a conditional expression to set the correct file path depending on what\nwas the original working directory.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 0,
                "deletions": 0
              },
              "java": {
                "insertions": 14,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-27",
        "commitResults": [
          {
            "hash": "bc5f963ea5f1b3623b3c5666a885a20a6eb187a1",
            "messageTitle": "Add Date Time Formatting for user input",
            "messageBody": "Date and Time of events and deadlines can take any format.\n\nIf Duke can understand certain formats of date and time input,\nit can parse the String input to make it look more readable and\naesthetically pleasing.\n\nTo improve the user experience, let\u0027s enable Duke to process\nspecific time and date formats such as \"dd/MM/yyyy HHmm\" and\nformat it into a more pleasing look, such as \"JULY 4 2021\".\n",
            "tags": [
              "Level-8"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 0
              },
              "java": {
                "insertions": 83,
                "deletions": 3
              }
            }
          },
          {
            "hash": "defe452b7af229498061ee34794ee5a810c55a69",
            "messageTitle": "Edit Text files for text-ui-test and other minor edits",
            "messageBody": "Expected text file has changed due to new Save feature.\n\nReplacing expected text would lead to a match between actual and expected text.\n\nLet\u0027s make minor edits to text files as well as the main Duke code to clean up.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 5,
                "deletions": 1
              },
              "java": {
                "insertions": 0,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-30",
        "commitResults": [
          {
            "hash": "a5a07a01983c77289be1cac9bd9103e93fdf7695",
            "messageTitle": "Add More Classes for OOP",
            "messageBody": "Currently, the logic for Duke is all within the Duke class.\n\nHowever, this design is bloated and should be compartmentalized\nfurther using more OOP.\n\nLet\u0027s introduce new classes such as Storage, TaskList, and Ui to\nimprove the structure of Duke and decentralize the logic to each\nseperate component.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 184,
                "deletions": 133
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-31",
        "commitResults": [
          {
            "hash": "7c44a6c3656b03723aa5d4711c8591efe9b14e7a",
            "messageTitle": "Fix OOP Extensions",
            "messageBody": "More Classes have been added to decentralise the logic,\nsuch as the Storage, Parser, and Ui Class.\n\nHowever, the classes were not feature complete, especially\nthe Ui Class.\n\nLet\u0027s complete these classes, revamp the logic in the main\nDuke class to use these classes, and test it out with text-ui-test.\n",
            "tags": [
              "A-MoreOOP"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 3
              },
              "java": {
                "insertions": 252,
                "deletions": 207
              }
            }
          },
          {
            "hash": "2f2a6fa77aa8b008ff1d85de78f4edcc49768377",
            "messageTitle": "Package Classes into Duke and Task Packages",
            "messageBody": "The numerous classes in the java directory has become\nmessy as the number of classes increased.\n\nTo improve the organization of the code base, packaging ought\nto be done.\n\nLet\u0027s package the classes into two main packages - task for the\nTask Classes and duke for all the other classes. More packages\nwill be created in the future if complexity increases. Access modifiers\nhave been made package-private in the duke class for tighter\nsecurity.\n\nFurthermore, minor edits to the code have been made such as\nimproved exception handling, and fully delegating console output\nto the Ui class.\n",
            "tags": [
              "A-Packages"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 116,
                "deletions": 90
              },
              "sh": {
                "insertions": 2,
                "deletions": 2
              },
              "md": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "2d3cc38a7748ee8322ac7d240dc44763ac9f39e1",
            "messageTitle": "Add JUnit Tests",
            "messageBody": "Duke currently has no unit tests and relies on text-ui-test\nto verify that the program works fine.\n\nAdding unit tests using JUnit would improve overall code\nquality by ensuring that methods in the different Duke\nclasses return the same output or throw the same exception.\n\nLet\u0027s introduce a few JUnit test classes to test the funcionality\nof the individual classes. More test classes could be included,\nbut the tests for Parser, Storage, and Task should be\nsufficient for this current stage.\n",
            "tags": [
              "A-JUnit"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 8,
                "deletions": 0
              },
              "java": {
                "insertions": 138,
                "deletions": 1
              }
            }
          },
          {
            "hash": "677477388dcf87add67af9a684301d07973ae580",
            "messageTitle": "Edit Ui Introduction Text",
            "messageBody": "Ui shows commands available like event, todo,\ndeadline, list.\n\nHowever, it missed other commands such as\ndelete, done, and bye.\n\nLet\u0027s add the missing commands into the\nintroductory message.\n",
            "tags": [
              "A-Jar"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-01",
        "commitResults": [
          {
            "hash": "174b08abdd0c15003e6cf1910e793b591f13f998",
            "messageTitle": "Add Find Command (Level 9)",
            "messageBody": "Find Command skeleton has been part of Duke so far\nbut the logic has not been incorporated and tested.\n\nFind command is useful for users to search any tasks\nby their keyword(s).\n\nTo improve the usability of this program, let\u0027s provide\nthe logic of the find command, including testing via\ntext-ui-test.\n",
            "tags": [
              "Level-9"
            ],
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 1,
                "deletions": 0
              },
              "java": {
                "insertions": 36,
                "deletions": 4
              },
              "bat": {
                "insertions": 3,
                "deletions": 2
              }
            }
          },
          {
            "hash": "97737292c860bc62125144b7fdbce6ac2bc8f8f7",
            "messageTitle": "Edit code to match coding standard",
            "messageBody": "Methods, variables have been aptly named according\nto se-edu Java conventions.\n\nHowever, there are sections where noise can be\neliminated by removing \u0027this\u0027 where it is unnecessary.\n\nLet\u0027s refine the code base by removing the \u0027this\u0027 keyword\nwhere it is unnecessary and make other edits where\\\nappropriate to meet the coding standard.\n",
            "tags": [
              "A-CodingStandard"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 15
              }
            }
          },
          {
            "hash": "4acfcf0fac2f257cfd767154772f84f527a8f5b0",
            "messageTitle": "Add Javadoc for all classes",
            "messageBody": "Documentation of Classes and their methods\nis important for projects where other developers\nhave to read code from other authors.\n\nHowever, there is currently a lack of javadoc\ndocumentation in this Duke project.\n\nThus, let\u0027s add javadoc documentation to all\nclasses and non-private methods where possible.\n",
            "tags": [
              "A-JavaDoc"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 286,
                "deletions": 130
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-04",
        "commitResults": [
          {
            "hash": "28f7116526ff03ab0d8c68f7521fd253ea7efea5",
            "messageTitle": "Add Gradle Support and Checkstyle",
            "messageBody": "Gradle was not activated as well as checkstyle.\n\nTo automate future builds and improve the code quality,\nlet\u0027s enable Gradle and the checkstyle plugin.\n",
            "tags": [
              "A-Gradle",
              "A-Checkstyle"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 2,
                "deletions": 2
              },
              "txt": {
                "insertions": 1,
                "deletions": 2
              },
              "java": {
                "insertions": 114,
                "deletions": 71
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-09",
        "commitResults": [
          {
            "hash": "77dc855d31370f7ff72c0afefedf46196a5d9c65",
            "messageTitle": "Add JavaFX Graphical User Interface",
            "messageBody": "Duke has been using Console input to function thus far.\n\nTo improve the user experience, a graphical user interface\nwould appear as more aesthetic and appealing to users.\n\nThus, let\u0027s introduce a graphical user interface using the\nJavaFX library. The GUI is launched from the Launcher\nclass, while the original console application is preserved\nas the main method in Duke.java.\n",
            "tags": [
              "Level-10"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 25,
                "deletions": 1
              },
              "fxml": {
                "insertions": 35,
                "deletions": 0
              },
              "java": {
                "insertions": 425,
                "deletions": 193
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-13",
        "commitResults": [
          {
            "hash": "f3696b64d79d8727665df510837f4f0f9e048286",
            "messageTitle": "Add Assertions",
            "messageBody": "Add assert statements in Parser and Storage\nclasses to improve code quality.\n",
            "tags": [
              "A-Assertions"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 3,
                "deletions": 2
              },
              "java": {
                "insertions": 47,
                "deletions": 43
              }
            }
          },
          {
            "hash": "9c9e75348bb0b21740f39555d46c34ac8a39af56",
            "messageTitle": "Improve Code Quality",
            "messageBody": "Duke\u0027s logic has been centred in the Duke class thus far.\n\nHowever, the code quality is not very good as the getResponse\nmethod is very long and does too many things.\n\nIn order to improve the quality of the code, let\u0027s abstract the logic\ninto 2 areas: 1) Parser class will process the user\u0027s input and\nreturn the right Command. 2) Introduce Command classes which\ncan be executed to return a String response. Thus, the logic in Duke\nwould be abstracted out into Commands which are executed until\nthe command signals duke to stop running with the continueDuke()\nmethod.\n",
            "tags": [
              "A-CodeQuality"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 1,
                "deletions": 1
              },
              "fxml": {
                "insertions": 1,
                "deletions": 1
              },
              "java": {
                "insertions": 688,
                "deletions": 217
              }
            }
          },
          {
            "hash": "96ab78765f2628817ea47d0230a8ac0d4c6d03b8",
            "messageTitle": "Fix Minor issues in Duke",
            "messageBody": "Tweaked file path system in Storage class.\n",
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 1,
                "deletions": 3
              },
              "java": {
                "insertions": 42,
                "deletions": 48
              }
            }
          },
          {
            "hash": "cab0d6430fc3e8379393b4466f33f6e9562111ef",
            "messageTitle": "Add BCD Extension C-Help, Fix Bugs",
            "messageBody": "Users might be lost as to how to use Duke as there\nis no guide provided to them.\n\nLet\u0027s introduce a help command, which produces\nuseful instructions on what each command does\nand how to use it. A help message is also produced\nat the start of Duke.\n\nBugs were also fixed: Exception is now handled\nwhen non-numbers are input for the delete and\ndone commands.\n",
            "tags": [
              "BCD-Extension"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 99,
                "deletions": 24
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-14",
        "commitResults": [
          {
            "hash": "8ddc042f70ecc815c1521171542c85a4cc86ccb4",
            "messageTitle": "Improve GUI #2",
            "messageBody": "Previous commit did not stage changes to GUI\ncorrectly.\n\nLet\u0027s stage all the changes to the GUI which will\nimprove the user experiences slightly.\n",
            "tags": [
              "A-BetterGUI"
            ],
            "fileTypesAndContributionMap": {
              "fxml": {
                "insertions": 8,
                "deletions": 8
              },
              "java": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "238e6e45133c425d31a11585a63f5b6e7e74d62c",
            "messageTitle": "Add Ui Photo",
            "messageBody": "Added screenshot of Ui of Duke and\nreduced size of user image slightly to\nimprove readability of commands.\n",
            "fileTypesAndContributionMap": {
              "fxml": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "4a1832bc86f36528c51c4a29f2474a5019f368e4",
            "messageTitle": "Rework Storage Class",
            "messageBody": "Storage has depended on Duke supplying a\ncorrect file path of where the saved tasks were\nstored.\n\nHowever, Duke should not need to know the file\npath and this function should be delegated to the\nStorage class.\n\nTo improve the abstraction of Storage\u0027s function,\nlet\u0027s shift the file path to within the Storage class\nsuch that everything related to the file I/O is\ncontained within the Storage class.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 5,
                "deletions": 0
              },
              "java": {
                "insertions": 58,
                "deletions": 57
              }
            }
          },
          {
            "hash": "d9f6d34fd98145e1daaea363780b20ef06dd4cc7",
            "messageTitle": "Refactor Packages into One Main Package",
            "messageBody": "Main folder had numerous packages but is suspected to cause\nissues with the building of JAR file.\n\nLet\u0027s refactor the packags such that all packages are within\na main \u0027duke\u0027 package. This would make the project structure\nmore organised.\n",
            "fileTypesAndContributionMap": {
              "fxml": {
                "insertions": 1,
                "deletions": 1
              },
              "java": {
                "insertions": 94,
                "deletions": 85
              },
              "sh": {
                "insertions": 2,
                "deletions": 2
              },
              "md": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "d919765b125764fb30fa18611f8dc1553a2b5273",
            "messageTitle": "Enhance Find Command",
            "messageBody": "Find command was finding exact matches to\nkeywords provided by the user.\n\nTo improve the usability of the find command,\nlet\u0027s make the searching of matching tasks\ncase-insensitive.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "97a56535cd91bc5c946975828ed28822f273e4cf",
            "messageTitle": "Fix JAR file Creation",
            "messageBody": "Duke works in Intellij but FXMLLoader.load() fails\nwhen Duke is run as a JAR file.\n\nFile directory \u0027view\u0027 was capitalized by accident.\nLet\u0027s fix this by renaming \u0027View\u0027 to \u0027view\u0027 under\nsrc/main/resources.\n",
            "fileTypesAndContributionMap": {
              "fxml": {
                "insertions": 0,
                "deletions": 0
              },
              "java": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "e67ac8b77ce0c4f3bdeead5ffd902ecc5321a5d3",
            "messageTitle": "Fix JAR file Creation",
            "messageBody": "Duke works in Intellij but FXMLLoader.load() fails\nwhen Duke is run as a JAR file.\n\nFile directory \u0027view\u0027 was capitalized by accident.\nLet\u0027s fix this by renaming \u0027View\u0027 to \u0027view\u0027 under\nsrc/main/resources.\n",
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 14,
                "deletions": 15
              },
              "fxml": {
                "insertions": 2,
                "deletions": 2
              },
              "java": {
                "insertions": 3,
                "deletions": 7
              },
              "bat": {
                "insertions": 0,
                "deletions": 1
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-15",
        "commitResults": [
          {
            "hash": "2335d21bcf178ca25a819109174ccab02abc5c88",
            "messageTitle": "Add User Guide",
            "messageBody": "Currently there is no user guide available to users. Let\u0027s\nadd a user guide so that users can have a more\nconvenient experience when using Elon for the first time.\n",
            "tags": [
              "A-UserGuide"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              },
              "md": {
                "insertions": 62,
                "deletions": 10
              }
            }
          },
          {
            "hash": "cb24fee366937eee22cd3e5ef4811d41839698a8",
            "messageTitle": "Edit Readme",
            "messageBody": "Github Readme is using the original template from Duke.\n\nLet\u0027s edit it to suit the current state of Duke - in its renamed\nform - Elon.\n",
            "tags": [
              "v1.0",
              "A-Release"
            ],
            "fileTypesAndContributionMap": {
              "md": {
                "insertions": 14,
                "deletions": 15
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "khoongwk": {
      "java": 1820,
      "md": 76,
      "fxml": 35,
      "sh": 1,
      "bat": 9,
      "gradle": 23,
      "txt": 29
    }
  },
  "authorContributionVariance": {
    "khoongwk": 80586.32
  },
  "authorDisplayNameMap": {
    "khoongwk": "CS2103T-W13-3 KHOO.. KIT"
  }
}
