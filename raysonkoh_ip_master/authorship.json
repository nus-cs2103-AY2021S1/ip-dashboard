[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "1. JavaFX code was adapted from the boilerplate code in https://se-education.org/guides/tutorials/javaFx.html"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 4,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 19,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.utils.DukeState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The Duke object initializes the core classes Storage and TaskList, and contains the main logic to respond"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * correctly to user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private DukeState dukeState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final boolean isLoadedFromDisk;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Duke object. The taskList will be loaded from disk if there exists an existing data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Else, Duke will start with an empty taskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param filePath the filePath where the storage will load from and save data to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList tmpTaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        boolean tmpIsLoadedFromDisk;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpTaskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpIsLoadedFromDisk \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            tmpIsLoadedFromDisk \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskList \u003d tmpTaskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.dukeState \u003d DukeState.RUNNING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isLoadedFromDisk \u003d tmpIsLoadedFromDisk;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the appropriate response for a given user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The appropriate response."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assert(dukeState \u003d\u003d DukeState.RUNNING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command cmd \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (cmd.isExit()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                dukeState \u003d DukeState.EXITED;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return cmd.execute(storage, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return e.getPrettyErrorMsg();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the current state of the Duke application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The current state of the Duke application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DukeState getDukeState() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return dukeState;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether the taskList was loaded from a data file on app-start."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A boolean value indicating whether the taskList was loaded from a data file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isLoadedFromDisk() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return isLoadedFromDisk;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 76,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.gui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The main entry-point to the Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Launches the Duke application through the Main GUI file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param args The supplied arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 20
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.SaveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.UpdateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.DeadlineTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.EventTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.TodoTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Class that is responsible for parsing raw inputs and translating them to the correct Command or Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final int SINGLE_INPUT_COMMAND_SIZE \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static final int DOUBLE_INPUT_COMMAND_SIZE \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Command subclass that correctly represents the user intent."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If input is unexpected or exceptional."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        validateNotEmpty(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String cmd \u003d segments[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // CHECK FOR NON-TASKS-RELATED COMMANDS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            switch (cmd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"save\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new SaveCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new DoneCommand(Integer.parseInt(segments[1].trim()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(segments[1].trim()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                if (segments[1].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new FindCommand(segments[1].trim().split(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String[] updateSegments \u003d segments[1].split(\" \", 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                if (updateSegments[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    throw new DukeException(\"Empty description is not valid\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                return new UpdateCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                        Integer.parseInt(updateSegments[0].trim()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                        updateSegments[1].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                throw new DukeException(\"Aww! The first word of your input is wrong!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Please check your inputs again, ensure words are spaced and numbers\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    + \"(if any) are correct.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] parsedSegments \u003d parseSegments(input, cmd, getTaskBreakPt(cmd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        // CHECK FOR TASKS-RELATED COMMANDS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new TodoCommand(parsedSegments[0]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new DeadlineCommand(parsedSegments[0], parsedSegments[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return new EventCommand(parsedSegments[0], parsedSegments[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Aww! The first word of your input is wrong!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Parses raw data that is loaded from save file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The raw data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The correct Task that corresponds to what the raw data represents."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If data is unexpected or exceptional."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static Task parseTaskData(String data) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        boolean isDone \u003d segments[1].equals(\"1\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            switch (segments[0]) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new TodoTask(segments[2], isDone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new DeadlineTask(segments[2], isDone, LocalDate.parse(segments[3]));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d new EventTask(segments[2], isDone, LocalDate.parse(segments[3]));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                task \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"supplied data: \" + segments[3] + \" does not conform to yyyy-mm-dd\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static String[] parseSegments(String input, String cmd, String breakPt) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        checkIllegalChar(input);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int size \u003d DOUBLE_INPUT_COMMAND_SIZE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (breakPt.equals(\"\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            size \u003d SINGLE_INPUT_COMMAND_SIZE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] res \u003d new String[size];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] splitByCmd \u003d input.split(cmd);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (splitByCmd.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(cmd + \" description cannot be empty!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String description \u003d splitByCmd[1].trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(cmd + \" description cannot be empty!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (size \u003d\u003d SINGLE_INPUT_COMMAND_SIZE) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            res[0] \u003d description;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] splitByBreakPt \u003d description.split(breakPt);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (!description.contains(breakPt)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(breakPt + \" keyword must be in input for all \" + cmd + \" commands!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (splitByBreakPt.length \u003c\u003d 1 || splitByBreakPt[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Content after \" + breakPt + \" should not be empty!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        res[0] \u003d splitByBreakPt[0].trim();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        res[1] \u003d splitByBreakPt[1].trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static void checkIllegalChar(String input) throws DukeException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        char[] illegalChar \u003d {\u0027|\u0027};"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (char c : illegalChar) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (input.indexOf(c) !\u003d -1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                throw new DukeException(\"Illegal Character: \" + c);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static void validateNotEmpty(String input) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Input cannot be empty!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private static String getTaskBreakPt(String taskName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        switch (taskName) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"/by\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"/at\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 195
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The class that is responsible for reading and writing raw taskList data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final File dataFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Storage object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param filePath The path of the data file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Retrives The raw data from the data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of each line of raw data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIoException If file was not found at the filePath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e load() throws DukeIoException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Scanner sc \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                res.add(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIoException(\"PROJ_ROOT/\" + dataFile.getPath() + \" not found!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Writes the raw data into the data file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The raw data to be written."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIoException For exceptional cases where the program is unable to write to the data file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void save(ArrayList\u003cString\u003e data) throws DukeIoException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (int i \u003d 0; i \u003c data.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(data.get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (i !\u003d data.size() - 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (dataFile.getParent() !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String parentDir \u003d dataFile.getParent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File dataDir \u003d new File(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            if (!dataDir.exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                dataDir.mkdir(); // if intellij is slow in displaying data dir, right click -\u003e reload from disk"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String textToPrint \u003d sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FileWriter fw \u003d new FileWriter(dataFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.write(textToPrint);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIoException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 82
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The class that is responsible for storing the current state of the list of tasks while Duke is still"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * running."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskStore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the TaskList with an empty list when there is no saved data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the TaskList with the existing data that was loaded from the data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param data The ArrayList of each line of raw data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If there was a parsing error. This means that the saved data is corrupted in some"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *                       way."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e data) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String s : data) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskStore.add(t);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new Task to the taskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskStore.add(newTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Marks an existing task as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task to be marked as done in the taskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task markTaskAsDone(int taskNum) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task doneTask \u003d taskStore.get(taskNum - 1).markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskStore.set(taskNum - 1, doneTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes an existing task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task to be deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task delete(int taskNum) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore.remove(taskNum - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Finds tasks that matches the search keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keywords The search keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of string representations of tasks that match the keyword."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e find(String[] keywords) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .filter(task -\u003e task.contains(keywords))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .map(Task::toString)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates task at taskNum in the taskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum      The number of the task to be updated in the taskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString The string that represents the new updated task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The updated task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If updateString format is wrong."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task update(int taskNum, String updateString) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task updatedTask \u003d taskStore.get(taskNum - 1).update(updateString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskStore.set(taskNum - 1, updatedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return updatedTask;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the string representation of each task in the taskList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of string representation of each task in the taskList."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e getListRepr() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .map(Task::toString)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Translates the taskList to raw data to be stored."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return An ArrayList of raw data where each element corresponds to the raw data representation of each"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * task in the taskList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public ArrayList\u003cString\u003e getData() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return taskStore"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .map(Task::getData)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the number of tasks currently in the taskList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A string that informs the user of the number of tasks currently in the taskList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getListStatus() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int storeSize \u003d taskStore.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"There \" + (storeSize \u003e 1 ? \"are \" : \"is \") + \"now \" + storeSize + \" \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                + (storeSize \u003e 1 ? \"tasks \" : \"task \") + \"in your list!\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 133
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.utils.DukeStdMsg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to exit Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Saves the current taskList into harddisk and returns the exit message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The exit message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIoException IOException when writing data to the data-file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeIoException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d tasks.getData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        storage.save(data);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return DukeStdMsg.EXIT.getMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * An interface that models a basic Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Contains the logic required to execute the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    String execute(Storage storage, TaskList tasks) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether command indicates an intent to exit Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Whether the Command signals an intent to exit Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    default boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.DeadlineTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the command to add a new DeadlineTask."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a DeadlineCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline of the DeadlineTask."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineCommand(String description, String deadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new DeadlineTask to the taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The response back to the user indicating that the deadline task has been added to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If deadline format is wrong."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task deadlineTask \u003d new DeadlineTask(description, deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"Sure! I have added the following deadline task to your list:\\n\" + deadlineTask.toString()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                + \"\\n\" + tasks.getListStatus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to delete existing Tasks from taskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes DeleteCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task in the taskList to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Deletes the task at the specified taskNum in the taskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The response indicating task has been deleted from taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task delTask \u003d tasks.delete(taskNum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"OK! I have deleted the following task for your list:\\n\" + delTask.toString() + \"\\n\" + tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .getListStatus();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to mark a specific Task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum The number of the task in the taskList to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Marks the Task at the specified taskNum as Done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The response to the user indicating the task has been marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task doneTask \u003d tasks.markTaskAsDone(taskNum);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"OK! I have marked the following task as done:\\n\" + doneTask.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.EventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to add a new EventTask."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String timePeriod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes the EventCommand that will add a new EventTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod when the EventTask will occur."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventCommand(String description, String timePeriod) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new EventTask to the taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The response to the user indicating the event task has been added to the taskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If timePeriod format is wrong."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task eventTask \u003d new EventTask(description, timePeriod);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(eventTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"Sure! I have added the following event task to your list:\\n\" + eventTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                + tasks.getListStatus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to find tasks that matches a provided keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String[] keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keywords The search keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public FindCommand(String... keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Finds the list of tasks that matches the keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string representation of the list of tasks that matches the keyword."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e findTasksRepr \u003d tasks.find(keywords);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String s : findTasksRepr) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(i).append(\": \").append(s).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to list all tasks in the taskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets a string representation of the taskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string representation of the taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e tasksListRepr \u003d tasks.getListRepr();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String s : tasksListRepr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(i).append(\": \").append(s).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeIoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * The Command that saves the current taskList data to the data file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SaveCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Saves the file to the data file as specified in the storage object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A response indicating data was saved successfully."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeIoException If there was an IOException when saving the data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeIoException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d tasks.getData();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        storage.save(data);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"Saved successfully!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 28
    }
  },
  {
    "path": "src/main/java/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.TodoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents the Command to add a new TodoTask."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a TodoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Adds a new TodoTask."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The user response indicating the new todotask has been added to the taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task todoTask \u003d new TodoTask(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        tasks.add(todoTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"Sure! I have added the following todo task to your list:\\n\" + todoTask.toString() + \u0027\\n\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                + tasks.getListStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Command that represents the intent to update a task in the taskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class UpdateCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final int taskNum;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String updateString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes an UpdateCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param taskNum      The number of the task in the taskList to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString The string that represents the information of the updated task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public UpdateCommand(int taskNum, String updateString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.updateString \u003d updateString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates the task in the taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param storage The storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param tasks   The taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The string represetation of the updated task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If updateString format is wrong."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task updatedTask \u003d tasks.update(taskNum, updateString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"Successfully updated task #\" + taskNum + \": \" + updatedTask.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 40
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an Exception that occurred while running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes DukeException with an error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param msg The error message describing the error."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Formats the error message to be more readable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return A readable error string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getPrettyErrorMsg() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[ERROR]: \" + getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an IOException while running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DukeIoException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getPrettyErrorMsg() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[IO ERROR]: \" + getMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 16
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Factory method to generate a user dialog element."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param text The text to be rendered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param img  The image to be rendered."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The user dialog element."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Factory method to generate a Duke dialog element."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param text The text to be rendered."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param img  The image to be rendered."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Duke dialog element."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 75
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Loads the MainWindow AnchorPane and sets the scene."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param stage The stage to set the scene."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 37
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.utils.DukeState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.utils.DukeStdMsg;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Controller for duke.gui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Sets scrollpane to scroll to the bottom whenever new dialogs are added."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Sets the Duke object. Prints a welcome text based on whether Duke has loaded data from disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param d The Duke object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (duke.isLoadedFromDisk()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(DukeStdMsg.LOAD_FROM_DISK.getMsg());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sb.append(DukeStdMsg.FRESH_START.getMsg());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        sb.append(DukeStdMsg.WELCOME.getMsg());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                DialogBox.getDukeDialog(sb.toString(), dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * them to the dialog container. Clears the user input after processing. If Duke has exited, it disables"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * userInput and the sendButton."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (duke.getDukeState() \u003d\u003d DukeState.EXITED) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            sendButton.setDisable(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 82
    }
  },
  {
    "path": "src/main/java/duke/tasks/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents a DeadlineTask that has to be done by a certain datetime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final LocalDate deadline; // YYYY-MM-DD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a new DeadlineTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline of the DeadlineTask. It should be in the form YYYY-MM-DD."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If the deadline format is wrong."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask(String description, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.deadline \u003d LocalDate.parse(deadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Date format should be YYYY-MM-DD\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initializes a DeadlineTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the DeadlineTask."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the DeadlineTask has been done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param deadline    The deadline in LocalDate format of the DeadlineTask."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, LocalDate deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new DeadlineTask(description, true, deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates the current deadlineTask and returns the updated deadlineTask."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString A string that represents the updated task: [description] /by [deadline]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The updated deadlineTask."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If updateString\u0027s date format is wrong."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public DeadlineTask update(String updateString) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d updateString.split(\"/by\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DeadlineTask newDeadlineTask \u003d new DeadlineTask(segments[0].trim(), segments[1].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            newDeadlineTask \u003d newDeadlineTask.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return newDeadlineTask;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"D|\" + super.getData() + \"|\" + deadline.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 76
    }
  },
  {
    "path": "src/main/java/duke/tasks/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents an Event Task at a specific timePeriod."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final LocalDate timePeriod; // YYYY-MM-DD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a new EventTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod when the Event will occur. It should be in YYYY-MM-DD form."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If the date format in timePeriod is wrong."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask(String description, String timePeriod) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            this.timePeriod \u003d LocalDate.parse(timePeriod);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"Date format should be YYYY-MM-DD\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initialize an EventTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the EventTask."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the EventTask has been done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param timePeriod  The timePeriod in LocalDate form when the EventTask will occur."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask(String description, boolean isDone, LocalDate timePeriod) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.timePeriod \u003d timePeriod;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask markAsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new EventTask(description, true, timePeriod);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates the current eventTask and returns the updated eventTask."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString A string that represents the updated task: [description] /at [timePeriod]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The updated eventTask."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If updateString\u0027s date format is wrong."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public EventTask update(String updateString) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] segments \u003d updateString.split(\"/at\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        EventTask newEventTask \u003d new EventTask(segments[0].trim(), segments[1].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            newEventTask \u003d newEventTask.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return newEventTask;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"E|\" + super.getData() + \"|\" + timePeriod.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + timePeriod"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 76
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * An abstract class that represents a basic Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a Task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates this task to the information specified in updateString."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString A string that represents the updated task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The updated Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @throws DukeException If updateString format is wrong."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public abstract Task update(String updateString) throws DukeException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Gets the raw data representation of the Task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The raw data representation of the Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \"|\" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Mark the Task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The Task after it is marked as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public abstract Task markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Checks whether task description contains a certain keyword."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param keywords The search keyword."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return Boolean value indicating whether task description contains a certain keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public boolean contains(String[] keywords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        boolean res \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            res \u003d description.contains(keyword) \u0026\u0026 res;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"]\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 75
    }
  },
  {
    "path": "src/main/java/duke/tasks/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " * Represents a TodoTask that is not constrained by datetime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Initializes a TodoTask."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Fully initialize a TodoTask."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param description The description of the TodoTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param isDone      Indicates whether the TodoTask has been done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask markAsDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new TodoTask(description, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * Updates the current todoTask and returns the updated todoTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @param updateString A string that represents the todoTask description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     * @return The updated todoTask."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public TodoTask update(String updateString) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return new TodoTask(updateString, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"T|\" + super.getData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 52
    }
  },
  {
    "path": "src/main/java/duke/utils/DukeState.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public enum DukeState {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    RUNNING,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    EXITED"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 6
    }
  },
  {
    "path": "src/main/java/duke/utils/DukeStdMsg.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public enum DukeStdMsg {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    WELCOME(\"Hello, my name is \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            + \"How may I help you?\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    LOAD_FROM_DISK(\"Duke has loaded from a previously saved file!\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    FRESH_START(\"No previously saved file found in ./data/duke.txt. Duke will start from a clean taskList!\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    EXIT(\"Saved successfully!\\nBye bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    private final String msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    DukeStdMsg(String msg) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public String getMsg() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 23
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.SaveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_byeInput_correctCmd() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof ByeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_saveInput_correctCmd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"save\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof SaveCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_listInput_correctCmd() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"list\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_doneInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"done 1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_doneInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"done abc\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deleteInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"delete 1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deleteInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"delete abc\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_findInputCorrect_correctCmd() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"find a\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof FindCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_findInputWrong_throwDukeException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"find \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    \"Please check your inputs again, ensure words are spaced and numbers(if any) are correct.\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_todoInput_correctCmd() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"todo test\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof TodoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deadlineInput_correctCmd() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"deadline test /by 2020-08-22\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_eventInput_correctCmd() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Command c \u003d Parser.parseInput(\"event test /at 2020-08-22\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(c instanceof EventCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_emptyInput_throwDukeException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Input cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_taskInputEmptyDescription_throwDukeException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"todo\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"todo description cannot be empty!\", e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_deadlineInputNoBreakPt_throwDukeException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"deadline test 2020-08-22\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"/by keyword must be in input for all deadline commands!\", e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_eventInputNoBreakPt_throwDukeException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"event test 2020-08-22\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"/at keyword must be in input for all event commands!\", e.getMessage());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_updateInputEmptyDescription_throwDukeException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"update 1 \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Empty description is not valid\", e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseInput_inputWithIllegalChar_throwDukeException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Parser.parseInput(\"event test| 2020-08-22\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Illegal Character: |\", e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_todoCorrect_correctOutput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"T|1|test\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[T][\\u2713] test\", t.toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_deadlineCorrect_correctOutput() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"D|0|test|2020-08-22\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2718] test (by: Aug 22 2020)\", t.toString());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_deadlineWrong_throwDukeException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"D|0|test|2020-8-22\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"supplied data: 2020-8-22 does not conform to yyyy-mm-dd\", e.getMessage());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_eventCorrect_correctOutput() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"E|0|test|2020-08-22\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2718] test (at: Aug 22 2020)\", t.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void parseTaskData_eventWrong_throwDukeException() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d Parser.parseTaskData(\"E|0|test|2020-8-22\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"supplied data: 2020-8-22 does not conform to yyyy-mm-dd\", e.getMessage());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 259
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.condition.OS.LINUX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.condition.OS.MAC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.condition.OS.WINDOWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.condition.EnabledOnOs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @EnabledOnOs({LINUX, MAC})"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void load_noFileNix_throwDukeException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"PROJ_ROOT/data/storageTest.txt not found!\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @EnabledOnOs({WINDOWS})"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void load_noFileWindows_throwDukeException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            storage.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            //fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"PROJ_ROOT/data\\\\storageTest.txt not found!\", e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void load_fileExists_correctOutput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File f \u003d new File(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File parent \u003d new File(f.getParent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            parent.mkdir();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.write(\"test\\ntest1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ArrayList\u003cString\u003e content \u003d storage.load();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(2, content.size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", content.get(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test1\", content.get(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.delete();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            parent.delete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void save_data_wroteDataToFile() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Storage storage \u003d new Storage(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ArrayList\u003cString\u003e testList \u003d new ArrayList\u003c\u003e(List.of(\"test\", \"test1\", \"test2\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            storage.save(testList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            File f \u003d new File(\"data/storageTest.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                assertEquals(testList.get(i), sc.nextLine());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            f.delete();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            new File(f.getParent()).delete();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 90
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.DeadlineTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.EventTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.tasks.TodoTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void add_task_correctOutput() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void markTaskAsDone_taskNum_correctOutput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        t \u003d taskList.markTaskAsDone(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", t.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void delete_taskNum_correctOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(1, taskList.getListRepr().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        t \u003d taskList.delete(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(0, taskList.getListRepr().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", t.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void find_existKeyword_correctOutput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t1 \u003d new TodoTask(\"abc\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d taskList.find(new String[]{\"test\"});"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(1, res.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", res.get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void find_nonExistKeyword_emptyList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        Task t1 \u003d new TodoTask(\"abc\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        taskList.add(t1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ArrayList\u003cString\u003e res \u003d taskList.find(new String[]{\"123\"});"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(0, res.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_correctInput_correctOutput() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new TodoTask(\"abc\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t2 \u003d taskList.update(1, \"testing\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[T][\\u2718] testing\", t2.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            ArrayList\u003cString\u003e res \u003d taskList.getListRepr();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[T][\\u2718] testing\", res.get(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[T][\\u2718] abc\", res.get(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(2, res.size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getListRepr_taskList_correctOutput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t2 \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t.toString(), taskList.getListRepr().get(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t1.toString(), taskList.getListRepr().get(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t2.toString(), taskList.getListRepr().get(2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getListStatus_taskList_correctOutput() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"There is now 1 task in your list!\", taskList.getListStatus());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"There are now 2 tasks in your list!\", taskList.getListStatus());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_taskList_correctOutput() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t1 \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            Task t2 \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            taskList.add(t2);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t.getData(), taskList.getData().get(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t1.getData(), taskList.getData().get(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(t2.getData(), taskList.getData().get(2));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 140
    }
  },
  {
    "path": "src/test/java/duke/commands/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ByeCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_byeCommand_true() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(byeCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_deadlineCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(deadlineCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_deleteCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(deleteCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_doneCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(doneCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_eventCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        EventCommand eventCommand \u003d new EventCommand(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(eventCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_todoCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(findCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_listCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(listCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/SaveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_saveCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        SaveCommand saveCommand \u003d new SaveCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(saveCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 15
    }
  },
  {
    "path": "src/test/java/duke/commands/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_todoCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(todoCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/commands/UpdateCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void isExit_updateCommand_false() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(1, \"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(updateCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 14
    }
  },
  {
    "path": "src/test/java/duke/exception/DukeExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getPrettyErrorMsg_dukeException_correctOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[ERROR]: test\", e.getPrettyErrorMsg());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 17
    }
  },
  {
    "path": "src/test/java/duke/exception/DukeIoExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DukeIoExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getPrettyErrorMsg_dukeIoException_correctOutput() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            throw new DukeIoException(\"test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[IO ERROR]: test\", e.getPrettyErrorMsg());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 17
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void createDeadlineTask_incorrectDateInput_throwDukeException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020/08/22\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_deadlineTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"D\", str[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_deadlineTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"D\", str[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_deadlineTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2718] test (by: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_deadlineTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask task \u003d new DeadlineTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2713] test (by: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(new DeadlineTask(\"test\", \"2020-08-22\").contains(new String[]{\"test\"}));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(new DeadlineTask(\"test\", \"2020-08-22\").contains(new String[]{\"wrong\"}));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_wrongDateFormat_throwDukeException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask deadlineTask \u003d new DeadlineTask(\"test\", \"2020-09-05\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            deadlineTask.update(\"testing /by 20-09-4\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_correctInput_correctOutput() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            DeadlineTask deadlineTask \u003d new DeadlineTask(\"test\", \"2020-09-05\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            deadlineTask \u003d deadlineTask.update(\"testing /by 2020-09-04\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[D][\\u2718] testing (by: Sep 4 2020)\", deadlineTask.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 113
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void createEventTask_incorrectDateInput_throwDukeException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020/08/22\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_eventTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"E\", str[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_eventTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"E\", str[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"2020-08-22\", str[3]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_eventTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2718] test (at: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_eventTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask task \u003d new EventTask(\"test\", \"2020-08-22\").markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            String str \u003d task.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2713] test (at: Aug 22 2020)\", str);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertTrue(new EventTask(\"test\", \"2020-08-22\").contains(new String[]{\"test\"}));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertFalse(new EventTask(\"test\", \"2020-08-22\").contains(new String[]{\"wrong\"}));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_wrongDateFormat_throwDukeException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask eventTask \u003d new EventTask(\"test\", \"2020-09-05\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            eventTask.update(\"testing /at 20-09-4\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"Date format should be YYYY-MM-DD\", e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_correctInput_correctOutput() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            EventTask eventTask \u003d new EventTask(\"test\", \"2020-09-05\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            eventTask \u003d eventTask.update(\"testing /at 2020-09-04\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            assertEquals(\"[E][\\u2718] testing (at: Sep 4 2020)\", eventTask.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 113
    }
  },
  {
    "path": "src/test/java/duke/tasks/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "public class TodoTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_todoTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"T\", str[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"0\", str[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void getData_todoTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\").markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String[] str \u003d task.getData().split(\"\\\\|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"T\", str[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"1\", str[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"test\", str[2]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_todoTaskNotDone_correctOutput() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String str \u003d task.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void toString_todoTaskDone_correctOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"test\").markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        String str \u003d task.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2713] test\", str);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_correctKeyword_true() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertTrue(new TodoTask(\"test\").contains(new String[]{\"test\"}));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void contains_wrongKeyword_false() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertFalse(new TodoTask(\"test\").contains(new String[]{\"wrong\"}));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    public void update_correctInput_correctOutput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        TodoTask todoTask \u003d new TodoTask(\"test\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        todoTask \u003d todoTask.update(\"testing\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "        assertEquals(\"[T][\\u2718] testing\", todoTask.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 59
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo     "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo eat strawberry"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo drink something hot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline feowfke"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline defoekf /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline cs3230 assignment 1 /by this saturday 22 Aug"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline technical interview with ABC /by tuesday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fweofkowekf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fewf e/at fwofkew"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event john\u0027s birthday /at Friday night"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event school orientation /at 0800 today"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo eat strawberry"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "todo drink something hot"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline feowfke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline defoekf /by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline cs3230 assignment 1 /by this saturday 22 Aug"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "deadline technical interview with ABC /by tuesday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fweofkowekf"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event fewf e/at fwofkew"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event john\u0027s birthday /at Friday night"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "event school orientation /at 0800 today"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "raysonkoh"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "raysonkoh": 2,
      "-": 36
    }
  }
]
