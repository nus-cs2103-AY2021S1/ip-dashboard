{
  "authorDailyContributionsMap": {
    "kc-98": [
      {
        "date": "2020-08-18",
        "commitResults": [
          {
            "hash": "0b8a706e2b0ddebe1bef24d38232516838b312aa",
            "messageTitle": "Add the skeletal version of Duke",
            "messageBody": "Let\u0027s start by greeting the user. Duke will echo commands entered by the user, and exits\nwhen the user types the keyword \"bye\".\n\nTo enhance user experience, reserved keywords are added which the user can type\n\"help\" to view all of those, and there are also visual lining breaks to provide a\nclearer view of events.\n",
            "tags": [
              "Level-1"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 23,
                "deletions": 0
              }
            }
          },
          {
            "hash": "64c5c0ae58177c6358f5b79ffc18a630f2387f66",
            "messageTitle": "Add ability to store user inputs",
            "messageBody": "Let\u0027s add an ability to store past user inputs so that a user is able to\nretrieve the contents of those should they be requested for.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 15,
                "deletions": 2
              }
            }
          },
          {
            "hash": "0fdad9ca887a4ace893cf4bf65385af7cb873500",
            "messageTitle": "Fix input bug",
            "messageBody": "Scanner input type: white spaces break scanner inputs\n\nScanner input is fixed to accept one entry divided by whitespace\n\nWe want the scanner input to be able to detect more than just a single\nword input to be more useful\n\nLet\u0027s,\n- change the scanner input type from .next() to .nextLine()\n",
            "tags": [
              "Level-2"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "2d7ab3a61d9796f65b8f6a56869bfabc96779a1f",
            "messageTitle": "Add Task.java",
            "messageBody": "Let\u0027s add a Task.java to adhere to java OOP principles. We should use the Task\nto represent the user tasks instead of using the primitive String type.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 23,
                "deletions": 0
              }
            }
          },
          {
            "hash": "e8e145bee20e58631270bcf7e75fea5ce8dedff9",
            "messageTitle": "Add the ability to check a task as done",
            "messageBody": "Let\u0027s add the ability to check a task as done so that users can have a\nbetter visual understanding of which tasks they have left.\n\nPrompt the user if they are to provide an input that is not in line with\nthe required format.\n",
            "tags": [
              "Level-3"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 17,
                "deletions": 3
              }
            }
          },
          {
            "hash": "3f4627254cdda6a34caefe8615fe3350e8f7c2a7",
            "messageTitle": "Change if-else condition format",
            "messageBody": "There were some corner cases for the \"done\" keyword that was found. For\nthe ease of splitting certain cases up, let\u0027s modify how conditions were being\nchecked, from directly using the user input to splitting it up via a white space.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 24,
                "deletions": 14
              }
            }
          },
          {
            "hash": "f97aaf73cc159588761511022d3210c41472dd80",
            "messageTitle": "Add Deadline.java",
            "messageBody": "Let\u0027s add a Deadline.java to adhere to java OOP inheritance principles. We should use\nthe specific Deadline for deadline type tasks.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 14,
                "deletions": 0
              }
            }
          },
          {
            "hash": "497de074bc5462d6520f65169d71a9e7bf31bd2a",
            "messageTitle": "Add ToDo.java",
            "messageBody": "Let\u0027s add a ToDo.java to adhere to java OOP inheritance principles. We should use\nthe specific ToDo for to-do type tasks.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 14,
                "deletions": 0
              }
            }
          },
          {
            "hash": "b18069083379b13e7c2a731a2a28a426cf652470",
            "messageTitle": "Add Event.java",
            "messageBody": "Let\u0027s add a Event.java to adhere to java OOP inheritance principles. We should use\nthe specific Event for event type tasks.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 14,
                "deletions": 0
              }
            }
          },
          {
            "hash": "dea36124a8f6a2d6bc5828525af2ff01322ec995",
            "messageTitle": "Add support for tracking 3 types of tasks",
            "messageBody": "Let\u0027s add 3 new conditions to handle 3 special input types of tasks.\nThis will allow the user to see which types of specific tasks there is\nremaining in the list and eases task handling for them.\n\nWe should also let user know the number of pending tasks there is\nremaining.\n\nLet\u0027s,\n- add a line of output that allow users to know the number of tasks\n  they have remaining after they added a new task.\n- add the 3 unqiue input types to our help keyword\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 63,
                "deletions": 2
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-19",
        "commitResults": [
          {
            "hash": "e1beca6359c60ebb4be42aa81f39086b2e636503",
            "messageTitle": "Update bin folder files to compile",
            "messageBody": "We\u0027ve included new java files, so we have to compile all of them\ninstead of just the original Duke.java\n",
            "fileTypesAndContributionMap": {
              "bat": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "c761d4908f14195102a123a7814921e832b12b36",
            "messageTitle": "Update Task.java status icon return",
            "messageBody": "getStatusIcon(): return UTF-8 encoding \\u2713 or \\u2718\n\nEXPECTED.TXT and ACTUAL.TXT are returning \"?\" instead of what\nthe UTF-8 encoding are supposed to return.\n\nWe want to manually type our UTF-8 encoding symbols to prevent\nconfusion.\n\nLet\u0027s,\n- change UTF-8 encoding \\u2713 or \\u2718 to \"✓\"  or  \"✘\" respectively\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 1,
                "deletions": 1
              }
            }
          },
          {
            "hash": "bd768169422cac78c5a0f7bee78681d84f60f78a",
            "messageTitle": "Fix Scanner NoSuchElementException",
            "messageBody": "Let\u0027s add another terminating condition, scanner.hasNext().\n\nThis is to tell the scanner to stop expecting a new line if .hasNext()\nreturns false so that we do not encounter this error.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 6
              }
            }
          },
          {
            "hash": "677d8076d2fdab2df57f9ab3913f5acd4f1e1ca0",
            "messageTitle": "Add input testcases",
            "messageBody": "Added some testcases in input.txt for testing purposes\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 4,
                "deletions": 0
              }
            }
          },
          {
            "hash": "cb426cc1bb27c451e11bd62010c9b6eff9b26baf",
            "messageTitle": "Add InvalidKeyWordException.java",
            "messageBody": "Let\u0027s add a Duke specific exception that is thrown to the user if they\ninput unknown keywords.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 0
              }
            }
          },
          {
            "hash": "e7136a20755ba5637d5bfb6570e23ce1b9b26bc5",
            "messageTitle": "Add EmptyTaskException.java",
            "messageBody": "Let\u0027s add a Duke specific exception that is thrown to the user if they\ninput a valid keyword followed by missing description.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 0
              }
            }
          },
          {
            "hash": "02bab559dd550176a9dbd00bb460662858b40c74",
            "messageTitle": "Add DukeException.java",
            "messageBody": "Let\u0027s add a Duke parent exception class so that our program can handle\nDuke specific exceptions.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 0
              }
            }
          },
          {
            "hash": "4d4987a6371062419879913d5528a02e174cd036",
            "messageTitle": "Update Duke input types and exceptions",
            "messageBody": "Duke accepts any form of input\n\nDuke might be buggy when faced with unsupported input formats.\n\nLet\u0027s narrow Duke\u0027s input validity based on the given keywords to the\nuser via the help keyword and inform users should there be any invalid\ninputs via exceptions\n\nThis can help the user plan their list in a more systematic structure\nand minimise bug experienced.\n\nLet\u0027s,\n- restrict our keywords to add tasks only if supported keywords are used\n (as shown by inputting \"help\") .\n- utilise Duke\u0027s customised exception classes wherever applicable to\n  enhance UI\n",
            "tags": [
              "Level-5"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 156,
                "deletions": 96
              }
            }
          },
          {
            "hash": "3f2754a3da51c7af06476788f1c2bc2d7c6f4e76",
            "messageTitle": "Add DeleteFailureException.java",
            "messageBody": "Let\u0027s add a Duke specific exception that is thrown to the user if they\ninput an invalid deleting format or if there is an unexpected\ndeletion error.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 7,
                "deletions": 0
              }
            }
          },
          {
            "hash": "49610d61754958bd60c503d73e144ea0b339f155",
            "messageTitle": "Add deleting input type keyword",
            "messageBody": "Let\u0027s add a delete keyword so that the user is able to delete\ntasks off the existing list when they enter the correct delete\nformat as shown in under the help list.\n\nWe should also let user know the number of pending tasks there is\nremaining after deletion\n\nLet\u0027s,\n- add a line of output that allow users to know the number of tasks\n  they have remaining after they deleted an existing task.\n",
            "tags": [
              "Level-6"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 22,
                "deletions": 10
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-24",
        "commitResults": [
          {
            "hash": "d2cfbc0291c92969cad9e44626011d56ab943f56",
            "messageTitle": "Update java import statements",
            "messageBody": "Let\u0027s explicitly state the java packages utilised to make the\nclass easier to comprehend and maintain.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 1
              }
            }
          },
          {
            "hash": "fcc92691cf398824ab9e008c928c186fc634d303",
            "messageTitle": "Update java import statements",
            "messageBody": "Let\u0027s explicitly state the java packages utilised to make the\nclass easier to comprehend and maintain.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 1
              }
            }
          },
          {
            "hash": "40ee78fa3af9b800ffa3a83e228133e2071c8827",
            "messageTitle": "Remove redunant class variable",
            "messageBody": "Let\u0027s remove the class variable which is only used for the Task\nof type Deadline and Event.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 0,
                "deletions": 2
              }
            }
          },
          {
            "hash": "cea15ea0f247e941f8ffff5981e7085507129965",
            "messageTitle": "Add task saving and loading from hard-disk feature",
            "messageBody": "Let\u0027s create a directory \"./data\" in our Duke folder, such that tasks\nfrom previous sessions can be saved whenever the task list changes\nand loaded when Duke boots up.\n\nTo support these features, let\u0027s:\n-Include a parser method taskParser that reads a string and\n returns a specific task.\n\n-Include a method loadData that creates a directory or the .txt file (if\n either are missing), or reads an existing file and returns a list of\n tasks used to store our existing tasks\n\n-Include a method updateTaskFile that updates the list used to\n facilitate changes when the program is running\n",
            "tags": [
              "Level-7"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 150,
                "deletions": 16
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-25",
        "commitResults": [
          {
            "hash": "5cf1e3c90a13a88feea5238d8d76e35c69b7ffc7",
            "messageTitle": "Modify class variable to LocalDate and LocalTime",
            "messageBody": "Let\u0027s change the class String variable to LocalDate and LocalTime\nvariable so that Duke can understand the input as date and time\ninstead of just treating it as a String.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 51,
                "deletions": 8
              }
            }
          },
          {
            "hash": "6a2943f66fa0a04494d4b37096870b5c19533289",
            "messageTitle": "Modify class variable to LocalDate and LocalTime",
            "messageBody": "Let\u0027s change the class String variable to LocalDate and LocalTime\nvariable so that Duke can understand the input as date and time\ninstead of just treating it as a String.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 55,
                "deletions": 8
              }
            }
          },
          {
            "hash": "1786293ae9c3ede915ef0277aa047ecf38adb049",
            "messageTitle": "Update Duke to understand date and time",
            "messageBody": "Let\u0027s update Duke to accepting stricter input format as shown\nvia the help keyword. This will help Duke to understand how\nto read date and time inputs.\n\nLets,\n- update taskParser and updateTaskFile methods to\n  accomodate to using LocalDate and LocalTime\n  instead of just plain String,\n- add isValidDate and isValidTime to parse and determine\n  if the user date and time input are valid to prevent any\n  exceptions from being thrown by LocalDate and LocalTime\n  classes.\n",
            "tags": [
              "Level-8"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 266,
                "deletions": 40
              }
            }
          },
          {
            "hash": "f2a0128e0b4e367f9470f03080d38fbf6d87e67a",
            "messageTitle": "Revert \"Modify class variable to LocalDate and LocalTime\"",
            "messageBody": "This reverts commit 5cf1e3c90a13a88feea5238d8d76e35c69b7ffc7.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 8,
                "deletions": 51
              }
            }
          },
          {
            "hash": "1d7b7ddcb038d3740c0433e0f045e63979f69ef0",
            "messageTitle": "Merge branch \u0027branch-Level-7\u0027 into master",
            "messageBody": "# Conflicts:\n# src/main/java/Duke.java\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 150,
                "deletions": 16
              }
            }
          },
          {
            "hash": "4e8fc58f98bfe69e0b3d5c4f54a1f57092897a60",
            "messageTitle": "Change final variable naming style in Duke",
            "messageBody": "Let\u0027s follow the Java convention and change the final\nvariale namings to all caps\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 6
              }
            }
          },
          {
            "hash": "4bfa0046c2ce19712524b9cec32139ce5eb47825",
            "messageTitle": "Change final variable naming style in Duke",
            "messageBody": "Let\u0027s follow the Java convention and capitalise all final\nvariable namings.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 6
              }
            }
          },
          {
            "hash": "8f8b564e85009a8c85671c22a15ef71cfca66cfc",
            "messageTitle": "Update missing methods from branch-Level-8",
            "messageBody": "There were some methods there were missing in the\nmaster\u0027s Duke class after branch-Level-8 was merged\ninto.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 130,
                "deletions": 38
              }
            }
          },
          {
            "hash": "b6728cac85893603679957231c9aef0d9aee061b",
            "messageTitle": "Extract classes from Duke to make it more OOP",
            "messageBody": "Let\u0027s extract classes from Duke to make our code to follow\nthe Java OOP principles, mainly the Single Responsibility\nPrinciple.\n\nLet\u0027s introduce the:\n- Command class that has commands for each input type,\n- Parser class that ensures input is readable by Duke,\n- Storage class that handles any form of storage updates,\n- UI class that handles any form of user interface situations.\n",
            "tags": [
              "A-MoreOOP"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 585,
                "deletions": 417
              }
            }
          },
          {
            "hash": "ac29f3070b8a44605aab64f7092dc82d2c2d6a65",
            "messageTitle": "Fix constructor lazy evaluation",
            "messageBody": "The lazy evaluation in localDate and localTime variable\nis wrong. \"\" should be checked instead of null so that it can be\nparsed by Java LocalDate and LocalTime correctly\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 2,
                "deletions": 2
              }
            }
          },
          {
            "hash": "c4986d255e9be05634608b4674be4daddd12730e",
            "messageTitle": "Add testcases in input.txt",
            "messageBody": "Updated the testcases and expected outcomes. A\ncommand to delete the tasks.txt file in Runtest.bat is\nadded so that testing is always done with a clean file.\n",
            "fileTypesAndContributionMap": {
              "txt": {
                "insertions": 19,
                "deletions": 3
              },
              "bat": {
                "insertions": 8,
                "deletions": 1
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-26",
        "commitResults": [
          {
            "hash": "8c06b600259cad0f704eee75950f8780c66816cc",
            "messageTitle": "Fix white space issue",
            "messageBody": "The white space after the description segment of input\nshould be removed, and instead spacing should exist\nafter the descripition only there exist date and time.\n",
            "tags": [
              "A-Jar"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 5
              }
            }
          },
          {
            "hash": "c1512fcb0ccbd163eda7884f7a38e82f1f01e294",
            "messageTitle": "Add JUnit test classes",
            "messageBody": "Let\u0027s introduce some JUnit tests to check if the desired\noutcomes are met. Let\u0027s target a few classes for now.\n",
            "tags": [
              "A-JUnit"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 64,
                "deletions": 0
              }
            }
          },
          {
            "hash": "c3976e1f9d4455e233753254f0a120d6f53987db",
            "messageTitle": "Remove redundant parameters and exception",
            "messageBody": "Let\u0027s remove the parameters and exceptions that are\nnot needed in our methods.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 4,
                "deletions": 4
              }
            }
          },
          {
            "hash": "c73b432e8a7c660e43e2683a058dc17fb01a4793",
            "messageTitle": "Add InvalidFormatException.java",
            "messageBody": "Let\u0027s add a Duke specific exception that is thrown to the user if they\ninput an invalid format that Duke does not understand.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 14,
                "deletions": 0
              }
            }
          },
          {
            "hash": "7258650be118781583b40337b5ff96d140a055eb",
            "messageTitle": "Add Java Documentation",
            "messageBody": "Add JavaDoc for non-simple methods so that Java is able\ngenerate API documentation based on our JavaDocs.\n",
            "tags": [
              "A-JavaDoc"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 292,
                "deletions": 45
              }
            }
          },
          {
            "hash": "074291c7d18a13285417cd334c7abedfdadd3622",
            "messageTitle": "Update hardwrap to 100 characters",
            "messageBody": "Lets standardise to a coding style with hardwrap of 100\ncharacters.\n",
            "tags": [
              "A-CodingStandard"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 59,
                "deletions": 45
              }
            }
          },
          {
            "hash": "a53bf86ab2464c27706ca3752b4326eba40db66c",
            "messageTitle": "Add find feature to Duke",
            "messageBody": "Let\u0027s add a find feature that allows user to be able\nto find their tasks based on the task description only.\n",
            "tags": [
              "Level-9"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 34,
                "deletions": 0
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-27",
        "commitResults": [
          {
            "hash": "16309588c4530a7d8e7fdc0da531f21a5e008586",
            "messageTitle": "Fix missing add task feature",
            "messageBody": "There was an accidental deletion of the method\naddTaskCommand() in Command class, resulting in\nDuke failing to add tasks.\n\nLet\u0027s\n- restore the addTaskCommand() under the execute() method\n  in Command class\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 16,
                "deletions": 3
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-28",
        "commitResults": [
          {
            "hash": "87ab716ff062da7457a5ef780242fdf939725aef",
            "messageTitle": "Update application mainClassName to Duke",
            "messageBody": "Let\u0027s change the mainClassName under application in\nthe build.gradle file to match the location of main method\nwhich is in Duke.\n",
            "tags": [
              "A-Gradle"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 3,
                "deletions": 2
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-29",
        "commitResults": [
          {
            "hash": "b884c999202cb0a194362b175fb53db802bc8f7e",
            "messageTitle": "Adhere to latest Java checkstyle",
            "messageBody": "Let\u0027s correct our checkstyle errors to suit the latest\nJava checkstyle.xml version 8.23.\n",
            "tags": [
              "A-CheckStyle"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 80,
                "deletions": 55
              }
            }
          }
        ]
      },
      {
        "date": "2020-08-31",
        "commitResults": [
          {
            "hash": "d51d251ec55429aebf55fcdcd17e68ff1c8e3f55",
            "messageTitle": "Incorporate GUI into Duke",
            "messageBody": "Let\u0027s use Java FXML to add a GUI to Duke.\n",
            "tags": [
              "Level-10"
            ],
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 22,
                "deletions": 1
              },
              "fxml": {
                "insertions": 43,
                "deletions": 0
              },
              "java": {
                "insertions": 317,
                "deletions": 99
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-02",
        "commitResults": [
          {
            "hash": "89e84f2423de577243ee043ede9be5d354ec300d",
            "messageTitle": "Fix minor code style issues",
            "messageBody": "Changed some variable names that adhere to Java\ncoding standards.\n",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 8,
                "deletions": 11
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-03",
        "commitResults": [
          {
            "hash": "57a237fcdbefdbb79144694be23469e1fd2c0ed2",
            "messageTitle": "Fix more code style issues",
            "messageBody": "Changed some method names that adhere to Java\ncoding standards.\nAlso, added getter methods after setting Event and\nDeadline attributes to private.\n",
            "fileTypesAndContributionMap": {
              "fxml": {
                "insertions": 1,
                "deletions": 1
              },
              "java": {
                "insertions": 87,
                "deletions": 70
              }
            }
          },
          {
            "hash": "a2608ab1e9b4cd249f74782761ba50a096d4f803",
            "messageTitle": "Update shadow plugin version",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "gradle": {
                "insertions": 1,
                "deletions": 1
              }
            }
          }
        ]
      },
      {
        "date": "2020-09-04",
        "commitResults": [
          {
            "hash": "729e9b13a5f394596207178f1b25c64e94491680",
            "messageTitle": "Add assertions wherever possible",
            "messageBody": "Let\u0027s add assertions at points of codes where it is not\nsupposed to be reached.\n",
            "tags": [
              "A-Assertions"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 5,
                "deletions": 6
              }
            }
          },
          {
            "hash": "eac42b3be93af005c878fff3be0aa428c6df0e0d",
            "messageTitle": "Improve code quality in code",
            "messageBody": "Let\u0027s:\n- Abstract long methods into shorter ones to improve\n  readability,\n- Use switch statements where applicable instead of if-else to\n  for better readability,\n- Add javadocs for all public methods.\n",
            "tags": [
              "A-CodeQuality"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 326,
                "deletions": 184
              }
            }
          },
          {
            "hash": "b84034591d0174fc3073e6ca294ccc684838d269",
            "messageTitle": "Add alphabetical task sorting feature",
            "messageBody": "Let\u0027s add a sorting feature for Duke whereby tasks are\nbeing sorted based on alphabetical order of their description.\n",
            "tags": [
              "C-Sort",
              "BCD-Extension"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 56,
                "deletions": 1
              }
            }
          },
          {
            "hash": "2ee0512a66bd87957e356d84d5d817c8bb255161",
            "messageTitle": "Add the usage of enums for keywords",
            "messageBody": "Let\u0027s use enums to improve our code quality.\n",
            "tags": [
              "A-Enums"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 56,
                "deletions": 47
              }
            }
          },
          {
            "hash": "c73e2499e418f5fdfb4fee2fd8946f7431998809",
            "messageTitle": "Fix string to enum conversion bug",
            "messageBody": "",
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 6,
                "deletions": 3
              }
            }
          },
          {
            "hash": "cda1b75caefc9d5af4ddc567c7a6152cd670c538",
            "messageTitle": "Use java streams for methods where applicable",
            "messageBody": "",
            "tags": [
              "A-Streams"
            ],
            "fileTypesAndContributionMap": {
              "java": {
                "insertions": 4,
                "deletions": 6
              }
            }
          }
        ]
      }
    ]
  },
  "authorFileTypeContributionMap": {
    "kc-98": {
      "java": 1569,
      "md": 0,
      "fxml": 43,
      "sh": 0,
      "bat": 8,
      "gradle": 24,
      "txt": 28
    }
  },
  "authorContributionVariance": {
    "kc-98": 173625.78
  },
  "authorDisplayNameMap": {
    "kc-98": "CS2103T-T15-3 ANG ..CHAO"
  }
}
