[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    protected Date time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Deadline(String description, String dateAndTime, TaskType taskType) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(description, taskType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] dateAndTimeSplit \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] dateSplit \u003d dateAndTimeSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.date \u003d LocalDate.of(Integer.parseInt(dateSplit[2]),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                Integer.parseInt(dateSplit[1]),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                Integer.parseInt(dateSplit[0]));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeUnformatted \u003d dateAndTimeSplit[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeFormatted \u003d timeUnformatted.substring(0, 2)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + timeUnformatted.substring(2, 4);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        SimpleDateFormat _24HourFormat \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            this.time \u003d _24HourFormat.parse(timeFormatted);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Hmm that didn\u0027t work... Is your time in HHMM format?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String printDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"E, MMM dd yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return dateTimeFormatter.format(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        SimpleDateFormat _12HourFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return _12HourFormat.format(time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return \"[Deadline]\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + super.toString()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"(by: \" + this.printDate() + \" \" + this.printTime() + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 47
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String logo \u003d \" __________________________________________________________\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"|                                                          |\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"|  ____     _     _____   ____  _   _ ____   ____ _______  |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"| |  _ \\\\   / \\\\   |  __ \\\\ / __ \\\\| \\\\ | |  _ \\\\ / __ \\\\__   __| |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"| | |_) | /   \\\\  | |__) | |  | |  \\\\| | |_) | |  | | | |    |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"| |  _ \u003c / /_\\\\ \\\\ |  _  /| |  | | . ` |  _ \u003c| |  | | | |    |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"| | |_) / _____ \\\\| | \\\\ \\\\| |__| | |\\\\  | |_) | |__| | | |    |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"| |____/_/     \\\\_\\\\_|  \\\\_\\\\\\\\____/|_| \\\\_|____/ \\\\____/  |_|    |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"|                                                          |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"|__________________________________________________________|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String divider \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"Hello, I am BaronBot!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        List\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] cmdArr \u003d {\"help\", \"add\", \"list\", \"done\", \"delete\", \"date\", \"bye\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String input \u003d sc.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(divider);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                if (input.equals(\"help\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    processHelp(cmdArr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                } else if (input.equals(\"add\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    processAdd(taskArr, sc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    saveTaskChanges(taskArr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    if (taskArr.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        throw new EmptyListException(\"There are no tasks on your list\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    processList(taskArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                } else if (input.equals(\"done\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    if (taskArr.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        throw new EmptyListException(\"There are no tasks on your list\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    processDone(taskArr, sc);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    saveTaskChanges(taskArr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                } else if (input.equals(\"delete\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    if (taskArr.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        throw new EmptyListException(\"There are no tasks on your list\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    processDelete(taskArr, sc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    saveTaskChanges(taskArr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    throw new UnknownCommandException(\"Sorry I didn\u0027t understand that :(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            } catch (UnknownCommandException e1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(e1.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(\"How about entering \u0027help\u0027 instead?\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(\"Use the \u0027add\u0027 command to start adding tasks!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(divider);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"What else would you like to do?\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(divider);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            input \u003d sc.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"Bye! See you around :)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processHelp(String[] cmdArr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"Here are the commands you can use:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        for (int i \u003d 0; i \u003c cmdArr.length; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println((i + 1) + \". \" + cmdArr[i]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processAdd(List\u003cTask\u003e taskArr, Scanner sc) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"What kind of task is it?\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.print(\" - Todo\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \" - Deadline\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \" - Event\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            String type \u003d sc.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            TaskType taskType;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            switch (type.toLowerCase()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    System.out.println(\"Please enter the task\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    System.out.println(\"Please enter the task followed by the date and time of the deadline\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    System.out.println(\"e.g., submit report ,11/10/2019 1700\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    System.out.println(\"Please enter the event followed by the date and time of the event\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    System.out.println(\"e.g., team project meeting ,2/10/2019 1400-1600\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    throw new InvalidTaskTypeException(\"Oops that wasn\u0027t a valid task type!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            processTaskType(taskArr, taskType, sc);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (InvalidTaskTypeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processTaskType(List\u003cTask\u003e taskArr, TaskType taskType, Scanner sc) throws ArrayIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String inputToAdd \u003d sc.nextLine();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            if (inputToAdd.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                throw new EmptyDescriptionException(\"Oops, the description can\u0027t be empty!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskArr.add(new Todo(inputToAdd, taskType));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    String[] deadlineSplit \u003d inputToAdd.split(\",\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskArr.add(new Deadline(deadlineSplit[0], deadlineSplit[1], taskType));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    String[] eventSplit \u003d inputToAdd.split(\",\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    taskArr.add(new Event(eventSplit[0], eventSplit[1], taskType));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Alright, I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(taskArr.get(taskArr.size() - 1).toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"You now have \" + taskArr.size() + \" tasks on your list\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (EmptyDescriptionException e1){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(e1.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e2) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Hmmm, looks like the format didn\u0027t work\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Refer to the example for help! :P\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processList(List\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"These are the tasks on your list:\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            for (int j \u003d 0; j \u003c taskArr.size(); j++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println((j + 1)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        + taskArr.get(j).toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processDone(List\u003cTask\u003e taskArr, Scanner sc) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"Which task do you want to mark as done?\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        sc.nextLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            if (taskArr.get(taskNum - 1).isDone()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                throw new InvalidDoneCommandException(\"This task is already done!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                taskArr.get(taskNum - 1).markAsDone();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(\"Good job! This task is now marked as done:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                System.out.println(taskArr.get(taskNum - 1).toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Sorry that task doesn\u0027t exist :/\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Try using \u0027list\u0027 to find out what tasks you have!\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (InvalidDoneCommandException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Check out each task\u0027s status by using \u0027list\u0027!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void processDelete(List\u003cTask\u003e taskArr, Scanner sc) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        System.out.println(\"Which task do you want to delete?\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        int taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        sc.nextLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            Task task \u003d taskArr.get(taskNum - 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            taskArr.remove(taskNum - 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Alright, the following task has been removed:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(task.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"You now have \" + taskArr.size() + \" tasks on your list\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Sorry that task doesn\u0027t exist :/\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Try using \u0027list\u0027 to find out what tasks you have!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static void saveTaskChanges(List\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        File taskDir \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        if (!taskDir.exists()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            taskDir.mkdir();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        File tasks \u003d new File(\"./data/Tasks.txt\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            if(!tasks.exists()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                tasks.createNewFile();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"./data/Tasks.txt\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            for (int j \u003d 0; j \u003c taskArr.size(); j++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                writer.write((j + 1)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        + \". \""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                        + taskArr.get(j).toString() + \"\\n\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Invalid file name\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "KohHanMing": 215
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class EmptyDescriptionException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public EmptyDescriptionException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "src/main/java/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class EmptyListException extends IllegalStateException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public EmptyListException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        protected Date timeStart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        protected Date timeEnd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    Event(String description, String dateAndTime, TaskType taskType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(description, taskType);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] dateAndTimeSplit \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] dateSplit \u003d dateAndTimeSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.date \u003d LocalDate.of(Integer.parseInt(dateSplit[2]),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                Integer.parseInt(dateSplit[1]),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                Integer.parseInt(dateSplit[0]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String[] timeSplit \u003d dateAndTimeSplit[1].split(\"-\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeStartUnformatted \u003d timeSplit[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeStartFormatted \u003d timeStartUnformatted.substring(0, 2)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + timeStartUnformatted.substring(2, 4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeEndUnformatted \u003d timeSplit[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        String timeEndFormatted \u003d timeEndUnformatted.substring(0, 2)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \":\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + timeEndUnformatted.substring(2, 4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        SimpleDateFormat _24HourFormat \u003d new SimpleDateFormat(\"HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            this.timeStart \u003d _24HourFormat.parse(timeStartFormatted);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            this.timeEnd \u003d _24HourFormat.parse(timeEndFormatted);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            System.out.println(\"Hmm that didn\u0027t work... Is your time in HHMM format?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String printDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"E, MMM dd yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return dateTimeFormatter.format(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        SimpleDateFormat _12HourFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return _12HourFormat.format(timeStart)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + _12HourFormat.format(timeEnd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean hasSameDateAs(LocalDate d1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return this.date.equals(d1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return \"[Event]\" + super.toString()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"(at: \" + this.printDate() + \" \" + this.printTime() + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 58
    }
  },
  {
    "path": "src/main/java/InvalidDoneCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class InvalidDoneCommandException extends IllegalStateException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public InvalidDoneCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "src/main/java/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class InvalidTaskTypeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public InvalidTaskTypeException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public Task(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean isDone(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + this.getStatusIcon()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + \"]\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                + this.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 39
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    EVENT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public Todo(String description, TaskType taskType) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super (description, taskType);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return \"[Todo]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 10
    }
  },
  {
    "path": "src/main/java/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public UnknownCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "aaaaaa"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "add"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "add"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "assigment ,2pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "add"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "lunch with the boys , 12-1pm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "KohHanMing": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\kohha\\Desktop\\git\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "KohHanMing": 6
    }
  }
]
