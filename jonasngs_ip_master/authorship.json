[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    archiveBaseName \u003d \"DukeBot v0.2\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "jonasngs": 28
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "T | 1 | eat | play"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "D | 1 | eat | test | 2020-02-01 12:00"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String userDialogStyle \u003d \"-fx-background-color: salmon; \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"-fx-background-radius: 10; -fx-padding: 10 15 10 15\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        dialogBox.dialog.setStyle(userDialogStyle);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        dialogBox.displayPicture.setClip(new Circle(54, 43, 42));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String dukeDialogStyle \u003d \"-fx-background-color: lightSteelBlue; \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"-fx-background-radius: 10; -fx-padding: 10 15 10 15\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        db.dialog.setStyle(dukeDialogStyle);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        db.displayPicture.setClip(new Circle(50, 42, 42));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 70
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a chat bot that functions as a task manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Ui object that functions as the user interface. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Storage object that handles file operations. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** TaskList object containing the user\u0027s list of tasks. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Duke object that has a Ui, Storage and TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tasks \u003d this.storage.readFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes a DukeBot session for the bot to perform its intended functions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(Ui.showWelcome());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Command command \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                System.out.println(command.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Initialises a new DukeBot session."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param args Command-line arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // start a new session with JonasBot"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Duke session \u003d new Duke();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // execute the bot to perform intended functions"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        session.run();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 71,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonasngs": 10
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            stage.setTitle(\"JonasBot\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 34
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Initialises the dialog container and prints the welcome greeting."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (response.equals(\"Goodbye... For now.\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            handleExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TimerTask timerTask \u003d new TimerTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Timer delay \u003d new Timer();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        delay.schedule(timerTask, 2000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 78
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.FindByDateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.FindByKeywordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.TagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a parser to make sense of the user inputs so that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * the correct command can be executed by DukeBot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String END_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String ADD_EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FIND_BY_DATE_COMMAND \u003d \"find_by_date\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FIND_BY_KEYWORD_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"help\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String TAG_COMMAND \u003d \"tag\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses the input entered by users and returns a Command object to be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * executed by DukeBot if the input is valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput Inputs entered by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidFunctionException If the input is not a valid command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static Command parse(String userInput) throws InvalidFunctionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d userInput.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] parsedCommand \u003d message.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String function \u003d parsedCommand[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (message.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String err \u003d \"No input was entered! Please enter something!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(err);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(Parser.HELP_COMMAND)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(Parser.END_COMMAND)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (message.equals(Parser.LIST_COMMAND)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.DONE_COMMAND)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DoneCommand(parsedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_TODO_COMMAND)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"todo\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new ToDoCommand(parsedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"deadline\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeadlineCommand(parsedCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.ADD_EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parsedCommand \u003d message.split(\"event\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new EventCommand(parsedCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new DeleteCommand(parsedCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.FIND_BY_DATE_COMMAND)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindByDateCommand(parsedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.FIND_BY_KEYWORD_COMMAND)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new FindByKeywordCommand(parsedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else if (function.equals(Parser.TAG_COMMAND)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new TagCommand(parsedCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 81
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to file operations"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * and storage of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIRECTORY \u003d \"data\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String FILE_LOCATION \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the list of tasks stored in the designated file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and stores them in a TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return TaskList containing the tasks retrieved from the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TaskList readFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataDirectory \u003d new File(Storage.DIRECTORY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // make a data directory if the directory does not exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataDirectory.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            File dataFile \u003d new File(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // create an empty file to store the tasks if the file does not exist"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            assert dataFile.exists();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Scanner scanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String[] taskData \u003d scanner.nextLine().split(\" \\\\|\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (taskData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task todo \u003d retrieveTodo(taskData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    tasks.add(todo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else if (taskData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task deadline \u003d retrieveDeadline(taskData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                } else if (taskData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    Task event \u003d retrieveEvent(taskData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new TaskList(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the todo task from its string representation stored in the designated file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param todoData String array containing the todo task details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Todo task stored in the designated file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Todo retrieveTodo(String[] todoData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(todoData[2].trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String tag \u003d todoData[3].trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (todoData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            todo.markAsDone();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!tag.isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            todo.setTaskTag(tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the deadline task from its string representation stored in the designated file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param deadlineData String array containing the deadline task details."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Deadline task stored in the designated file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Deadline retrieveDeadline(String[] deadlineData) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String dateTime \u003d deadlineData[4].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String tag \u003d deadlineData[3].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] dateTimeArray \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate taskDate \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime taskTime \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineData[2].trim(), taskDate, taskTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (deadlineData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            deadline.markAsDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!tag.isBlank()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            deadline.setTaskTag(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the event task from its string representation stored in the designated file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param eventData String array containing the event task details."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Event task stored in the designated file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Event retrieveEvent(String[] eventData) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String dateTime \u003d eventData[4].trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String tag \u003d eventData[3].trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] dateTimeArray \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate taskDate \u003d LocalDate.parse(dateTimeArray[0]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime taskTime \u003d LocalTime.parse(dateTimeArray[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Event event \u003d new Event(eventData[2].trim(), taskDate, taskTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (eventData[1].equals(\" 1\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!tag.isBlank()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            event.setTaskTag(tag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Stores the list of tasks, in the TaskList object, into the designated file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks TaskList object containing a list of tasks to be saved in the designated file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void saveToFile(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(Storage.FILE_LOCATION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                fileWriter.write(task.convertTaskToFileString() + \"\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The task file could not be updated.\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DukeException(error);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 151
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Handles interactions with the user while the user is using DukeBot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DIVIDER \u003d \"----------------------------------------\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Scanner object to read user inputs. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Ui object to deal with user interactions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * using a scanner object to read user inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a greeting to welcome the user when a new session with DukeBot"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * is initialised."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static String showWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String greeting \u003d \"Hello! I am JonasBot! Nice to meet you :) \\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"To view a list of all my commands, input \u0027help\u0027 \\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"How may I assist you today?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return greeting;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Scans for user inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representing the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply when a new task has been successfully created and added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param task Task that was created."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param listSize Current number of tasks in the user\u0027s list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a reply for successful task creation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showNewTask(Task task, int listSize) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d \"Success! This task has been added:\\n\" + task.toString()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"\\nYou have \" + listSize + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply when a task has been successfully deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param task Task that was deleted."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param listSize Current number of tasks in the user\u0027s list of tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a reply for successful task deletion."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showDeletedTask(Task task, int listSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d \"Found it! This task has been successfully deleted: \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + task.toString() + \"\\nYou have \" + listSize + \" tasks in your list now.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply when a task has been successfully marked as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param task Task which was marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a reply for when a task is marked as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showCompletedTask(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply containing a list of tasks in a well-ordered fashion."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the list of tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showTaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        StringBuilder message;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            message \u003d new StringBuilder(\"No tasks were found!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            message \u003d new StringBuilder(\"Here are the tasks that I have found:\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String task \u003d \"\\n\" + String.format(\"%d. %s\", index, tasks.get(i).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                message.append(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply when the tag has been successfully attached to the desired task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param task Task which the tag was attached to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a reply for when the tag is added to the desired task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showAddedTag(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve added the tag to your task:\\n\" + task.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a reply containing a list of Duke\u0027s functions and their respective commands."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing Duke functions and commands."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showFunctions() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String commands \u003d \"Below is a list of all the commands for my functions: \\n\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1. Create a new task: \\n\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1.1 Todo: \u0027todo \u003ctask description\u003e\u0027. For eg, todo eat \\n\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1.2 Deadline: \u0027deadline \u003ctask description\u003e /by \u003cdeadline date\u003e\u0027. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Input the date using the format: dd/mm/yyyy hh:mm. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"For eg, deadline return book /by 12/2/2020 13:00 \\n\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1.3 Event: \u0027event \u003ctask description\u003e /at \u003cevent date\u003e\u0027. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Input the date using the format: dd/mm/yyyy hh:mm. \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"For eg, event project meeting /at 1/3/2020 12:00 \\n\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"2. To display all tasks in your list: \u0027list\u0027 \\n\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"3. To mark a task as completed: \u0027done \u003ctask ID\u003e\u0027. For eg, done 2 \\n\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"4. To delete a task: \u0027delete \u003ctask ID\u003e\u0027. For eg, delete 2 \\n\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"5. To search for a task by keyword: \u0027find \u003ckeyword\u003e\u0027. For eg, find book\\n\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"6. To search for a task by date: \u0027find_by_date \u003cdate\u003e\u0027. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Input the date using the format: dd/mm/yyyy. For eg, find_by_date 12/2/2020\\n\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"7. To tag a task: \u0027tag \u003ctask ID\u003e \u003ctag\u003e\u0027. For eg, tag 1 fun\\n\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"8. To end this chat: \u0027bye\u0027. \";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a farewell message when the session with DukeBot is terminated."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String showFarewell() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String farewellMessage \u003d \"Goodbye... For now.\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return farewellMessage;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints a line to divide and segment the chat text."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        System.out.println(Ui.DIVIDER);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 157
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to be executed by the DukeBot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes the relevant command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the command cannot be executed successfully."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the DukeBot session is going to be terminated, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new deadline task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the deadline task. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DeadlineCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the deadline task information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeadlineCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new deadline task, adds it to the user\u0027s list of tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file that stores the user\u0027s tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new deadline task will be added into."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful execution of command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the deadline task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] deadlineInfo \u003d retrieveDeadlineInfo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            assert !deadlineInfo[0].isBlank();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d deadlineInfo[1].split(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate deadlineDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime deadlineTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task deadline \u003d new Deadline(deadlineInfo[0], deadlineDate, deadlineTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showNewTask(deadline, tasks.getListSize());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The task date format is incorrect. \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the deadline task and stores it in an array."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the deadline description and deadline time stamp."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the deadline information is invalid or is missing arguments."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveDeadlineInfo() throws InvalidTaskException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] deadlineArguments \u003d this.parsedCommand[1].split(\" /by \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!this.parsedCommand[1].contains(\" /by \") \u0026\u0026 !this.parsedCommand[1].endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your deadline task has an incorrect format. The task cannot be created.\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().equals(\"/by\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your deadline task is missing a description and time stamp. \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"The task cannot be created.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your deadline task is missing a time stamp. The task cannot be created.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (deadlineArguments[0].isBlank()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your deadline task is missing a description. The task cannot be created.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String description \u003d deadlineArguments[0].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String time \u003d deadlineArguments[1].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new String[]{description, time};"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your deadline task has missing arguments. The task cannot be created.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 112
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to delete a task from the user\u0027s list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the task to be deleted. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DeleteCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains information of the task to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DeleteCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Deletes the task from the user\u0027s list of tasks and updates the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * stored in the designated file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful deletion of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be deleted due to invalid arguments."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Invalid Task! The task ID you provided is not valid. \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task toRemove \u003d tasks.getTask(index - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.removeTask(index - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showDeletedTask(toRemove, tasks.getListSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No Task ID provided! Please input the ID of the task you wish to delete.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your input is not a recognised command. You have to provide the ID of \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"the task you wish to delete.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 71
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to mark a task as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the task to be marked as done. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DoneCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains information of the task to be marked as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DoneCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Marks the task as done and updates it accordingly in the user\u0027s list of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * stored in the designated file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful completion of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the task cannot be mark completed due to invalid arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int index \u003d Integer.parseInt(this.parsedCommand[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (index \u003e tasks.getListSize() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Invalid Task! The task ID you provided is not valid. \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.completeTask(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showCompletedTask(tasks.getTask(index - 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No Task ID provided! Please input the ID of the task you wish to mark as completed.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your input is not a recognised command. You have to provide the ID of \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"the task you wish to mark as done. \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 69
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new event task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the event task. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new EventCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the event task information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public EventCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new event task, adds it to the user\u0027s list of tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file that stores the user\u0027s tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new event task will be added into."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful creation of event task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the event task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] eventInfo \u003d retrieveEventInfo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            assert !eventInfo[0].isBlank();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] timeStamp \u003d eventInfo[1].split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate eventDate \u003d LocalDate.parse(timeStamp[0], dateFormatter);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalTime eventTime \u003d LocalTime.parse(timeStamp[1], timeFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Task event \u003d new Event(eventInfo[0], eventDate, eventTime);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            tasks.addTask(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showNewTask(event, tasks.getListSize());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException | ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The task date format is incorrect. \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the event task and stores it in an array."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the event description and event time stamp."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the event information is invalid or is missing arguments."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveEventInfo() throws InvalidTaskException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] eventArguments \u003d this.parsedCommand[1].split(\" /at \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (!this.parsedCommand[1].contains(\" /at \") \u0026\u0026 !this.parsedCommand[1].endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your event task has an incorrect format. The task cannot be created.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().equals(\"/at\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your event task is missing a description and time stamp. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                        + \"The task cannot be created.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (this.parsedCommand[1].trim().endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your event task is missing a time stamp. The task cannot be created.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            } else if (eventArguments[0].isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                String error \u003d \"Your event task is missing a description. The task cannot be created.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String description \u003d eventArguments[0].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String time \u003d eventArguments[1].trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new String[]{description, time};"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your event task has missing arguments. The task cannot be created.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 111
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to terminate the DukeBot session."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Terminates the DukeBot session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply to ExitCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // storage.saveFile(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return ui.showFarewell();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True since the DukeBot session has been terminated by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 36
    }
  },
  {
    "path": "src/main/java/duke/command/FindByDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to search for tasks by date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindByDateCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing the search date. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new FindByDateCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the search date input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindByDateCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Performs the operation of searching for all the tasks in the user\u0027s list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * of tasks that matches the date provided for the search."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a list of tasks that matches the search date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If no tasks could be found due to invalid date provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String date \u003d parsedCommand[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            assert !date.isBlank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            LocalDate dateToSearch \u003d LocalDate.parse(date, dateFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Predicate\u003cTask\u003e searchDateFilter \u003d task -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                return task.getDate() !\u003d null \u0026\u0026 task.getDate().isEqual(dateToSearch);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            };"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            List\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e(tasks.getTaskList())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .filter(searchDateFilter)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showTaskList(searchResults);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No task date provided. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027 \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The task date format is incorrect. \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    + \"Please input a valid date using the format: \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 85
    }
  },
  {
    "path": "src/main/java/duke/command/FindByKeywordCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to search for tasks using a keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class FindByKeywordCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing the search keyword. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new FindByKeywordCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the search keyword input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public FindByKeywordCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Performs the operation of searching for all the tasks in the user\u0027s list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * of tasks that contains the keyword provided for the search."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a list of tasks that matches the search keyword."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If no tasks could be found due to invalid keyword provided."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String keyword \u003d this.parsedCommand[1].trim().toLowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Predicate\u003cTask\u003e searchKeywordFilter \u003d task -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                return task.getDescription().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            List\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e(tasks.getTaskList())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .filter(searchKeywordFilter)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            assert !keyword.isBlank();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return ui.showTaskList(searchResults);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No keyword for the search was entered. Please enter a keyword!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 73
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to view a list of Duke\u0027s function and the function commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints all of Duke\u0027s functions and the commands for each function."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a list of all of Duke\u0027s functions and commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return ui.showFunctions();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 35
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to handle invalid inputs by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Throws a DukeException to inform the user of the invalid input provided."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply to an invalid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException DukeException is thrown to inform the user of the invalid input provided."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String error \u003d \"Invalid Function!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to display all the tasks in the user\u0027s list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Prints all the user\u0027s tasks and the relevant task information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing a list of all the user\u0027s tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return ui.showTaskList(tasks.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 35
    }
  },
  {
    "path": "src/main/java/duke/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidFunctionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to attach a tag to a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the tag and the task to tagged. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new TagCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains information of the tag and the task to be tagged."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TagCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Attaches a tag to a task and updates it accordingly in the user\u0027s list of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * stored in the designated file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks belonging to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful tagging of the desired task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the tag cannot be attached to the task due to invalid arguments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] tagInfo \u003d retrieveTagInfo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int taskID \u003d Integer.parseInt(tagInfo[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String tag \u003d tagInfo[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (taskID \u003e tasks.getListSize() || taskID \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Invalid Task! The task ID you provided is not valid. \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Task task \u003d tasks.getTask(taskID - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        task.setTaskTag(tag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return ui.showAddedTag(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the details of the tag command and stores it in an array."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the ID of the task to be tagged and the tag."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidFunctionException If the user input has missing arguments."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String[] retrieveTagInfo() throws InvalidFunctionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String[] commandArguments \u003d this.parsedCommand[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int taskID \u003d Integer.parseInt(commandArguments[0]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String tag \u003d commandArguments[1].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new String[]{Integer.toString(taskID), tag};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your tag command has missing arguments\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No task ID provided! Please input the ID of the task you wish to tag.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidFunctionException(error);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 84
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to add a new todo task to the user\u0027s list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Parsed commands containing details of the todo task. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String[] parsedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new ToDoCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param parsedCommand String array that contains the todo task information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ToDoCommand(String[] parsedCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.parsedCommand \u003d parsedCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a new todo task, adds it to the user\u0027s list of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * and saves it into the designated file that stores the user\u0027s tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks which the new todo task will be added into."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param ui Ui object created for the Duke object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param storage Storage object used by the Duke object for file operations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the reply for successful creation of ToDo task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws DukeException If the todo task cannot be created due to invalid inputs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String todoInfo \u003d this.retrieveTodoInfo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Task todo \u003d new Todo(todoInfo.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assert !todoInfo.isBlank();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        storage.saveToFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return ui.showNewTask(todo, tasks.getListSize());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the description of the todo task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the todo description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws InvalidTaskException If the todo description is missing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String retrieveTodoInfo() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (this.parsedCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Your todo task description is empty. The task cannot be created.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new InvalidTaskException(error);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String todoInfo \u003d this.parsedCommand[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return todoInfo;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the DukeBot session has ended."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the DukeBot session has not been terminated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 75
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception pertaining to Duke\u0027s operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new DukeException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(\"Oh no! \" + message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidFunctionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception which occurs when the user provides an invalid or unrecognised command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidFunctionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new InvalidFunctionException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidFunctionException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message + \"\\nType \u0027help\u0027 for a list of all my functions and their commands.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents an exception relating to an invalid task which does not exist or is not recognised."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class InvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new InvalidTaskException with a specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param message String containing the specified error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to a deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Due date of the deadline task. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalDate deadlineDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Time in which the deadline task is due. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalTime deadlineTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Deadline object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param deadlineDate LocalDate object that stores the due date of the deadline task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param deadlineTime LocalTime object that stores the time the deadline task is due."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Deadline(String description, LocalDate deadlineDate, LocalTime deadlineTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.deadlineTime \u003d deadlineTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the due date of the deadline task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the due date of the deadline task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.deadlineDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the deadline object into a string for storage in a file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this deadline object to be saved in a file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String convertTaskToFileString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"D | \" + (hasBeenCompleted() ? \"1 | \" : \"0 | \") + getDescription() + \" | \" + getTaskTag()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \" | \" + this.deadlineDate.toString() + \" \" + this.deadlineTime.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the deadline object into a string to be displayed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this deadline object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedDeadlineTime \u003d this.deadlineDate.format(dateFormatter)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \", \" + this.deadlineTime.format(timeFormatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formattedDeadlineTime + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to an event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Date in which the event task occurs. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalDate eventDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Time of the event task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private LocalTime eventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Event object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param eventDate LocalDate object that stores the date of the event task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param eventTime LocalTime object that stores the time the event task is arranged for."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Event(String description, LocalDate eventDate, LocalTime eventTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this event task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the date of the event task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.eventDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the event object into a string for storage in a file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this event object to be saved in a file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String convertTaskToFileString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"E | \" + (hasBeenCompleted() ? \"1 | \" : \"0 | \") + getDescription() + \" | \" + getTaskTag()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \" | \" + this.eventDate.toString() + \" \" + this.eventTime.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the event object into a string to be displayed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this event object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"EE, MMM dd yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String formattedEventTime \u003d this.eventDate.format(dateFormatter)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \", \" + this.eventTime.format(timeFormatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formattedEventTime + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information relating to a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Description of the task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Boolean describing whether the task has been completed. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** Tag attached to a task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tag \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a status icon to indicate the completion status of this task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Tick symbol if the task is completed, else a cross symbol is returned."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Marks this task object as completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the task object into a string for storage in a file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this task object to be saved in a file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract String convertTaskToFileString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Attaches a tag to the task object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tag Task tag to be attached."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void setTaskTag(String tag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return LocalDate object that stores the date of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns a boolean to indicate whether the task has been completed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the task is completed, false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasBeenCompleted() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the description of this task object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the description of this task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assert !this.description.isBlank();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the tag of this task object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the tag of this task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String getTaskTag() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the task object into a string to be displayed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + (this.tag.isBlank() ? \" \" : \"[#\" + this.tag + \"] \") + this.description;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 105
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates information and methods that relate to a list of tasks being tracked"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * for the user by DukeBot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** List of tasks belonging to the user. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param tasks List of tasks that has been created by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Number of tasks in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the correct task in the list of tasks at the given index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the desired task in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Task at the given index in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the list of tasks created by the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a new task into the list of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes a task from the list of tasks at the given index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the task to be deleted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeTask(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Marks the task at the given index in the task list as completed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the task to be completed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void completeTask(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.tasks.get(index).markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 78
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates methods and information that relate to a todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new Todo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param description Description of the Todo task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the todo object into a string for storage in a file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the relevant information of this todo object to be saved in a file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String convertTaskToFileString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"T | \" + (hasBeenCompleted() ? \"1 | \" : \"0 | \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + getDescription() + \" | \" + this.getTaskTag();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns the date of this todo task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Null since a todo task has no relevant date information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Converts the todo object into a string to be displayed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String representation of this todo object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 49
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u003cFont name\u003d\"Consolas\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"250.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "      \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 32
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter command here\" style\u003d\"-fx-prompt-text-fill: white; -fx-background-radius: 10; -fx-background-color: darkslateblue; -fx-text-fill: white;\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"80.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" style \u003d\"-fx-background-color: darkslateblue; -fx-background-radius: 10; -fx-text-fill: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                -fx-font-size: 15px; -fx-font-weight: bold;\" AnchorPane.rightAnchor\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style \u003d \"-fx-background-color: lavenderblush;\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 21
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addTodoCommand_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Success! This task has been added:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"[T][✘] junit tests\\n\" + \"You have 1 tasks in your list now.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"todo junit tests\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addDeadlineCommand_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Success! This task has been added:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"[D][✘] junit (by: Sat, Feb 01 2020, 01:00 AM)\\n\" + \"You have 1 tasks in your list now.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                Parser.parse(\"deadline junit /by 1/2/2020 1:00\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addEventCommand_invalidInput_failure() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"event eat\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Your event task has an incorrect format. The task cannot be created.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addEventCommand_missingDescription_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"event /at 1/2/2020 1:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Your event task is missing a description. The task cannot be created.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addDeadlineCommand_missingTimeStamp_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"deadline eat /by\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Your deadline task is missing a time stamp. The task cannot be created.\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addEventCommand_invalidDateTimeFormat_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"event eat /at 12 feb 2020\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! The task date format is incorrect. \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Please input a valid date using the format: \u0027dd/mm/yyyy hh:mm\u0027. For eg, 10/8/2020 18:00\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addDeadlineCommand_missingDescriptionAndTime_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"deadline /by\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Your deadline task is missing a description and time stamp. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"The task cannot be created.\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void deleteTaskCommand_validTaskID_success() throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Task todo \u003d new Todo(\"read\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Found it! This task has been successfully deleted: \\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"[T][✓] read\\n\" + \"You have 0 tasks in your list now.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"delete 1\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void deleteTaskCommand_invalidTaskID_failure() throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        listOfTasks.add(new Todo(\"todo description\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(listOfTasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"delete 10\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Invalid Task! The task ID you provided is not valid. \\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void completeTaskCommand_validTaskID_success() throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Task todo \u003d new Todo(\"adding a todo\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"[T][✓] adding a todo\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"done 1\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void completeTaskCommand_invalidTaskID_throwsException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"done 10\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Invalid Task! The task ID you provided is not valid. \\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void testExitCommand() throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Goodbye... For now.\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"bye\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void findTaskByDateCommand_validDate_success() throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"deadline eat /by 1/2/2020 1:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"event play /at 1/3/2020 12:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Here are the tasks that I have found:\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1. [D][✘] eat (by: Sat, Feb 01 2020, 01:00 AM)\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"find_by_date 1/2/2020\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void findTaskByDateCommand_invalidDate_throwsException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"find_by_date 10 May\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! The task date format is incorrect. Please input a valid date using the format: \u0027dd/mm/yyyy\u0027\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void findTaskByKeywordCommand_validInput_success() throws DukeException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"deadline cs2103T tutorial /by 1/2/2020 1:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"event cs2100 lecture /at 1/3/2020 12:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Here are the tasks that I have found:\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1. [D][✘] cs2103T tutorial (by: Sat, Feb 01 2020, 01:00 AM)\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"find cs2103T\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void findTaskByKeywordCommand_missingKeyword_throwsException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"find\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! No keyword for the search was entered. Please enter a keyword!\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void invalidCommand_invalidInput_throwsException() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"find\").execute(new TaskList(new ArrayList\u003c\u003e()), new Ui(), new Storage());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! No keyword for the search was entered. Please enter a keyword!\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"Type \u0027commands\u0027 for a list of all my functions and their commands.\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void testListCommand() throws DukeException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"todo finish ip\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser.parse(\"event start tp /at 1/9/2020 12:00\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Here are the tasks that I have found:\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                + \"1. [T][✘] finish ip\\n\" + \"2. [E][✘] start tp (at: Tue, Sep 01 2020, 12:00 PM)\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, Parser.parse(\"list\").execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 232
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void parser_invalidInput_throwsException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\"invalid input\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! Invalid Function! Input \u0027/commands\u0027 for a list of all my commands.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void parser_missingUserInput_throwsException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DukeException ex \u003d Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            Parser.parse(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Oh no! No input was entered! Please enter something!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, ex.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 28
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void createTodo_validInput_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(\"create tests\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[T][✘] create tests\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void getTodoDescription_validDescription_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(\"Todo description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"Todo description\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, todo.getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void createDeadline_validInput_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"4/5/2020\", dateFormatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"14:00\", timeFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"create deadline\", date, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[D][✘] create deadline (by: Mon, May 04 2020, 02:00 PM)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, deadline.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void taskCompletionStatus_markTaskAsDone_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(\"Create Junit Tests\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(todo.hasBeenCompleted(), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void testTaskRetrieval() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Todo todo \u003d new Todo(\"Junit tests\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expectedTask \u003d \"[T][✘] Junit tests\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expectedTask, tasks.getTask(0).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void taskRemoval_eventTask_emptyTaskList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"10/2/2020\", dateFormatter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"10:00\", timeFormatter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Event event \u003d new Event(\"Junit test\", date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        tasks.removeTask(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(0, tasks.getListSize());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void taskToFileString_validInput_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"H:mm\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"10/10/2020\", dateFormatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LocalTime time \u003d LocalTime.parse(\"10:00\", timeFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Event event \u003d new Event(\"create event\", date, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String expected \u003d \"[E][✘] create event (at: Sat, Oct 10 2020, 10:00 AM)\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        assertEquals(expected, event.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 82
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo do cs2103T project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 2 requirements /by Monday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "event cs2103T lecture /at Fri 4-6pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 1000"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "blah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline finish week 1 post lecture quiz /by Saturday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "todo read up on week 2 topics"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline eat /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 21
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jonasngs": 2
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "jonasngs": 2
    }
  }
]
